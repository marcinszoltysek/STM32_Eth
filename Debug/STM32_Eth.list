
STM32_Eth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006618  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006860  08006860  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006860  08006860  00016860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006868  08006868  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00004c38  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ce0  20004ce0  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001414e  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038cc  00000000  00000000  00034269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001150  00000000  00000000  00037b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d2f  00000000  00000000  00038c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023f54  00000000  00000000  000399b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000145f3  00000000  00000000  0005d90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dfa9d  00000000  00000000  00071efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000048cc  00000000  00000000  0015199c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00156268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080067b0 	.word	0x080067b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	080067b0 	.word	0x080067b0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <MX_FREERTOS_Init+0x18>)
 8000506:	2100      	movs	r1, #0
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <MX_FREERTOS_Init+0x1c>)
 800050a:	f003 fb85 	bl	8003c18 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a03      	ldr	r2, [pc, #12]	; (8000520 <MX_FREERTOS_Init+0x20>)
 8000512:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	0800682c 	.word	0x0800682c
 800051c:	08000525 	.word	0x08000525
 8000520:	200000c4 	.word	0x200000c4

08000524 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */



	IP_set();
 800052c:	f000 f8bc 	bl	80006a8 <IP_set>
	socket_init();
 8000530:	f000 f8ec 	bl	800070c <socket_init>


	while(1){
	echo_server();
 8000534:	f000 f906 	bl	8000744 <echo_server>
 8000538:	e7fc      	b.n	8000534 <StartDefaultTask+0x10>
	...

0800053c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <MX_GPIO_Init+0xa8>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <MX_GPIO_Init+0xa8>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <MX_GPIO_Init+0xa8>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <MX_GPIO_Init+0xa8>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <MX_GPIO_Init+0xa8>)
 8000578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <MX_GPIO_Init+0xa8>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Eth_CS_GPIO_Port, Eth_CS_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2110      	movs	r1, #16
 800058e:	4816      	ldr	r0, [pc, #88]	; (80005e8 <MX_GPIO_Init+0xac>)
 8000590:	f001 ffcc 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059a:	4814      	ldr	r0, [pc, #80]	; (80005ec <MX_GPIO_Init+0xb0>)
 800059c:	f001 ffc6 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Eth_CS_Pin;
 80005a0:	2310      	movs	r3, #16
 80005a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Eth_CS_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	4619      	mov	r1, r3
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <MX_GPIO_Init+0xac>)
 80005b8:	f001 fe0c 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_GPIO_Init+0xb0>)
 80005d6:	f001 fdfd 	bl	80021d4 <HAL_GPIO_Init>

}
 80005da:	bf00      	nop
 80005dc:	3720      	adds	r7, #32
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40020000 	.word	0x40020000
 80005ec:	40021800 	.word	0x40021800

080005f0 <W5500_Select>:
#include "socket.h"




void W5500_Select(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Eth_CS_GPIO_Port, Eth_CS_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <W5500_Select+0x14>)
 80005fa:	f001 ff97 	bl	800252c <HAL_GPIO_WritePin>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40020000 	.word	0x40020000

08000608 <W5500_Unselect>:

void W5500_Unselect(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Eth_CS_GPIO_Port, Eth_CS_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <W5500_Unselect+0x14>)
 8000612:	f001 ff8b 	bl	800252c <HAL_GPIO_WritePin>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40020000 	.word	0x40020000

08000620 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 800062c:	887a      	ldrh	r2, [r7, #2]
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <W5500_ReadBuff+0x24>)
 8000636:	f002 fd7c 	bl	8003132 <HAL_SPI_Receive>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000154 	.word	0x20000154

08000648 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8000654:	887a      	ldrh	r2, [r7, #2]
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <W5500_WriteBuff+0x24>)
 800065e:	f002 fc2c 	bl	8002eba <HAL_SPI_Transmit>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000154 	.word	0x20000154

08000670 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	2101      	movs	r1, #1
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffd0 	bl	8000620 <W5500_ReadBuff>
    return byte;
 8000680:	79fb      	ldrb	r3, [r7, #7]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	4603      	mov	r3, r0
 8000692:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	2101      	movs	r1, #1
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffd5 	bl	8000648 <W5500_WriteBuff>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <IP_set>:
uint8_t rxBuff[100];
uint8_t txBuff[100];
int32_t dataSize = 0;
uint16_t port;

void IP_set() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2}; //2 bytes TX RX in any buffer
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <IP_set+0x44>)
 80006b0:	463b      	mov	r3, r7
 80006b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b6:	e883 0003 	stmia.w	r3, {r0, r1}

    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);  //CS Pin UP function
 80006ba:	490d      	ldr	r1, [pc, #52]	; (80006f0 <IP_set+0x48>)
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <IP_set+0x4c>)
 80006be:	f001 f937 	bl	8001930 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte); //Read 8bit function
 80006c2:	490d      	ldr	r1, [pc, #52]	; (80006f8 <IP_set+0x50>)
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <IP_set+0x54>)
 80006c6:	f001 f959 	bl	800197c <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff); //Read register function
 80006ca:	490d      	ldr	r1, [pc, #52]	; (8000700 <IP_set+0x58>)
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <IP_set+0x5c>)
 80006ce:	f001 f981 	bl	80019d4 <reg_wizchip_spiburst_cbfunc>
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80006d2:	463a      	mov	r2, r7
 80006d4:	463b      	mov	r3, r7
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fa31 	bl	8001b40 <wizchip_init>




    wizchip_setnetinfo(&net_info); //Send information to module W5500
 80006de:	480a      	ldr	r0, [pc, #40]	; (8000708 <IP_set+0x60>)
 80006e0:	f001 faba 	bl	8001c58 <wizchip_setnetinfo>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	080067d4 	.word	0x080067d4
 80006f0:	08000609 	.word	0x08000609
 80006f4:	080005f1 	.word	0x080005f1
 80006f8:	0800068b 	.word	0x0800068b
 80006fc:	08000671 	.word	0x08000671
 8000700:	08000649 	.word	0x08000649
 8000704:	08000621 	.word	0x08000621
 8000708:	20000000 	.word	0x20000000

0800070c <socket_init>:





void socket_init () {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	mySocket = socket(1, Sn_MR_TCP, 502, 0);
 8000710:	2300      	movs	r3, #0
 8000712:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8000716:	2101      	movs	r1, #1
 8000718:	2001      	movs	r0, #1
 800071a:	f000 f97f 	bl	8000a1c <socket>
 800071e:	4603      	mov	r3, r0
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <socket_init+0x34>)
 8000724:	701a      	strb	r2, [r3, #0]
	if(mySocket != 1){	// Error in socket creation
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <socket_init+0x34>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d000      	beq.n	8000730 <socket_init+0x24>
	  	while(1);
 800072e:	e7fe      	b.n	800072e <socket_init+0x22>
	}
	listen(mySocket);
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <socket_init+0x34>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f000 faf3 	bl	8000d20 <listen>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000c8 	.word	0x200000c8

08000744 <echo_server>:


char echo_server (){
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
	serverStatus = getSn_SR(mySocket);
 800074a:	4b51      	ldr	r3, [pc, #324]	; (8000890 <echo_server+0x14c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	3301      	adds	r3, #1
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fddd 	bl	8001318 <WIZCHIP_READ>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4b4c      	ldr	r3, [pc, #304]	; (8000894 <echo_server+0x150>)
 8000764:	701a      	strb	r2, [r3, #0]

 	switch(state){
 8000766:	4b4c      	ldr	r3, [pc, #304]	; (8000898 <echo_server+0x154>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b02      	cmp	r3, #2
 800076c:	f000 8083 	beq.w	8000876 <echo_server+0x132>
 8000770:	2b02      	cmp	r3, #2
 8000772:	f300 8088 	bgt.w	8000886 <echo_server+0x142>
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <echo_server+0x3c>
 800077a:	2b01      	cmp	r3, #1
 800077c:	d02d      	beq.n	80007da <echo_server+0x96>
 800077e:	e082      	b.n	8000886 <echo_server+0x142>

  	case 0: // Wait for client connections
  		if(serverStatus == SOCK_ESTABLISHED){
 8000780:	4b44      	ldr	r3, [pc, #272]	; (8000894 <echo_server+0x150>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b17      	cmp	r3, #23
 8000786:	d179      	bne.n	800087c <echo_server+0x138>
  			ctlnetwork(CN_GET_NETINFO, (void *) &net_info);
 8000788:	4944      	ldr	r1, [pc, #272]	; (800089c <echo_server+0x158>)
 800078a:	2001      	movs	r0, #1
 800078c:	f001 f94e 	bl	8001a2c <ctlnetwork>
  			port = getSn_PORT(mySocket);
 8000790:	4b3f      	ldr	r3, [pc, #252]	; (8000890 <echo_server+0x14c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	3301      	adds	r3, #1
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fdba 	bl	8001318 <WIZCHIP_READ>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	b29c      	uxth	r4, r3
 80007ac:	4b38      	ldr	r3, [pc, #224]	; (8000890 <echo_server+0x14c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	3301      	adds	r3, #1
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fdac 	bl	8001318 <WIZCHIP_READ>
 80007c0:	4603      	mov	r3, r0
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	4423      	add	r3, r4
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <echo_server+0x15c>)
 80007ca:	801a      	strh	r2, [r3, #0]
  			state++;
 80007cc:	4b32      	ldr	r3, [pc, #200]	; (8000898 <echo_server+0x154>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b30      	ldr	r3, [pc, #192]	; (8000898 <echo_server+0x154>)
 80007d6:	701a      	strb	r2, [r3, #0]
  		}
  		break;
 80007d8:	e050      	b.n	800087c <echo_server+0x138>


  	case 1: // Client has been connected
  		if(serverStatus == SOCK_CLOSE_WAIT){ // Check for status
 80007da:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <echo_server+0x150>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b1c      	cmp	r3, #28
 80007e0:	d10a      	bne.n	80007f8 <echo_server+0xb4>
  			close(mySocket);
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <echo_server+0x14c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fa2c 	bl	8000c44 <close>
  			state++;
 80007ec:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <echo_server+0x154>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b28      	ldr	r3, [pc, #160]	; (8000898 <echo_server+0x154>)
 80007f6:	701a      	strb	r2, [r3, #0]
  		}

  		uint8_t intSocketRegister = getSn_IR(mySocket); // Check for incoming data
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <echo_server+0x14c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	3301      	adds	r3, #1
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fd86 	bl	8001318 <WIZCHIP_READ>
 800080c:	4603      	mov	r3, r0
 800080e:	f003 031f 	and.w	r3, r3, #31
 8000812:	71fb      	strb	r3, [r7, #7]
  		if(intSocketRegister & (1<<2)){ // Check for socket 1 RECV interrupt
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	2b00      	cmp	r3, #0
 800081c:	d030      	beq.n	8000880 <echo_server+0x13c>
  			dataSize = recv(mySocket, rxBuff, 50);
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <echo_server+0x14c>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2232      	movs	r2, #50	; 0x32
 8000824:	491f      	ldr	r1, [pc, #124]	; (80008a4 <echo_server+0x160>)
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fbce 	bl	8000fc8 <recv>
 800082c:	4603      	mov	r3, r0
 800082e:	4a1e      	ldr	r2, [pc, #120]	; (80008a8 <echo_server+0x164>)
 8000830:	6013      	str	r3, [r2, #0]
  			recive_from_mysocket(rxBuff);
 8000832:	481c      	ldr	r0, [pc, #112]	; (80008a4 <echo_server+0x160>)
 8000834:	f000 f83c 	bl	80008b0 <recive_from_mysocket>

  			if(send(mySocket,  (uint8_t *)"Dzieki za dane" , 14) != 14){
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <echo_server+0x14c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	220e      	movs	r2, #14
 800083e:	491b      	ldr	r1, [pc, #108]	; (80008ac <echo_server+0x168>)
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fac7 	bl	8000dd4 <send>
 8000846:	4603      	mov	r3, r0
 8000848:	2b0e      	cmp	r3, #14
 800084a:	d11b      	bne.n	8000884 <echo_server+0x140>
  			  break;
  			}

  			// Clear interrupt register
  			intSocketRegister &= (1<<2);
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	71fb      	strb	r3, [r7, #7]
  			setSn_IR(mySocket, intSocketRegister);
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <echo_server+0x14c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	3301      	adds	r3, #1
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000862:	461a      	mov	r2, r3
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f003 031f 	and.w	r3, r3, #31
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4619      	mov	r1, r3
 800086e:	4610      	mov	r0, r2
 8000870:	f000 fd9e 	bl	80013b0 <WIZCHIP_WRITE>
  		}
  		break;
 8000874:	e004      	b.n	8000880 <echo_server+0x13c>


  	case 2:
  		socket_init ();
 8000876:	f7ff ff49 	bl	800070c <socket_init>
  		break;
 800087a:	e004      	b.n	8000886 <echo_server+0x142>
  		break;
 800087c:	bf00      	nop
 800087e:	e002      	b.n	8000886 <echo_server+0x142>
  		break;
 8000880:	bf00      	nop
 8000882:	e000      	b.n	8000886 <echo_server+0x142>
  			  break;
 8000884:	bf00      	nop
  	}
}
 8000886:	bf00      	nop
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	200000c8 	.word	0x200000c8
 8000894:	200000c9 	.word	0x200000c9
 8000898:	200000ca 	.word	0x200000ca
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000134 	.word	0x20000134
 80008a4:	200000cc 	.word	0x200000cc
 80008a8:	20000130 	.word	0x20000130
 80008ac:	080067dc 	.word	0x080067dc

080008b0 <recive_from_mysocket>:

recive_from_mysocket(uint8_t  rxBuff[]) {
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	char diodeon[] = "Wlacz diode byku";
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <recive_from_mysocket+0x70>)
 80008ba:	f107 041c 	add.w	r4, r7, #28
 80008be:	461d      	mov	r5, r3
 80008c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c4:	682b      	ldr	r3, [r5, #0]
 80008c6:	7023      	strb	r3, [r4, #0]
	char diodeoff[] = "Wylacz diode byku";
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <recive_from_mysocket+0x74>)
 80008ca:	f107 0408 	add.w	r4, r7, #8
 80008ce:	461d      	mov	r5, r3
 80008d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d4:	682b      	ldr	r3, [r5, #0]
 80008d6:	8023      	strh	r3, [r4, #0]

	  if (strcmp((char*)rxBuff, diodeon) == 0) {
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff fc86 	bl	80001f0 <strcmp>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d105      	bne.n	80008f6 <recive_from_mysocket+0x46>
	        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <recive_from_mysocket+0x78>)
 80008f2:	f001 fe1b 	bl	800252c <HAL_GPIO_WritePin>
	    }

	    if (strcmp((char*)rxBuff, diodeoff) == 0) {
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	4619      	mov	r1, r3
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff fc77 	bl	80001f0 <strcmp>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d105      	bne.n	8000914 <recive_from_mysocket+0x64>
	        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <recive_from_mysocket+0x78>)
 8000910:	f001 fe0c 	bl	800252c <HAL_GPIO_WritePin>
	    }
	}
 8000914:	bf00      	nop
 8000916:	4618      	mov	r0, r3
 8000918:	3730      	adds	r7, #48	; 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bdb0      	pop	{r4, r5, r7, pc}
 800091e:	bf00      	nop
 8000920:	080067ec 	.word	0x080067ec
 8000924:	08006800 	.word	0x08006800
 8000928:	40021800 	.word	0x40021800

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f001 faaa 	bl	8001e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f80c 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f7ff fe00 	bl	800053c <MX_GPIO_Init>
  MX_SPI1_Init();
 800093c:	f000 fbfa 	bl	8001134 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000940:	f003 f920 	bl	8003b84 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000944:	f7ff fddc 	bl	8000500 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000948:	f003 f940 	bl	8003bcc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800094c:	e7fe      	b.n	800094c <main+0x20>
	...

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	; 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2230      	movs	r2, #48	; 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f005 fe3c 	bl	80065dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <SystemClock_Config+0xb8>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <SystemClock_Config+0xb8>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <SystemClock_Config+0xb8>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <SystemClock_Config+0xbc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <SystemClock_Config+0xbc>)
 800099e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <SystemClock_Config+0xbc>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b4:	2301      	movs	r3, #1
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b8:	2310      	movs	r3, #16
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009bc:	2300      	movs	r3, #0
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 0320 	add.w	r3, r7, #32
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fdcb 	bl	8002560 <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009d0:	f000 f81e 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d4:	230f      	movs	r3, #15
 80009d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 f82e 	bl	8002a50 <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009fa:	f000 f809 	bl	8000a10 <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3750      	adds	r7, #80	; 0x50
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40007000 	.word	0x40007000

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4604      	mov	r4, r0
 8000a24:	4608      	mov	r0, r1
 8000a26:	4611      	mov	r1, r2
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4623      	mov	r3, r4
 8000a2c:	71fb      	strb	r3, [r7, #7]
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71bb      	strb	r3, [r7, #6]
 8000a32:	460b      	mov	r3, r1
 8000a34:	80bb      	strh	r3, [r7, #4]
 8000a36:	4613      	mov	r3, r2
 8000a38:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b08      	cmp	r3, #8
 8000a3e:	d902      	bls.n	8000a46 <socket+0x2a>
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	e0f0      	b.n	8000c28 <socket+0x20c>
	switch(protocol)
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d005      	beq.n	8000a58 <socket+0x3c>
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	dd11      	ble.n	8000a74 <socket+0x58>
 8000a50:	3b02      	subs	r3, #2
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d80e      	bhi.n	8000a74 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000a56:	e011      	b.n	8000a7c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000a64:	f000 fcf2 	bl	800144c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d105      	bne.n	8000a7a <socket+0x5e>
 8000a6e:	f06f 0302 	mvn.w	r3, #2
 8000a72:	e0d9      	b.n	8000c28 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000a74:	f06f 0304 	mvn.w	r3, #4
 8000a78:	e0d6      	b.n	8000c28 <socket+0x20c>
	    break;
 8000a7a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <socket+0x70>
 8000a86:	f06f 0305 	mvn.w	r3, #5
 8000a8a:	e0cd      	b.n	8000c28 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d028      	beq.n	8000ae4 <socket+0xc8>
	{
   	switch(protocol)
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d002      	beq.n	8000a9e <socket+0x82>
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d008      	beq.n	8000aae <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000a9c:	e022      	b.n	8000ae4 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d11a      	bne.n	8000ade <socket+0xc2>
 8000aa8:	f06f 0305 	mvn.w	r3, #5
 8000aac:	e0bc      	b.n	8000c28 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	f003 0320 	and.w	r3, r3, #32
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db02      	blt.n	8000ac6 <socket+0xaa>
 8000ac0:	f06f 0305 	mvn.w	r3, #5
 8000ac4:	e0b0      	b.n	8000c28 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8000ac6:	78fb      	ldrb	r3, [r7, #3]
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d008      	beq.n	8000ae2 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db04      	blt.n	8000ae2 <socket+0xc6>
 8000ad8:	f06f 0305 	mvn.w	r3, #5
 8000adc:	e0a4      	b.n	8000c28 <socket+0x20c>
   	      break;
 8000ade:	bf00      	nop
 8000ae0:	e000      	b.n	8000ae4 <socket+0xc8>
   	      break;
 8000ae2:	bf00      	nop
   	}
   }
	close(sn);
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f8ac 	bl	8000c44 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	3301      	adds	r3, #1
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000afa:	f023 030f 	bic.w	r3, r3, #15
 8000afe:	b25a      	sxtb	r2, r3
 8000b00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f000 fc50 	bl	80013b0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000b10:	88bb      	ldrh	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d110      	bne.n	8000b38 <socket+0x11c>
	{
	   port = sock_any_port++;
 8000b16:	4b46      	ldr	r3, [pc, #280]	; (8000c30 <socket+0x214>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	b291      	uxth	r1, r2
 8000b1e:	4a44      	ldr	r2, [pc, #272]	; (8000c30 <socket+0x214>)
 8000b20:	8011      	strh	r1, [r2, #0]
 8000b22:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000b24:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <socket+0x214>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d103      	bne.n	8000b38 <socket+0x11c>
 8000b30:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <socket+0x214>)
 8000b32:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000b36:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b44:	461a      	mov	r2, r3
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4610      	mov	r0, r2
 8000b52:	f000 fc2d 	bl	80013b0 <WIZCHIP_WRITE>
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000b62:	461a      	mov	r2, r3
 8000b64:	88bb      	ldrh	r3, [r7, #4]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	f000 fc20 	bl	80013b0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	3301      	adds	r3, #1
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fc16 	bl	80013b0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000b84:	bf00      	nop
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fbc0 	bl	8001318 <WIZCHIP_READ>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f3      	bne.n	8000b86 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <socket+0x218>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <socket+0x218>)
 8000bba:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000bbc:	78fb      	ldrb	r3, [r7, #3]
 8000bbe:	f003 0201 	and.w	r2, r3, #1
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	b21a      	sxth	r2, r3
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <socket+0x218>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <socket+0x218>)
 8000bd8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <socket+0x21c>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	4013      	ands	r3, r2
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <socket+0x21c>)
 8000bf6:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <socket+0x220>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <socket+0x224>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000c0a:	bf00      	nop
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	3301      	adds	r3, #1
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fb7d 	bl	8001318 <WIZCHIP_READ>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0f3      	beq.n	8000c0c <socket+0x1f0>
   return (int8_t)sn;
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	20000018 	.word	0x20000018
 8000c34:	20000136 	.word	0x20000136
 8000c38:	20000138 	.word	0x20000138
 8000c3c:	2000013c 	.word	0x2000013c
 8000c40:	2000014c 	.word	0x2000014c

08000c44 <close>:

int8_t close(uint8_t sn)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b08      	cmp	r3, #8
 8000c52:	d902      	bls.n	8000c5a <close+0x16>
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	e055      	b.n	8000d06 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	3301      	adds	r3, #1
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c66:	2110      	movs	r1, #16
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 fba1 	bl	80013b0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000c6e:	bf00      	nop
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	3301      	adds	r3, #1
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fb4b 	bl	8001318 <WIZCHIP_READ>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f3      	bne.n	8000c70 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c94:	211f      	movs	r1, #31
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fb8a 	bl	80013b0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <close+0xcc>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <close+0xcc>)
 8000cb8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <close+0xd0>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4013      	ands	r3, r2
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <close+0xd0>)
 8000cd6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <close+0xd4>)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <close+0xd8>)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000cea:	bf00      	nop
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 fb0d 	bl	8001318 <WIZCHIP_READ>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f3      	bne.n	8000cec <close+0xa8>
	return SOCK_OK;
 8000d04:	2301      	movs	r3, #1
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000136 	.word	0x20000136
 8000d14:	20000138 	.word	0x20000138
 8000d18:	2000013c 	.word	0x2000013c
 8000d1c:	2000014c 	.word	0x2000014c

08000d20 <listen>:

int8_t listen(uint8_t sn)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b08      	cmp	r3, #8
 8000d2e:	d902      	bls.n	8000d36 <listen+0x16>
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	e049      	b.n	8000dca <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 faea 	bl	8001318 <WIZCHIP_READ>
 8000d44:	4603      	mov	r3, r0
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d002      	beq.n	8000d54 <listen+0x34>
 8000d4e:	f06f 0304 	mvn.w	r3, #4
 8000d52:	e03a      	b.n	8000dca <listen+0xaa>
	CHECK_SOCKINIT();
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	3301      	adds	r3, #1
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fad9 	bl	8001318 <WIZCHIP_READ>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b13      	cmp	r3, #19
 8000d6a:	d002      	beq.n	8000d72 <listen+0x52>
 8000d6c:	f06f 0302 	mvn.w	r3, #2
 8000d70:	e02b      	b.n	8000dca <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	3301      	adds	r3, #1
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d7e:	2102      	movs	r1, #2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 fb15 	bl	80013b0 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000d86:	bf00      	nop
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fabf 	bl	8001318 <WIZCHIP_READ>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1f3      	bne.n	8000d88 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000da0:	e006      	b.n	8000db0 <listen+0x90>
   {
         close(sn);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff4d 	bl	8000c44 <close>
         return SOCKERR_SOCKCLOSED;
 8000daa:	f06f 0303 	mvn.w	r3, #3
 8000dae:	e00c      	b.n	8000dca <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	3301      	adds	r3, #1
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 faab 	bl	8001318 <WIZCHIP_READ>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b14      	cmp	r3, #20
 8000dc6:	d1ec      	bne.n	8000da2 <listen+0x82>
   }
   return SOCK_OK;
 8000dc8:	2301      	movs	r3, #1
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	4613      	mov	r3, r2
 8000de2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d902      	bls.n	8000df8 <send+0x24>
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e0de      	b.n	8000fb6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 fa89 	bl	8001318 <WIZCHIP_READ>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d002      	beq.n	8000e16 <send+0x42>
 8000e10:	f06f 0304 	mvn.w	r3, #4
 8000e14:	e0cf      	b.n	8000fb6 <send+0x1e2>
   CHECK_SOCKDATA();
 8000e16:	88bb      	ldrh	r3, [r7, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <send+0x4e>
 8000e1c:	f06f 030d 	mvn.w	r3, #13
 8000e20:	e0c9      	b.n	8000fb6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	3301      	adds	r3, #1
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fa72 	bl	8001318 <WIZCHIP_READ>
 8000e34:	4603      	mov	r3, r0
 8000e36:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	2b17      	cmp	r3, #23
 8000e3c:	d005      	beq.n	8000e4a <send+0x76>
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	2b1c      	cmp	r3, #28
 8000e42:	d002      	beq.n	8000e4a <send+0x76>
 8000e44:	f06f 0306 	mvn.w	r3, #6
 8000e48:	e0b5      	b.n	8000fb6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8000e4a:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <send+0x1ec>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	fa42 f303 	asr.w	r3, r2, r3
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d039      	beq.n	8000ed2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	3301      	adds	r3, #1
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fa54 	bl	8001318 <WIZCHIP_READ>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d019      	beq.n	8000eb6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	3301      	adds	r3, #1
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e8e:	2110      	movs	r1, #16
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fa8d 	bl	80013b0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <send+0x1ec>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4013      	ands	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <send+0x1ec>)
 8000eb2:	801a      	strh	r2, [r3, #0]
 8000eb4:	e00d      	b.n	8000ed2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <send+0xfa>
      {
         close(sn);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff febe 	bl	8000c44 <close>
         return SOCKERR_TIMEOUT;
 8000ec8:	f06f 030c 	mvn.w	r3, #12
 8000ecc:	e073      	b.n	8000fb6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e071      	b.n	8000fb6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fa1a 	bl	8001318 <WIZCHIP_READ>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	029b      	lsls	r3, r3, #10
 8000eea:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	89bb      	ldrh	r3, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d901      	bls.n	8000ef8 <send+0x124>
 8000ef4:	89bb      	ldrh	r3, [r7, #12]
 8000ef6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fb66 	bl	80015cc <getSn_TX_FSR>
 8000f00:	4603      	mov	r3, r0
 8000f02:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	3301      	adds	r3, #1
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fa01 	bl	8001318 <WIZCHIP_READ>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	2b17      	cmp	r3, #23
 8000f1e:	d009      	beq.n	8000f34 <send+0x160>
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	2b1c      	cmp	r3, #28
 8000f24:	d006      	beq.n	8000f34 <send+0x160>
      {
         close(sn);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fe8b 	bl	8000c44 <close>
         return SOCKERR_SOCKSTATUS;
 8000f2e:	f06f 0306 	mvn.w	r3, #6
 8000f32:	e040      	b.n	8000fb6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <send+0x1f0>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	fa42 f303 	asr.w	r3, r2, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <send+0x180>
 8000f48:	88ba      	ldrh	r2, [r7, #4]
 8000f4a:	89bb      	ldrh	r3, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d901      	bls.n	8000f54 <send+0x180>
 8000f50:	2300      	movs	r3, #0
 8000f52:	e030      	b.n	8000fb6 <send+0x1e2>
      if(len <= freesize) break;
 8000f54:	88ba      	ldrh	r2, [r7, #4]
 8000f56:	89bb      	ldrh	r3, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d900      	bls.n	8000f5e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8000f5c:	e7cc      	b.n	8000ef8 <send+0x124>
      if(len <= freesize) break;
 8000f5e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000f60:	88ba      	ldrh	r2, [r7, #4]
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fbc6 	bl	80016f8 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	3301      	adds	r3, #1
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f78:	2120      	movs	r1, #32
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fa18 	bl	80013b0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000f80:	bf00      	nop
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	3301      	adds	r3, #1
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f9c2 	bl	8001318 <WIZCHIP_READ>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f3      	bne.n	8000f82 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <send+0x1ec>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <send+0x1ec>)
 8000fb2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000fb4:	88bb      	ldrh	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000138 	.word	0x20000138
 8000fc4:	20000136 	.word	0x20000136

08000fc8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d902      	bls.n	8000fec <recv+0x24>
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	e09c      	b.n	8001126 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f98f 	bl	8001318 <WIZCHIP_READ>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f003 030f 	and.w	r3, r3, #15
 8001000:	2b01      	cmp	r3, #1
 8001002:	d002      	beq.n	800100a <recv+0x42>
 8001004:	f06f 0304 	mvn.w	r3, #4
 8001008:	e08d      	b.n	8001126 <recv+0x15e>
   CHECK_SOCKDATA();
 800100a:	88bb      	ldrh	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <recv+0x4e>
 8001010:	f06f 030d 	mvn.w	r3, #13
 8001014:	e087      	b.n	8001126 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	3301      	adds	r3, #1
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f978 	bl	8001318 <WIZCHIP_READ>
 8001028:	4603      	mov	r3, r0
 800102a:	b29b      	uxth	r3, r3
 800102c:	029b      	lsls	r3, r3, #10
 800102e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001030:	89ba      	ldrh	r2, [r7, #12]
 8001032:	88bb      	ldrh	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	d201      	bcs.n	800103c <recv+0x74>
 8001038:	89bb      	ldrh	r3, [r7, #12]
 800103a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fb0f 	bl	8001662 <getSn_RX_RSR>
 8001044:	4603      	mov	r3, r0
 8001046:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	3301      	adds	r3, #1
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f95f 	bl	8001318 <WIZCHIP_READ>
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b17      	cmp	r3, #23
 8001062:	d026      	beq.n	80010b2 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	2b1c      	cmp	r3, #28
 8001068:	d11c      	bne.n	80010a4 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800106a:	89bb      	ldrh	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d133      	bne.n	80010d8 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 faaa 	bl	80015cc <getSn_TX_FSR>
 8001078:	4603      	mov	r3, r0
 800107a:	461c      	mov	r4, r3
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	3301      	adds	r3, #1
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f945 	bl	8001318 <WIZCHIP_READ>
 800108e:	4603      	mov	r3, r0
 8001090:	029b      	lsls	r3, r3, #10
 8001092:	429c      	cmp	r4, r3
 8001094:	d10d      	bne.n	80010b2 <recv+0xea>
               {
                  close(sn);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fdd3 	bl	8000c44 <close>
                  return SOCKERR_SOCKSTATUS;
 800109e:	f06f 0306 	mvn.w	r3, #6
 80010a2:	e040      	b.n	8001126 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fdcc 	bl	8000c44 <close>
               return SOCKERR_SOCKSTATUS;
 80010ac:	f06f 0306 	mvn.w	r3, #6
 80010b0:	e039      	b.n	8001126 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <recv+0x168>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	fa42 f303 	asr.w	r3, r2, r3
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <recv+0x108>
 80010c6:	89bb      	ldrh	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <recv+0x108>
 80010cc:	2300      	movs	r3, #0
 80010ce:	e02a      	b.n	8001126 <recv+0x15e>
         if(recvsize != 0) break;
 80010d0:	89bb      	ldrh	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80010d6:	e7b1      	b.n	800103c <recv+0x74>
               if(recvsize != 0) break;
 80010d8:	bf00      	nop
 80010da:	e000      	b.n	80010de <recv+0x116>
         if(recvsize != 0) break;
 80010dc:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80010de:	89ba      	ldrh	r2, [r7, #12]
 80010e0:	88bb      	ldrh	r3, [r7, #4]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d201      	bcs.n	80010ea <recv+0x122>
 80010e6:	89bb      	ldrh	r3, [r7, #12]
 80010e8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80010ea:	88ba      	ldrh	r2, [r7, #4]
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	6839      	ldr	r1, [r7, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fb5d 	bl	80017b0 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	3301      	adds	r3, #1
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001102:	2140      	movs	r1, #64	; 0x40
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f953 	bl	80013b0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800110a:	bf00      	nop
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	3301      	adds	r3, #1
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f8fd 	bl	8001318 <WIZCHIP_READ>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f3      	bne.n	800110c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001124:	88bb      	ldrh	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bd90      	pop	{r4, r7, pc}
 800112e:	bf00      	nop
 8001130:	20000136 	.word	0x20000136

08001134 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_SPI1_Init+0x64>)
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <MX_SPI1_Init+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_SPI1_Init+0x64>)
 8001140:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001144:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_SPI1_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_SPI1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_SPI1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_SPI1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_SPI1_Init+0x64>)
 8001160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001164:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_SPI1_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_SPI1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_SPI1_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_SPI1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_SPI1_Init+0x64>)
 8001180:	220a      	movs	r2, #10
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_SPI1_Init+0x64>)
 8001186:	f001 fe0f 	bl	8002da8 <HAL_SPI_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001190:	f7ff fc3e 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000154 	.word	0x20000154
 800119c:	40013000 	.word	0x40013000

080011a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <HAL_SPI_MspInit+0x94>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d133      	bne.n	800122a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_SPI_MspInit+0x98>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <HAL_SPI_MspInit+0x98>)
 80011cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_SPI_MspInit+0x98>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_SPI_MspInit+0x98>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_SPI_MspInit+0x98>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_SPI_MspInit+0x98>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Eth_SCK_Pin|Eth_MISO_Pin|Eth_MOSI_Pin;
 80011fa:	23e0      	movs	r3, #224	; 0xe0
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800120a:	2305      	movs	r3, #5
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4809      	ldr	r0, [pc, #36]	; (800123c <HAL_SPI_MspInit+0x9c>)
 8001216:	f000 ffdd 	bl	80021d4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2105      	movs	r1, #5
 800121e:	2023      	movs	r0, #35	; 0x23
 8001220:	f000 ff7f 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001224:	2023      	movs	r0, #35	; 0x23
 8001226:	f000 ff98 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	; 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40013000 	.word	0x40013000
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_MspInit+0x54>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <HAL_MspInit+0x54>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_MspInit+0x54>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_MspInit+0x54>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_MspInit+0x54>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_MspInit+0x54>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	210f      	movs	r1, #15
 8001282:	f06f 0001 	mvn.w	r0, #1
 8001286:	f000 ff4c 	bl	8002122 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800129c:	e7fe      	b.n	800129c <NMI_Handler+0x4>

0800129e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <MemManage_Handler+0x4>

080012aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 fe30 	bl	8001f2c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012cc:	f004 f91e 	bl	800550c <xTaskGetSchedulerState>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d001      	beq.n	80012da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012d6:	f004 ff07 	bl	80060e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <SPI1_IRQHandler+0x10>)
 80012e6:	f002 f9d7 	bl	8003698 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000154 	.word	0x20000154

080012f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <SystemInit+0x20>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <SystemInit+0x20>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <WIZCHIP_READ+0x94>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <WIZCHIP_READ+0x94>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800132c:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <WIZCHIP_READ+0x94>)
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <WIZCHIP_READ+0x24>
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <WIZCHIP_READ+0x94>)
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	2b00      	cmp	r3, #0
 800133a:	d114      	bne.n	8001366 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <WIZCHIP_READ+0x94>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	0c12      	lsrs	r2, r2, #16
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	4610      	mov	r0, r2
 8001348:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <WIZCHIP_READ+0x94>)
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	0a12      	lsrs	r2, r2, #8
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	4610      	mov	r0, r2
 8001356:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <WIZCHIP_READ+0x94>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	4610      	mov	r0, r2
 8001362:	4798      	blx	r3
 8001364:	e011      	b.n	800138a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0c1b      	lsrs	r3, r3, #16
 800136a:	b2db      	uxtb	r3, r3
 800136c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b2db      	uxtb	r3, r3
 8001374:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <WIZCHIP_READ+0x94>)
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f107 020c 	add.w	r2, r7, #12
 8001384:	2103      	movs	r1, #3
 8001386:	4610      	mov	r0, r2
 8001388:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <WIZCHIP_READ+0x94>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4798      	blx	r3
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <WIZCHIP_READ+0x94>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <WIZCHIP_READ+0x94>)
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	4798      	blx	r3
   return ret;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000020 	.word	0x20000020

080013b0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <WIZCHIP_WRITE+0x98>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <WIZCHIP_WRITE+0x98>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <WIZCHIP_WRITE+0x98>)
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d119      	bne.n	800140c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <WIZCHIP_WRITE+0x98>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	0c12      	lsrs	r2, r2, #16
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	4610      	mov	r0, r2
 80013e4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <WIZCHIP_WRITE+0x98>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	0a12      	lsrs	r2, r2, #8
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	4610      	mov	r0, r2
 80013f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <WIZCHIP_WRITE+0x98>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	4610      	mov	r0, r2
 80013fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <WIZCHIP_WRITE+0x98>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	78fa      	ldrb	r2, [r7, #3]
 8001406:	4610      	mov	r0, r2
 8001408:	4798      	blx	r3
 800140a:	e013      	b.n	8001434 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	0c1b      	lsrs	r3, r3, #16
 8001410:	b2db      	uxtb	r3, r3
 8001412:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	b2db      	uxtb	r3, r3
 800141a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <WIZCHIP_WRITE+0x98>)
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	f107 020c 	add.w	r2, r7, #12
 800142e:	2104      	movs	r1, #4
 8001430:	4610      	mov	r0, r2
 8001432:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <WIZCHIP_WRITE+0x98>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800143a:	4b03      	ldr	r3, [pc, #12]	; (8001448 <WIZCHIP_WRITE+0x98>)
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	4798      	blx	r3
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000020 	.word	0x20000020

0800144c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	4613      	mov	r3, r2
 8001458:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <WIZCHIP_READ_BUF+0xbc>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <WIZCHIP_READ_BUF+0xbc>)
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <WIZCHIP_READ_BUF+0xbc>)
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <WIZCHIP_READ_BUF+0x2a>
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <WIZCHIP_READ_BUF+0xbc>)
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	2b00      	cmp	r3, #0
 8001474:	d126      	bne.n	80014c4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <WIZCHIP_READ_BUF+0xbc>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	0c12      	lsrs	r2, r2, #16
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	4610      	mov	r0, r2
 8001482:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <WIZCHIP_READ_BUF+0xbc>)
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	0a12      	lsrs	r2, r2, #8
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	4610      	mov	r0, r2
 8001490:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <WIZCHIP_READ_BUF+0xbc>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	4610      	mov	r0, r2
 800149c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	82fb      	strh	r3, [r7, #22]
 80014a2:	e00a      	b.n	80014ba <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <WIZCHIP_READ_BUF+0xbc>)
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	8afa      	ldrh	r2, [r7, #22]
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	188c      	adds	r4, r1, r2
 80014ae:	4798      	blx	r3
 80014b0:	4603      	mov	r3, r0
 80014b2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80014b4:	8afb      	ldrh	r3, [r7, #22]
 80014b6:	3301      	adds	r3, #1
 80014b8:	82fb      	strh	r3, [r7, #22]
 80014ba:	8afa      	ldrh	r2, [r7, #22]
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3f0      	bcc.n	80014a4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80014c2:	e017      	b.n	80014f4 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	0c1b      	lsrs	r3, r3, #16
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <WIZCHIP_READ_BUF+0xbc>)
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	f107 0210 	add.w	r2, r7, #16
 80014e2:	2103      	movs	r1, #3
 80014e4:	4610      	mov	r0, r2
 80014e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <WIZCHIP_READ_BUF+0xbc>)
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	88fa      	ldrh	r2, [r7, #6]
 80014ee:	4611      	mov	r1, r2
 80014f0:	68b8      	ldr	r0, [r7, #8]
 80014f2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <WIZCHIP_READ_BUF+0xbc>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80014fa:	4b03      	ldr	r3, [pc, #12]	; (8001508 <WIZCHIP_READ_BUF+0xbc>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	4798      	blx	r3
}
 8001500:	bf00      	nop
 8001502:	371c      	adds	r7, #28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd90      	pop	{r4, r7, pc}
 8001508:	20000020 	.word	0x20000020

0800150c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	4613      	mov	r3, r2
 8001518:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <WIZCHIP_WRITE_BUF+0xbc>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	2b00      	cmp	r3, #0
 8001534:	d126      	bne.n	8001584 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	0c12      	lsrs	r2, r2, #16
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	4610      	mov	r0, r2
 8001542:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	0a12      	lsrs	r2, r2, #8
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	4610      	mov	r0, r2
 8001550:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	4610      	mov	r0, r2
 800155c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800155e:	2300      	movs	r3, #0
 8001560:	82fb      	strh	r3, [r7, #22]
 8001562:	e00a      	b.n	800157a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	8afa      	ldrh	r2, [r7, #22]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	440a      	add	r2, r1
 800156e:	7812      	ldrb	r2, [r2, #0]
 8001570:	4610      	mov	r0, r2
 8001572:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001574:	8afb      	ldrh	r3, [r7, #22]
 8001576:	3301      	adds	r3, #1
 8001578:	82fb      	strh	r3, [r7, #22]
 800157a:	8afa      	ldrh	r2, [r7, #22]
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3f0      	bcc.n	8001564 <WIZCHIP_WRITE_BUF+0x58>
 8001582:	e017      	b.n	80015b4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	0c1b      	lsrs	r3, r3, #16
 8001588:	b2db      	uxtb	r3, r3
 800158a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	0a1b      	lsrs	r3, r3, #8
 8001590:	b2db      	uxtb	r3, r3
 8001592:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <WIZCHIP_WRITE_BUF+0xbc>)
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	f107 0210 	add.w	r2, r7, #16
 80015a2:	2103      	movs	r1, #3
 80015a4:	4610      	mov	r0, r2
 80015a6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <WIZCHIP_WRITE_BUF+0xbc>)
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	88fa      	ldrh	r2, [r7, #6]
 80015ae:	4611      	mov	r1, r2
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <WIZCHIP_WRITE_BUF+0xbc>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80015ba:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <WIZCHIP_WRITE_BUF+0xbc>)
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	4798      	blx	r3
}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000020 	.word	0x20000020

080015cc <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	81fb      	strh	r3, [r7, #14]
 80015da:	2300      	movs	r3, #0
 80015dc:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	3301      	adds	r3, #1
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fe94 	bl	8001318 <WIZCHIP_READ>
 80015f0:	4603      	mov	r3, r0
 80015f2:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80015f4:	89bb      	ldrh	r3, [r7, #12]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b29c      	uxth	r4, r3
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	3301      	adds	r3, #1
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fe86 	bl	8001318 <WIZCHIP_READ>
 800160c:	4603      	mov	r3, r0
 800160e:	b29b      	uxth	r3, r3
 8001610:	4423      	add	r3, r4
 8001612:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001614:	89bb      	ldrh	r3, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d01a      	beq.n	8001650 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	3301      	adds	r3, #1
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fe76 	bl	8001318 <WIZCHIP_READ>
 800162c:	4603      	mov	r3, r0
 800162e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001630:	89fb      	ldrh	r3, [r7, #14]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b29c      	uxth	r4, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	3301      	adds	r3, #1
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fe68 	bl	8001318 <WIZCHIP_READ>
 8001648:	4603      	mov	r3, r0
 800164a:	b29b      	uxth	r3, r3
 800164c:	4423      	add	r3, r4
 800164e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001650:	89fa      	ldrh	r2, [r7, #14]
 8001652:	89bb      	ldrh	r3, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d1c2      	bne.n	80015de <getSn_TX_FSR+0x12>
   return val;
 8001658:	89fb      	ldrh	r3, [r7, #14]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bd90      	pop	{r4, r7, pc}

08001662 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001662:	b590      	push	{r4, r7, lr}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800166c:	2300      	movs	r3, #0
 800166e:	81fb      	strh	r3, [r7, #14]
 8001670:	2300      	movs	r3, #0
 8001672:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	3301      	adds	r3, #1
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fe49 	bl	8001318 <WIZCHIP_READ>
 8001686:	4603      	mov	r3, r0
 8001688:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800168a:	89bb      	ldrh	r3, [r7, #12]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b29c      	uxth	r4, r3
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	3301      	adds	r3, #1
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fe3b 	bl	8001318 <WIZCHIP_READ>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	4423      	add	r3, r4
 80016a8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80016aa:	89bb      	ldrh	r3, [r7, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01a      	beq.n	80016e6 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	3301      	adds	r3, #1
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fe2b 	bl	8001318 <WIZCHIP_READ>
 80016c2:	4603      	mov	r3, r0
 80016c4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b29c      	uxth	r4, r3
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	3301      	adds	r3, #1
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe1d 	bl	8001318 <WIZCHIP_READ>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	4423      	add	r3, r4
 80016e4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80016e6:	89fa      	ldrh	r2, [r7, #14]
 80016e8:	89bb      	ldrh	r3, [r7, #12]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d1c2      	bne.n	8001674 <getSn_RX_RSR+0x12>
   return val;
 80016ee:	89fb      	ldrh	r3, [r7, #14]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}

080016f8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	4613      	mov	r3, r2
 8001706:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001710:	88bb      	ldrh	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d048      	beq.n	80017a8 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	3301      	adds	r3, #1
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fdf8 	bl	8001318 <WIZCHIP_READ>
 8001728:	4603      	mov	r3, r0
 800172a:	b29b      	uxth	r3, r3
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b29c      	uxth	r4, r3
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	3301      	adds	r3, #1
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fdeb 	bl	8001318 <WIZCHIP_READ>
 8001742:	4603      	mov	r3, r0
 8001744:	b29b      	uxth	r3, r3
 8001746:	4423      	add	r3, r4
 8001748:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	79fa      	ldrb	r2, [r7, #7]
 8001750:	0092      	lsls	r2, r2, #2
 8001752:	3202      	adds	r2, #2
 8001754:	00d2      	lsls	r2, r2, #3
 8001756:	4413      	add	r3, r2
 8001758:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	461a      	mov	r2, r3
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	68b8      	ldr	r0, [r7, #8]
 8001762:	f7ff fed3 	bl	800150c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001766:	89fa      	ldrh	r2, [r7, #14]
 8001768:	88bb      	ldrh	r3, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	3301      	adds	r3, #1
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800177a:	461a      	mov	r2, r3
 800177c:	89fb      	ldrh	r3, [r7, #14]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	b29b      	uxth	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4619      	mov	r1, r3
 8001786:	4610      	mov	r0, r2
 8001788:	f7ff fe12 	bl	80013b0 <WIZCHIP_WRITE>
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	3301      	adds	r3, #1
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001798:	461a      	mov	r2, r3
 800179a:	89fb      	ldrh	r3, [r7, #14]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	4619      	mov	r1, r3
 80017a0:	4610      	mov	r0, r2
 80017a2:	f7ff fe05 	bl	80013b0 <WIZCHIP_WRITE>
 80017a6:	e000      	b.n	80017aa <wiz_send_data+0xb2>
   if(len == 0)  return;
 80017a8:	bf00      	nop
}
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd90      	pop	{r4, r7, pc}

080017b0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	4613      	mov	r3, r2
 80017be:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80017c8:	88bb      	ldrh	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d048      	beq.n	8001860 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	3301      	adds	r3, #1
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fd9c 	bl	8001318 <WIZCHIP_READ>
 80017e0:	4603      	mov	r3, r0
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b29c      	uxth	r4, r3
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	3301      	adds	r3, #1
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fd8f 	bl	8001318 <WIZCHIP_READ>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4423      	add	r3, r4
 8001800:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	79fa      	ldrb	r2, [r7, #7]
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	3203      	adds	r2, #3
 800180c:	00d2      	lsls	r2, r2, #3
 800180e:	4413      	add	r3, r2
 8001810:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001812:	88bb      	ldrh	r3, [r7, #4]
 8001814:	461a      	mov	r2, r3
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	68b8      	ldr	r0, [r7, #8]
 800181a:	f7ff fe17 	bl	800144c <WIZCHIP_READ_BUF>
   ptr += len;
 800181e:	89fa      	ldrh	r2, [r7, #14]
 8001820:	88bb      	ldrh	r3, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	3301      	adds	r3, #1
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001832:	461a      	mov	r2, r3
 8001834:	89fb      	ldrh	r3, [r7, #14]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	b29b      	uxth	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4619      	mov	r1, r3
 800183e:	4610      	mov	r0, r2
 8001840:	f7ff fdb6 	bl	80013b0 <WIZCHIP_WRITE>
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	3301      	adds	r3, #1
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001850:	461a      	mov	r2, r3
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	4619      	mov	r1, r3
 8001858:	4610      	mov	r0, r2
 800185a:	f7ff fda9 	bl	80013b0 <WIZCHIP_WRITE>
 800185e:	e000      	b.n	8001862 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8001860:	bf00      	nop
}
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bd90      	pop	{r4, r7, pc}

08001868 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	70fb      	strb	r3, [r7, #3]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
 80018dc:	2300      	movs	r3, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	807b      	strh	r3, [r7, #2]
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	807b      	strh	r3, [r7, #2]
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <reg_wizchip_cs_cbfunc+0x16>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <reg_wizchip_cs_cbfunc+0x40>)
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <reg_wizchip_cs_cbfunc+0x44>)
 800194a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <reg_wizchip_cs_cbfunc+0x40>)
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <reg_wizchip_cs_cbfunc+0x48>)
 8001950:	619a      	str	r2, [r3, #24]
 8001952:	e006      	b.n	8001962 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <reg_wizchip_cs_cbfunc+0x40>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <reg_wizchip_cs_cbfunc+0x40>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	6193      	str	r3, [r2, #24]
   }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000020 	.word	0x20000020
 8001974:	08001885 	.word	0x08001885
 8001978:	08001893 	.word	0x08001893

0800197c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001986:	bf00      	nop
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <reg_wizchip_spi_cbfunc+0x4c>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f9      	beq.n	8001988 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <reg_wizchip_spi_cbfunc+0x24>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d106      	bne.n	80019ae <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <reg_wizchip_spi_cbfunc+0x4c>)
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <reg_wizchip_spi_cbfunc+0x50>)
 80019a4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <reg_wizchip_spi_cbfunc+0x4c>)
 80019a8:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <reg_wizchip_spi_cbfunc+0x54>)
 80019aa:	621a      	str	r2, [r3, #32]
 80019ac:	e006      	b.n	80019bc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80019ae:	4a06      	ldr	r2, [pc, #24]	; (80019c8 <reg_wizchip_spi_cbfunc+0x4c>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <reg_wizchip_spi_cbfunc+0x4c>)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6213      	str	r3, [r2, #32]
   }
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	20000020 	.word	0x20000020
 80019cc:	080018d9 	.word	0x080018d9
 80019d0:	080018e9 	.word	0x080018e9

080019d4 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80019de:	bf00      	nop
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f9      	beq.n	80019e0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <reg_wizchip_spiburst_cbfunc+0x24>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d106      	bne.n	8001a06 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <reg_wizchip_spiburst_cbfunc+0x50>)
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001a00:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <reg_wizchip_spiburst_cbfunc+0x54>)
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
 8001a04:	e006      	b.n	8001a14 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001a06:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	20000020 	.word	0x20000020
 8001a24:	080018ff 	.word	0x080018ff
 8001a28:	08001917 	.word	0x08001917

08001a2c <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d82c      	bhi.n	8001a98 <ctlnetwork+0x6c>
 8001a3e:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <ctlnetwork+0x18>)
 8001a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a44:	08001a5d 	.word	0x08001a5d
 8001a48:	08001a65 	.word	0x08001a65
 8001a4c:	08001a6d 	.word	0x08001a6d
 8001a50:	08001a7b 	.word	0x08001a7b
 8001a54:	08001a89 	.word	0x08001a89
 8001a58:	08001a91 	.word	0x08001a91
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001a5c:	6838      	ldr	r0, [r7, #0]
 8001a5e:	f000 f8fb 	bl	8001c58 <wizchip_setnetinfo>
         break;
 8001a62:	e01c      	b.n	8001a9e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f000 f937 	bl	8001cd8 <wizchip_getnetinfo>
         break;
 8001a6a:	e018      	b.n	8001a9e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 f971 	bl	8001d58 <wizchip_setnetmode>
 8001a76:	4603      	mov	r3, r0
 8001a78:	e012      	b.n	8001aa0 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001a7a:	f000 f98f 	bl	8001d9c <wizchip_getnetmode>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	701a      	strb	r2, [r3, #0]
         break;
 8001a86:	e00a      	b.n	8001a9e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001a88:	6838      	ldr	r0, [r7, #0]
 8001a8a:	f000 f98f 	bl	8001dac <wizchip_settimeout>
         break;
 8001a8e:	e006      	b.n	8001a9e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8001a90:	6838      	ldr	r0, [r7, #0]
 8001a92:	f000 f9ac 	bl	8001dee <wizchip_gettimeout>
         break;
 8001a96:	e002      	b.n	8001a9e <ctlnetwork+0x72>
      default:
         return -1;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	e000      	b.n	8001aa0 <ctlnetwork+0x74>
   }
   return 0;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2206      	movs	r2, #6
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001ab8:	f7ff fcc8 	bl	800144c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ac8:	f7ff fcc0 	bl	800144c <WIZCHIP_READ_BUF>
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001ad8:	f7ff fcb8 	bl	800144c <WIZCHIP_READ_BUF>
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001ae8:	f7ff fcb0 	bl	800144c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff fc5e 	bl	80013b0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fc0f 	bl	8001318 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2206      	movs	r2, #6
 8001afe:	4619      	mov	r1, r3
 8001b00:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001b04:	f7ff fd02 	bl	800150c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b14:	f7ff fcfa 	bl	800150c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001b24:	f7ff fcf2 	bl	800150c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001b34:	f7ff fcea 	bl	800150c <WIZCHIP_WRITE_BUF>
}
 8001b38:	bf00      	nop
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001b4e:	f7ff ffab 	bl	8001aa8 <wizchip_sw_reset>
   if(txsize)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d03b      	beq.n	8001bd0 <wizchip_init+0x90>
   {
      tmp = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e015      	b.n	8001b8e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	781a      	ldrb	r2, [r3, #0]
 8001b6c:	7bbb      	ldrb	r3, [r7, #14]
 8001b6e:	4413      	add	r3, r2
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8001b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b78:	2b10      	cmp	r3, #16
 8001b7a:	dd02      	ble.n	8001b82 <wizchip_init+0x42>
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b80:	e066      	b.n	8001c50 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	73fb      	strb	r3, [r7, #15]
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	2b07      	cmp	r3, #7
 8001b94:	dde5      	ble.n	8001b62 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	e015      	b.n	8001bc8 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001baa:	4618      	mov	r0, r3
 8001bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7ff fbfa 	bl	80013b0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bcc:	2b07      	cmp	r3, #7
 8001bce:	dde5      	ble.n	8001b9c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d03b      	beq.n	8001c4e <wizchip_init+0x10e>
   {
      tmp = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e015      	b.n	8001c0c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8001be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	4413      	add	r3, r2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8001bf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	dd02      	ble.n	8001c00 <wizchip_init+0xc0>
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	e027      	b.n	8001c50 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c10:	2b07      	cmp	r3, #7
 8001c12:	dde5      	ble.n	8001be0 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e015      	b.n	8001c46 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	3301      	adds	r3, #1
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f7ff fbbb 	bl	80013b0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	3301      	adds	r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4a:	2b07      	cmp	r3, #7
 8001c4c:	dde5      	ble.n	8001c1a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2206      	movs	r2, #6
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001c6a:	f7ff fc4f 	bl	800150c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	330e      	adds	r3, #14
 8001c72:	2204      	movs	r2, #4
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c7a:	f7ff fc47 	bl	800150c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	330a      	adds	r3, #10
 8001c82:	2204      	movs	r2, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001c8a:	f7ff fc3f 	bl	800150c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3306      	adds	r3, #6
 8001c92:	2204      	movs	r2, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001c9a:	f7ff fc37 	bl	800150c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7c9a      	ldrb	r2, [r3, #18]
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <wizchip_setnetinfo+0x78>)
 8001ca4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7cda      	ldrb	r2, [r3, #19]
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <wizchip_setnetinfo+0x78>)
 8001cac:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7d1a      	ldrb	r2, [r3, #20]
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <wizchip_setnetinfo+0x78>)
 8001cb4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7d5a      	ldrb	r2, [r3, #21]
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <wizchip_setnetinfo+0x78>)
 8001cbc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7d9a      	ldrb	r2, [r3, #22]
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <wizchip_setnetinfo+0x7c>)
 8001cc4:	701a      	strb	r2, [r3, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200001ac 	.word	0x200001ac
 8001cd4:	200001b0 	.word	0x200001b0

08001cd8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2206      	movs	r2, #6
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001cea:	f7ff fbaf 	bl	800144c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	330e      	adds	r3, #14
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cfa:	f7ff fba7 	bl	800144c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	330a      	adds	r3, #10
 8001d02:	2204      	movs	r2, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001d0a:	f7ff fb9f 	bl	800144c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3306      	adds	r3, #6
 8001d12:	2204      	movs	r2, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001d1a:	f7ff fb97 	bl	800144c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <wizchip_getnetinfo+0x78>)
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <wizchip_getnetinfo+0x78>)
 8001d28:	785a      	ldrb	r2, [r3, #1]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <wizchip_getnetinfo+0x78>)
 8001d30:	789a      	ldrb	r2, [r3, #2]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <wizchip_getnetinfo+0x78>)
 8001d38:	78da      	ldrb	r2, [r3, #3]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <wizchip_getnetinfo+0x7c>)
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	759a      	strb	r2, [r3, #22]
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200001ac 	.word	0x200001ac
 8001d54:	200001b0 	.word	0x200001b0

08001d58 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <wizchip_setnetmode+0x1e>
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
 8001d74:	e00e      	b.n	8001d94 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8001d76:	2000      	movs	r0, #0
 8001d78:	f7ff face 	bl	8001318 <WIZCHIP_READ>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff fb0f 	bl	80013b0 <WIZCHIP_WRITE>
   return 0;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7ff fab9 	bl	8001318 <WIZCHIP_READ>
 8001da6:	4603      	mov	r3, r0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}

08001dac <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001dbe:	f7ff faf7 	bl	80013b0 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	885b      	ldrh	r3, [r3, #2]
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001dd2:	f7ff faed 	bl	80013b0 <WIZCHIP_WRITE>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	885b      	ldrh	r3, [r3, #2]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001de2:	f7ff fae5 	bl	80013b0 <WIZCHIP_WRITE>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001dee:	b590      	push	{r4, r7, lr}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8001df6:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001dfa:	f7ff fa8d 	bl	8001318 <WIZCHIP_READ>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8001e06:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001e0a:	f7ff fa85 	bl	8001318 <WIZCHIP_READ>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	b29c      	uxth	r4, r3
 8001e16:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001e1a:	f7ff fa7d 	bl	8001318 <WIZCHIP_READ>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4423      	add	r3, r4
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	805a      	strh	r2, [r3, #2]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd90      	pop	{r4, r7, pc}
	...

08001e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e6c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e38:	480d      	ldr	r0, [pc, #52]	; (8001e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e3a:	490e      	ldr	r1, [pc, #56]	; (8001e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e50:	4c0b      	ldr	r4, [pc, #44]	; (8001e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e5e:	f7ff fa49 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e62:	f004 fc19 	bl	8006698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e66:	f7fe fd61 	bl	800092c <main>
  bx  lr    
 8001e6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e74:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001e78:	08006870 	.word	0x08006870
  ldr r2, =_sbss
 8001e7c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001e80:	20004ce0 	.word	0x20004ce0

08001e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC_IRQHandler>
	...

08001e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <HAL_Init+0x40>)
 8001e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_Init+0x40>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <HAL_Init+0x40>)
 8001e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <HAL_Init+0x40>)
 8001eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	f000 f92b 	bl	800210c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb6:	200f      	movs	r0, #15
 8001eb8:	f000 f808 	bl	8001ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ebc:	f7ff f9c0 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023c00 	.word	0x40023c00

08001ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_InitTick+0x54>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_InitTick+0x58>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f943 	bl	8002176 <HAL_SYSTICK_Config>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00e      	b.n	8001f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b0f      	cmp	r3, #15
 8001efe:	d80a      	bhi.n	8001f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f00:	2200      	movs	r2, #0
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f000 f90b 	bl	8002122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f0c:	4a06      	ldr	r2, [pc, #24]	; (8001f28 <HAL_InitTick+0x5c>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000001c 	.word	0x2000001c
 8001f24:	20000050 	.word	0x20000050
 8001f28:	2000004c 	.word	0x2000004c

08001f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_IncTick+0x20>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_IncTick+0x24>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <HAL_IncTick+0x24>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000050 	.word	0x20000050
 8001f50:	200001b4 	.word	0x200001b4

08001f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return uwTick;
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <HAL_GetTick+0x14>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	200001b4 	.word	0x200001b4

08001f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <__NVIC_GetPriorityGrouping+0x18>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	f003 0307 	and.w	r3, r3, #7
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0b      	blt.n	8001ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	; (8002008 <__NVIC_EnableIRQ+0x38>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d8:	d301      	bcc.n	80020de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020da:	2301      	movs	r3, #1
 80020dc:	e00f      	b.n	80020fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <SysTick_Config+0x40>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e6:	210f      	movs	r1, #15
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f7ff ff8e 	bl	800200c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <SysTick_Config+0x40>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <SysTick_Config+0x40>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	e000e010 	.word	0xe000e010

0800210c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff29 	bl	8001f6c <__NVIC_SetPriorityGrouping>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002134:	f7ff ff3e 	bl	8001fb4 <__NVIC_GetPriorityGrouping>
 8002138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7ff ff8e 	bl	8002060 <NVIC_EncodePriority>
 8002144:	4602      	mov	r2, r0
 8002146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff5d 	bl	800200c <__NVIC_SetPriority>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff31 	bl	8001fd0 <__NVIC_EnableIRQ>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffa2 	bl	80020c8 <SysTick_Config>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d004      	beq.n	80021ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e00c      	b.n	80021c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2205      	movs	r2, #5
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e177      	b.n	80024e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8166 	bne.w	80024da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d005      	beq.n	8002226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	2b02      	cmp	r3, #2
 8002224:	d130      	bne.n	8002288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b03      	cmp	r3, #3
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80c0 	beq.w	80024da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b66      	ldr	r3, [pc, #408]	; (80024f8 <HAL_GPIO_Init+0x324>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a65      	ldr	r2, [pc, #404]	; (80024f8 <HAL_GPIO_Init+0x324>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_GPIO_Init+0x324>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002376:	4a61      	ldr	r2, [pc, #388]	; (80024fc <HAL_GPIO_Init+0x328>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a58      	ldr	r2, [pc, #352]	; (8002500 <HAL_GPIO_Init+0x32c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d037      	beq.n	8002412 <HAL_GPIO_Init+0x23e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a57      	ldr	r2, [pc, #348]	; (8002504 <HAL_GPIO_Init+0x330>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d031      	beq.n	800240e <HAL_GPIO_Init+0x23a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a56      	ldr	r2, [pc, #344]	; (8002508 <HAL_GPIO_Init+0x334>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02b      	beq.n	800240a <HAL_GPIO_Init+0x236>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a55      	ldr	r2, [pc, #340]	; (800250c <HAL_GPIO_Init+0x338>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d025      	beq.n	8002406 <HAL_GPIO_Init+0x232>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a54      	ldr	r2, [pc, #336]	; (8002510 <HAL_GPIO_Init+0x33c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01f      	beq.n	8002402 <HAL_GPIO_Init+0x22e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a53      	ldr	r2, [pc, #332]	; (8002514 <HAL_GPIO_Init+0x340>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d019      	beq.n	80023fe <HAL_GPIO_Init+0x22a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a52      	ldr	r2, [pc, #328]	; (8002518 <HAL_GPIO_Init+0x344>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0x226>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a51      	ldr	r2, [pc, #324]	; (800251c <HAL_GPIO_Init+0x348>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00d      	beq.n	80023f6 <HAL_GPIO_Init+0x222>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a50      	ldr	r2, [pc, #320]	; (8002520 <HAL_GPIO_Init+0x34c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x21e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4f      	ldr	r2, [pc, #316]	; (8002524 <HAL_GPIO_Init+0x350>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_GPIO_Init+0x21a>
 80023ea:	2309      	movs	r3, #9
 80023ec:	e012      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023ee:	230a      	movs	r3, #10
 80023f0:	e010      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023f2:	2308      	movs	r3, #8
 80023f4:	e00e      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023f6:	2307      	movs	r3, #7
 80023f8:	e00c      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023fa:	2306      	movs	r3, #6
 80023fc:	e00a      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023fe:	2305      	movs	r3, #5
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x240>
 8002402:	2304      	movs	r3, #4
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x240>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x240>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x240>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x240>
 8002412:	2300      	movs	r3, #0
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002424:	4935      	ldr	r1, [pc, #212]	; (80024fc <HAL_GPIO_Init+0x328>)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_GPIO_Init+0x354>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002456:	4a34      	ldr	r2, [pc, #208]	; (8002528 <HAL_GPIO_Init+0x354>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245c:	4b32      	ldr	r3, [pc, #200]	; (8002528 <HAL_GPIO_Init+0x354>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002480:	4a29      	ldr	r2, [pc, #164]	; (8002528 <HAL_GPIO_Init+0x354>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002486:	4b28      	ldr	r3, [pc, #160]	; (8002528 <HAL_GPIO_Init+0x354>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024aa:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <HAL_GPIO_Init+0x354>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_GPIO_Init+0x354>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_GPIO_Init+0x354>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	f67f ae84 	bls.w	80021f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40013800 	.word	0x40013800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40021000 	.word	0x40021000
 8002514:	40021400 	.word	0x40021400
 8002518:	40021800 	.word	0x40021800
 800251c:	40021c00 	.word	0x40021c00
 8002520:	40022000 	.word	0x40022000
 8002524:	40022400 	.word	0x40022400
 8002528:	40013c00 	.word	0x40013c00

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002548:	e003      	b.n	8002552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e267      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d075      	beq.n	800266a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800257e:	4b88      	ldr	r3, [pc, #544]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b04      	cmp	r3, #4
 8002588:	d00c      	beq.n	80025a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258a:	4b85      	ldr	r3, [pc, #532]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002592:	2b08      	cmp	r3, #8
 8002594:	d112      	bne.n	80025bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002596:	4b82      	ldr	r3, [pc, #520]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a2:	d10b      	bne.n	80025bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	4b7e      	ldr	r3, [pc, #504]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d05b      	beq.n	8002668 <HAL_RCC_OscConfig+0x108>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d157      	bne.n	8002668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e242      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c4:	d106      	bne.n	80025d4 <HAL_RCC_OscConfig+0x74>
 80025c6:	4b76      	ldr	r3, [pc, #472]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a75      	ldr	r2, [pc, #468]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e01d      	b.n	8002610 <HAL_RCC_OscConfig+0xb0>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x98>
 80025de:	4b70      	ldr	r3, [pc, #448]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6f      	ldr	r2, [pc, #444]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b6d      	ldr	r3, [pc, #436]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6c      	ldr	r2, [pc, #432]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0xb0>
 80025f8:	4b69      	ldr	r3, [pc, #420]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a68      	ldr	r2, [pc, #416]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b66      	ldr	r3, [pc, #408]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800260a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800260e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d013      	beq.n	8002640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff fc9c 	bl	8001f54 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002620:	f7ff fc98 	bl	8001f54 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e207      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0xc0>
 800263e:	e014      	b.n	800266a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff fc88 	bl	8001f54 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002648:	f7ff fc84 	bl	8001f54 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1f3      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265a:	4b51      	ldr	r3, [pc, #324]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0xe8>
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d063      	beq.n	800273e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002676:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002682:	4b47      	ldr	r3, [pc, #284]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800268a:	2b08      	cmp	r3, #8
 800268c:	d11c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268e:	4b44      	ldr	r3, [pc, #272]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d116      	bne.n	80026c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269a:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x152>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e1c7      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b2:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4937      	ldr	r1, [pc, #220]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c6:	e03a      	b.n	800273e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_RCC_OscConfig+0x244>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7ff fc3d 	bl	8001f54 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026de:	f7ff fc39 	bl	8001f54 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e1a8      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4925      	ldr	r1, [pc, #148]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
 8002710:	e015      	b.n	800273e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002712:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_RCC_OscConfig+0x244>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7ff fc1c 	bl	8001f54 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002720:	f7ff fc18 	bl	8001f54 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e187      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d036      	beq.n	80027b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <HAL_RCC_OscConfig+0x248>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7ff fbfc 	bl	8001f54 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002760:	f7ff fbf8 	bl	8001f54 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e167      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x200>
 800277e:	e01b      	b.n	80027b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_RCC_OscConfig+0x248>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7ff fbe5 	bl	8001f54 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278c:	e00e      	b.n	80027ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278e:	f7ff fbe1 	bl	8001f54 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d907      	bls.n	80027ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e150      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
 80027a0:	40023800 	.word	0x40023800
 80027a4:	42470000 	.word	0x42470000
 80027a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ac:	4b88      	ldr	r3, [pc, #544]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ea      	bne.n	800278e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 8097 	beq.w	80028f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ca:	4b81      	ldr	r3, [pc, #516]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10f      	bne.n	80027f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	4b7d      	ldr	r3, [pc, #500]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a7c      	ldr	r2, [pc, #496]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b7a      	ldr	r3, [pc, #488]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f2:	2301      	movs	r3, #1
 80027f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f6:	4b77      	ldr	r3, [pc, #476]	; (80029d4 <HAL_RCC_OscConfig+0x474>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d118      	bne.n	8002834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002802:	4b74      	ldr	r3, [pc, #464]	; (80029d4 <HAL_RCC_OscConfig+0x474>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a73      	ldr	r2, [pc, #460]	; (80029d4 <HAL_RCC_OscConfig+0x474>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280e:	f7ff fba1 	bl	8001f54 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002816:	f7ff fb9d 	bl	8001f54 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e10c      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	4b6a      	ldr	r3, [pc, #424]	; (80029d4 <HAL_RCC_OscConfig+0x474>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x2ea>
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6713      	str	r3, [r2, #112]	; 0x70
 8002848:	e01c      	b.n	8002884 <HAL_RCC_OscConfig+0x324>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b05      	cmp	r3, #5
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x30c>
 8002852:	4b5f      	ldr	r3, [pc, #380]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	4a5e      	ldr	r2, [pc, #376]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
 800285e:	4b5c      	ldr	r3, [pc, #368]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002862:	4a5b      	ldr	r2, [pc, #364]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6713      	str	r3, [r2, #112]	; 0x70
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0x324>
 800286c:	4b58      	ldr	r3, [pc, #352]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a57      	ldr	r2, [pc, #348]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	4b55      	ldr	r3, [pc, #340]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	4a54      	ldr	r2, [pc, #336]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800287e:	f023 0304 	bic.w	r3, r3, #4
 8002882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7ff fb62 	bl	8001f54 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7ff fb5e 	bl	8001f54 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e0cb      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0ee      	beq.n	8002894 <HAL_RCC_OscConfig+0x334>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b8:	f7ff fb4c 	bl	8001f54 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7ff fb48 	bl	8001f54 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0b5      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d6:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1ee      	bne.n	80028c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e8:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	4a38      	ldr	r2, [pc, #224]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80028ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a1 	beq.w	8002a40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028fe:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b08      	cmp	r3, #8
 8002908:	d05c      	beq.n	80029c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d141      	bne.n	8002996 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002912:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCC_OscConfig+0x478>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff fb1c 	bl	8001f54 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff fb18 	bl	8001f54 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e087      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	019b      	lsls	r3, r3, #6
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	3b01      	subs	r3, #1
 8002958:	041b      	lsls	r3, r3, #16
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	491b      	ldr	r1, [pc, #108]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x478>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7ff faf1 	bl	8001f54 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002976:	f7ff faed 	bl	8001f54 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e05c      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x416>
 8002994:	e054      	b.n	8002a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_RCC_OscConfig+0x478>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7ff fada 	bl	8001f54 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a4:	f7ff fad6 	bl	8001f54 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e045      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x444>
 80029c2:	e03d      	b.n	8002a40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e038      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40007000 	.word	0x40007000
 80029d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x4ec>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d028      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d121      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d11a      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d111      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	3b01      	subs	r3, #1
 8002a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d107      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800

08002a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0cc      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b68      	ldr	r3, [pc, #416]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d90c      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b65      	ldr	r3, [pc, #404]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0b8      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a58      	ldr	r2, [pc, #352]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	494d      	ldr	r1, [pc, #308]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d044      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d119      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e07f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b3f      	ldr	r3, [pc, #252]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e06f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e067      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2e:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4934      	ldr	r1, [pc, #208]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b40:	f7ff fa08 	bl	8001f54 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7ff fa04 	bl	8001f54 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e04f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 020c 	and.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1eb      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d20c      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e032      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4916      	ldr	r1, [pc, #88]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	490e      	ldr	r1, [pc, #56]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bd6:	f000 f821 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	490a      	ldr	r1, [pc, #40]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	5ccb      	ldrb	r3, [r1, r3]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f968 	bl	8001ecc <HAL_InitTick>

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023c00 	.word	0x40023c00
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08006850 	.word	0x08006850
 8002c14:	2000001c 	.word	0x2000001c
 8002c18:	2000004c 	.word	0x2000004c

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c20:	b090      	sub	sp, #64	; 0x40
 8002c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
 8002c28:	2300      	movs	r3, #0
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c34:	4b59      	ldr	r3, [pc, #356]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d00d      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x40>
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	f200 80a1 	bhi.w	8002d88 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x34>
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c4e:	e09b      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c50:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c52:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c54:	e09b      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c5a:	e098      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5c:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c66:	4b4d      	ldr	r3, [pc, #308]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d028      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b4a      	ldr	r3, [pc, #296]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	2200      	movs	r2, #0
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c84:	2100      	movs	r1, #0
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c88:	fb03 f201 	mul.w	r2, r3, r1
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	fb00 f303 	mul.w	r3, r0, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	4a43      	ldr	r2, [pc, #268]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c96:	fba0 1202 	umull	r1, r2, r0, r2
 8002c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c9c:	460a      	mov	r2, r1
 8002c9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca2:	4413      	add	r3, r2
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	61fa      	str	r2, [r7, #28]
 8002cae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cb6:	f7fd faa5 	bl	8000204 <__aeabi_uldivmod>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc2:	e053      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc4:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	2200      	movs	r2, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	617a      	str	r2, [r7, #20]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cd6:	f04f 0b00 	mov.w	fp, #0
 8002cda:	4652      	mov	r2, sl
 8002cdc:	465b      	mov	r3, fp
 8002cde:	f04f 0000 	mov.w	r0, #0
 8002ce2:	f04f 0100 	mov.w	r1, #0
 8002ce6:	0159      	lsls	r1, r3, #5
 8002ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cec:	0150      	lsls	r0, r2, #5
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	ebb2 080a 	subs.w	r8, r2, sl
 8002cf6:	eb63 090b 	sbc.w	r9, r3, fp
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d0e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d12:	eb63 0509 	sbc.w	r5, r3, r9
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	00eb      	lsls	r3, r5, #3
 8002d20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d24:	00e2      	lsls	r2, r4, #3
 8002d26:	4614      	mov	r4, r2
 8002d28:	461d      	mov	r5, r3
 8002d2a:	eb14 030a 	adds.w	r3, r4, sl
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	eb45 030b 	adc.w	r3, r5, fp
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d42:	4629      	mov	r1, r5
 8002d44:	028b      	lsls	r3, r1, #10
 8002d46:	4621      	mov	r1, r4
 8002d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	028a      	lsls	r2, r1, #10
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d56:	2200      	movs	r2, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	60fa      	str	r2, [r7, #12]
 8002d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d60:	f7fd fa50 	bl	8000204 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	0c1b      	lsrs	r3, r3, #16
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	3301      	adds	r3, #1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3740      	adds	r7, #64	; 0x40
 8002d94:	46bd      	mov	sp, r7
 8002d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	00f42400 	.word	0x00f42400
 8002da4:	017d7840 	.word	0x017d7840

08002da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e07b      	b.n	8002eb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d108      	bne.n	8002dd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dca:	d009      	beq.n	8002de0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	61da      	str	r2, [r3, #28]
 8002dd2:	e005      	b.n	8002de0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe f9d0 	bl	80011a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e64:	ea42 0103 	orr.w	r1, r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	f003 0104 	and.w	r1, r3, #4
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	f003 0210 	and.w	r2, r3, #16
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b088      	sub	sp, #32
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_SPI_Transmit+0x22>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e126      	b.n	800312a <HAL_SPI_Transmit+0x270>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ee4:	f7ff f836 	bl	8001f54 <HAL_GetTick>
 8002ee8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d002      	beq.n	8002f00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
 8002efc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002efe:	e10b      	b.n	8003118 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_SPI_Transmit+0x52>
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f10:	e102      	b.n	8003118 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2203      	movs	r2, #3
 8002f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	88fa      	ldrh	r2, [r7, #6]
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f58:	d10f      	bne.n	8002f7a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f84:	2b40      	cmp	r3, #64	; 0x40
 8002f86:	d007      	beq.n	8002f98 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa0:	d14b      	bne.n	800303a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_SPI_Transmit+0xf6>
 8002faa:	8afb      	ldrh	r3, [r7, #22]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d13e      	bne.n	800302e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	881a      	ldrh	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	1c9a      	adds	r2, r3, #2
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fd4:	e02b      	b.n	800302e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d112      	bne.n	800300a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	881a      	ldrh	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	1c9a      	adds	r2, r3, #2
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	86da      	strh	r2, [r3, #54]	; 0x36
 8003008:	e011      	b.n	800302e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800300a:	f7fe ffa3 	bl	8001f54 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d803      	bhi.n	8003022 <HAL_SPI_Transmit+0x168>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d102      	bne.n	8003028 <HAL_SPI_Transmit+0x16e>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d102      	bne.n	800302e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800302c:	e074      	b.n	8003118 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ce      	bne.n	8002fd6 <HAL_SPI_Transmit+0x11c>
 8003038:	e04c      	b.n	80030d4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_SPI_Transmit+0x18e>
 8003042:	8afb      	ldrh	r3, [r7, #22]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d140      	bne.n	80030ca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	330c      	adds	r3, #12
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800306e:	e02c      	b.n	80030ca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b02      	cmp	r3, #2
 800307c:	d113      	bne.n	80030a6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	330c      	adds	r3, #12
 8003088:	7812      	ldrb	r2, [r2, #0]
 800308a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80030a4:	e011      	b.n	80030ca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030a6:	f7fe ff55 	bl	8001f54 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d803      	bhi.n	80030be <HAL_SPI_Transmit+0x204>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d102      	bne.n	80030c4 <HAL_SPI_Transmit+0x20a>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030c8:	e026      	b.n	8003118 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1cd      	bne.n	8003070 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	6839      	ldr	r1, [r7, #0]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fcdd 	bl	8003a98 <SPI_EndRxTxTransaction>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e000      	b.n	8003118 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003116:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003128:	7ffb      	ldrb	r3, [r7, #31]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b088      	sub	sp, #32
 8003136:	af02      	add	r7, sp, #8
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314e:	d112      	bne.n	8003176 <HAL_SPI_Receive+0x44>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10e      	bne.n	8003176 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2204      	movs	r2, #4
 800315c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003160:	88fa      	ldrh	r2, [r7, #6]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f8f1 	bl	8003354 <HAL_SPI_TransmitReceive>
 8003172:	4603      	mov	r3, r0
 8003174:	e0ea      	b.n	800334c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_SPI_Receive+0x52>
 8003180:	2302      	movs	r3, #2
 8003182:	e0e3      	b.n	800334c <HAL_SPI_Receive+0x21a>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800318c:	f7fe fee2 	bl	8001f54 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d002      	beq.n	80031a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800319e:	2302      	movs	r3, #2
 80031a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031a2:	e0ca      	b.n	800333a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_SPI_Receive+0x7e>
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031b4:	e0c1      	b.n	800333a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2204      	movs	r2, #4
 80031ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031fc:	d10f      	bne.n	800321e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d007      	beq.n	800323c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800323a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d162      	bne.n	800330a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003244:	e02e      	b.n	80032a4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d115      	bne.n	8003280 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f103 020c 	add.w	r2, r3, #12
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	7812      	ldrb	r2, [r2, #0]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800327e:	e011      	b.n	80032a4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003280:	f7fe fe68 	bl	8001f54 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d803      	bhi.n	8003298 <HAL_SPI_Receive+0x166>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d102      	bne.n	800329e <HAL_SPI_Receive+0x16c>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032a2:	e04a      	b.n	800333a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1cb      	bne.n	8003246 <HAL_SPI_Receive+0x114>
 80032ae:	e031      	b.n	8003314 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d113      	bne.n	80032e6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	b292      	uxth	r2, r2
 80032ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	1c9a      	adds	r2, r3, #2
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032e4:	e011      	b.n	800330a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032e6:	f7fe fe35 	bl	8001f54 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d803      	bhi.n	80032fe <HAL_SPI_Receive+0x1cc>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d102      	bne.n	8003304 <HAL_SPI_Receive+0x1d2>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d102      	bne.n	800330a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003308:	e017      	b.n	800333a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1cd      	bne.n	80032b0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	6839      	ldr	r1, [r7, #0]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fb57 	bl	80039cc <SPI_EndRxTransaction>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	75fb      	strb	r3, [r7, #23]
 8003336:	e000      	b.n	800333a <HAL_SPI_Receive+0x208>
  }

error :
 8003338:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800334a:	7dfb      	ldrb	r3, [r7, #23]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	; 0x30
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003362:	2301      	movs	r3, #1
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_SPI_TransmitReceive+0x26>
 8003376:	2302      	movs	r3, #2
 8003378:	e18a      	b.n	8003690 <HAL_SPI_TransmitReceive+0x33c>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003382:	f7fe fde7 	bl	8001f54 <HAL_GetTick>
 8003386:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800338e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800339c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d00f      	beq.n	80033c4 <HAL_SPI_TransmitReceive+0x70>
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033aa:	d107      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x68>
 80033b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d003      	beq.n	80033c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
 80033be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033c2:	e15b      	b.n	800367c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_SPI_TransmitReceive+0x82>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_SPI_TransmitReceive+0x82>
 80033d0:	887b      	ldrh	r3, [r7, #2]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033dc:	e14e      	b.n	800367c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d003      	beq.n	80033f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2205      	movs	r2, #5
 80033ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	887a      	ldrh	r2, [r7, #2]
 8003402:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	887a      	ldrh	r2, [r7, #2]
 800341a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d007      	beq.n	8003446 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003444:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344e:	d178      	bne.n	8003542 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_SPI_TransmitReceive+0x10a>
 8003458:	8b7b      	ldrh	r3, [r7, #26]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d166      	bne.n	800352c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	881a      	ldrh	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	1c9a      	adds	r2, r3, #2
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003482:	e053      	b.n	800352c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b02      	cmp	r3, #2
 8003490:	d11b      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x176>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d016      	beq.n	80034ca <HAL_SPI_TransmitReceive+0x176>
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d113      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	881a      	ldrh	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	1c9a      	adds	r2, r3, #2
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d119      	bne.n	800350c <HAL_SPI_TransmitReceive+0x1b8>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d014      	beq.n	800350c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	b292      	uxth	r2, r2
 80034ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	1c9a      	adds	r2, r3, #2
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003508:	2301      	movs	r3, #1
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800350c:	f7fe fd22 	bl	8001f54 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003518:	429a      	cmp	r2, r3
 800351a:	d807      	bhi.n	800352c <HAL_SPI_TransmitReceive+0x1d8>
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d003      	beq.n	800352c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800352a:	e0a7      	b.n	800367c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1a6      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x130>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1a1      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x130>
 8003540:	e07c      	b.n	800363c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_SPI_TransmitReceive+0x1fc>
 800354a:	8b7b      	ldrh	r3, [r7, #26]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d16b      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	7812      	ldrb	r2, [r2, #0]
 800355c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003576:	e057      	b.n	8003628 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b02      	cmp	r3, #2
 8003584:	d11c      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x26c>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d017      	beq.n	80035c0 <HAL_SPI_TransmitReceive+0x26c>
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d114      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	330c      	adds	r3, #12
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d119      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x2ae>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d014      	beq.n	8003602 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035fe:	2301      	movs	r3, #1
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003602:	f7fe fca7 	bl	8001f54 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800360e:	429a      	cmp	r2, r3
 8003610:	d803      	bhi.n	800361a <HAL_SPI_TransmitReceive+0x2c6>
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d102      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x2cc>
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361c:	2b00      	cmp	r3, #0
 800361e:	d103      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003626:	e029      	b.n	800367c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1a2      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x224>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d19d      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800363c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fa29 	bl	8003a98 <SPI_EndRxTxTransaction>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d006      	beq.n	800365a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003658:	e010      	b.n	800367c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10b      	bne.n	800367a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	e000      	b.n	800367c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800367a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800368c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003690:	4618      	mov	r0, r3
 8003692:	3730      	adds	r7, #48	; 0x30
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10e      	bne.n	80036d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d004      	beq.n	80036d8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
    return;
 80036d6:	e0ce      	b.n	8003876 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_SPI_IRQHandler+0x5e>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
    return;
 80036f4:	e0bf      	b.n	8003876 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <HAL_SPI_IRQHandler+0x7e>
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80b0 	beq.w	8003876 <HAL_SPI_IRQHandler+0x1de>
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80aa 	beq.w	8003876 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d023      	beq.n	8003774 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b03      	cmp	r3, #3
 8003736:	d011      	beq.n	800375c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	f043 0204 	orr.w	r2, r3, #4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	e00b      	b.n	8003774 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	693b      	ldr	r3, [r7, #16]
        return;
 8003772:	e080      	b.n	8003876 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d014      	beq.n	80037a8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003782:	f043 0201 	orr.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00c      	beq.n	80037cc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f043 0208 	orr.w	r2, r3, #8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d04f      	beq.n	8003874 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <HAL_SPI_IRQHandler+0x168>
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d034      	beq.n	800386a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0203 	bic.w	r2, r2, #3
 800380e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d011      	beq.n	800383c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381c:	4a17      	ldr	r2, [pc, #92]	; (800387c <HAL_SPI_IRQHandler+0x1e4>)
 800381e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fcb2 	bl	800218e <HAL_DMA_Abort_IT>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003840:	2b00      	cmp	r3, #0
 8003842:	d016      	beq.n	8003872 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003848:	4a0c      	ldr	r2, [pc, #48]	; (800387c <HAL_SPI_IRQHandler+0x1e4>)
 800384a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fc9c 	bl	800218e <HAL_DMA_Abort_IT>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003868:	e003      	b.n	8003872 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f808 	bl	8003880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003870:	e000      	b.n	8003874 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003872:	bf00      	nop
    return;
 8003874:	bf00      	nop
  }
}
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	08003895 	.word	0x08003895

08003880 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff ffe6 	bl	8003880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038cc:	f7fe fb42 	bl	8001f54 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	4413      	add	r3, r2
 80038da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038dc:	f7fe fb3a 	bl	8001f54 <HAL_GetTick>
 80038e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038e2:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	015b      	lsls	r3, r3, #5
 80038e8:	0d1b      	lsrs	r3, r3, #20
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038f2:	e054      	b.n	800399e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d050      	beq.n	800399e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038fc:	f7fe fb2a 	bl	8001f54 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	429a      	cmp	r2, r3
 800390a:	d902      	bls.n	8003912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d13d      	bne.n	800398e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003920:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392a:	d111      	bne.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003934:	d004      	beq.n	8003940 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393e:	d107      	bne.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003958:	d10f      	bne.n	800397a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003978:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e017      	b.n	80039be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3b01      	subs	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4013      	ands	r3, r2
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	bf0c      	ite	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	2300      	movne	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d19b      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	2000001c 	.word	0x2000001c

080039cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039e0:	d111      	bne.n	8003a06 <SPI_EndRxTransaction+0x3a>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ea:	d004      	beq.n	80039f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f4:	d107      	bne.n	8003a06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a04:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a0e:	d12a      	bne.n	8003a66 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a18:	d012      	beq.n	8003a40 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2200      	movs	r2, #0
 8003a22:	2180      	movs	r1, #128	; 0x80
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f7ff ff49 	bl	80038bc <SPI_WaitFlagStateUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d02d      	beq.n	8003a8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e026      	b.n	8003a8e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2200      	movs	r2, #0
 8003a48:	2101      	movs	r1, #1
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f7ff ff36 	bl	80038bc <SPI_WaitFlagStateUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01a      	beq.n	8003a8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e013      	b.n	8003a8e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2101      	movs	r1, #1
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7ff ff23 	bl	80038bc <SPI_WaitFlagStateUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a80:	f043 0220 	orr.w	r2, r3, #32
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e000      	b.n	8003a8e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <SPI_EndRxTxTransaction+0x7c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1b      	ldr	r2, [pc, #108]	; (8003b18 <SPI_EndRxTxTransaction+0x80>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	0d5b      	lsrs	r3, r3, #21
 8003ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ac2:	d112      	bne.n	8003aea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2200      	movs	r2, #0
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f7ff fef4 	bl	80038bc <SPI_WaitFlagStateUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ade:	f043 0220 	orr.w	r2, r3, #32
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e00f      	b.n	8003b0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	2b80      	cmp	r3, #128	; 0x80
 8003b02:	d0f2      	beq.n	8003aea <SPI_EndRxTxTransaction+0x52>
 8003b04:	e000      	b.n	8003b08 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b06:	bf00      	nop
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	2000001c 	.word	0x2000001c
 8003b18:	165e9f81 	.word	0x165e9f81

08003b1c <__NVIC_SetPriority>:
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	db0a      	blt.n	8003b46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	490c      	ldr	r1, [pc, #48]	; (8003b68 <__NVIC_SetPriority+0x4c>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	0112      	lsls	r2, r2, #4
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b44:	e00a      	b.n	8003b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4908      	ldr	r1, [pc, #32]	; (8003b6c <__NVIC_SetPriority+0x50>)
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3b04      	subs	r3, #4
 8003b54:	0112      	lsls	r2, r2, #4
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	440b      	add	r3, r1
 8003b5a:	761a      	strb	r2, [r3, #24]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000e100 	.word	0xe000e100
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b74:	2100      	movs	r1, #0
 8003b76:	f06f 0004 	mvn.w	r0, #4
 8003b7a:	f7ff ffcf 	bl	8003b1c <__NVIC_SetPriority>
#endif
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b8a:	f3ef 8305 	mrs	r3, IPSR
 8003b8e:	603b      	str	r3, [r7, #0]
  return(result);
 8003b90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b96:	f06f 0305 	mvn.w	r3, #5
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	e00c      	b.n	8003bb8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <osKernelInitialize+0x44>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d105      	bne.n	8003bb2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <osKernelInitialize+0x44>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	e002      	b.n	8003bb8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bb8:	687b      	ldr	r3, [r7, #4]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	200001b8 	.word	0x200001b8

08003bcc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bd2:	f3ef 8305 	mrs	r3, IPSR
 8003bd6:	603b      	str	r3, [r7, #0]
  return(result);
 8003bd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bde:	f06f 0305 	mvn.w	r3, #5
 8003be2:	607b      	str	r3, [r7, #4]
 8003be4:	e010      	b.n	8003c08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <osKernelStart+0x48>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d109      	bne.n	8003c02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bee:	f7ff ffbf 	bl	8003b70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <osKernelStart+0x48>)
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003bf8:	f001 f82c 	bl	8004c54 <vTaskStartScheduler>
      stat = osOK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	607b      	str	r3, [r7, #4]
 8003c00:	e002      	b.n	8003c08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
 8003c06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c08:	687b      	ldr	r3, [r7, #4]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	200001b8 	.word	0x200001b8

08003c18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08e      	sub	sp, #56	; 0x38
 8003c1c:	af04      	add	r7, sp, #16
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c28:	f3ef 8305 	mrs	r3, IPSR
 8003c2c:	617b      	str	r3, [r7, #20]
  return(result);
 8003c2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d17e      	bne.n	8003d32 <osThreadNew+0x11a>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d07b      	beq.n	8003d32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c3e:	2318      	movs	r3, #24
 8003c40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d045      	beq.n	8003cde <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <osThreadNew+0x48>
        name = attr->name;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <osThreadNew+0x6e>
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b38      	cmp	r3, #56	; 0x38
 8003c78:	d805      	bhi.n	8003c86 <osThreadNew+0x6e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <osThreadNew+0x72>
        return (NULL);
 8003c86:	2300      	movs	r3, #0
 8003c88:	e054      	b.n	8003d34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00e      	beq.n	8003cc0 <osThreadNew+0xa8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2ba7      	cmp	r3, #167	; 0xa7
 8003ca8:	d90a      	bls.n	8003cc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d006      	beq.n	8003cc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <osThreadNew+0xa8>
        mem = 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	e010      	b.n	8003ce2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10c      	bne.n	8003ce2 <osThreadNew+0xca>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d108      	bne.n	8003ce2 <osThreadNew+0xca>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d104      	bne.n	8003ce2 <osThreadNew+0xca>
          mem = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	e001      	b.n	8003ce2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d110      	bne.n	8003d0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cf0:	9202      	str	r2, [sp, #8]
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6a3a      	ldr	r2, [r7, #32]
 8003cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fdf0 	bl	80048e4 <xTaskCreateStatic>
 8003d04:	4603      	mov	r3, r0
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	e013      	b.n	8003d32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d110      	bne.n	8003d32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	f107 0310 	add.w	r3, r7, #16
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fe3b 	bl	800499e <xTaskCreate>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d001      	beq.n	8003d32 <osThreadNew+0x11a>
            hTask = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d32:	693b      	ldr	r3, [r7, #16]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3728      	adds	r7, #40	; 0x28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a07      	ldr	r2, [pc, #28]	; (8003d68 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4a06      	ldr	r2, [pc, #24]	; (8003d6c <vApplicationGetIdleTaskMemory+0x30>)
 8003d52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2280      	movs	r2, #128	; 0x80
 8003d58:	601a      	str	r2, [r3, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	200001bc 	.word	0x200001bc
 8003d6c:	20000264 	.word	0x20000264

08003d70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a07      	ldr	r2, [pc, #28]	; (8003d9c <vApplicationGetTimerTaskMemory+0x2c>)
 8003d80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <vApplicationGetTimerTaskMemory+0x30>)
 8003d86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d8e:	601a      	str	r2, [r3, #0]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	20000464 	.word	0x20000464
 8003da0:	2000050c 	.word	0x2000050c

08003da4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f103 0208 	add.w	r2, r3, #8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f103 0208 	add.w	r2, r3, #8
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f103 0208 	add.w	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d103      	bne.n	8003e66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	e00c      	b.n	8003e80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e002      	b.n	8003e74 <vListInsert+0x2e>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d2f6      	bcs.n	8003e6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	601a      	str	r2, [r3, #0]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6892      	ldr	r2, [r2, #8]
 8003ece:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6852      	ldr	r2, [r2, #4]
 8003ed8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d103      	bne.n	8003eec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1e5a      	subs	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f36:	f002 f845 	bl	8005fc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	3b01      	subs	r3, #1
 8003f68:	68f9      	ldr	r1, [r7, #12]
 8003f6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	441a      	add	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	22ff      	movs	r2, #255	; 0xff
 8003f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	22ff      	movs	r2, #255	; 0xff
 8003f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d114      	bne.n	8003fb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01a      	beq.n	8003fca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3310      	adds	r3, #16
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 f8f5 	bl	8005188 <xTaskRemoveFromEventList>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d012      	beq.n	8003fca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <xQueueGenericReset+0xcc>)
 8003fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	e009      	b.n	8003fca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3310      	adds	r3, #16
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fef2 	bl	8003da4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3324      	adds	r3, #36	; 0x24
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff feed 	bl	8003da4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fca:	f002 f82b 	bl	8006024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fce:	2301      	movs	r3, #1
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	e000ed04 	.word	0xe000ed04

08003fdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08e      	sub	sp, #56	; 0x38
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800401e:	bf00      	nop
 8004020:	e7fe      	b.n	8004020 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <xQueueGenericCreateStatic+0x52>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <xQueueGenericCreateStatic+0x56>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <xQueueGenericCreateStatic+0x58>
 8004032:	2300      	movs	r3, #0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	623b      	str	r3, [r7, #32]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <xQueueGenericCreateStatic+0x7e>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <xQueueGenericCreateStatic+0x82>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <xQueueGenericCreateStatic+0x84>
 800405e:	2300      	movs	r3, #0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	61fb      	str	r3, [r7, #28]
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800407a:	2350      	movs	r3, #80	; 0x50
 800407c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b50      	cmp	r3, #80	; 0x50
 8004082:	d00a      	beq.n	800409a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	61bb      	str	r3, [r7, #24]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800409a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	4613      	mov	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f805 	bl	80040cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3730      	adds	r7, #48	; 0x30
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d103      	bne.n	80040e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e002      	b.n	80040ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040fa:	2101      	movs	r1, #1
 80040fc:	69b8      	ldr	r0, [r7, #24]
 80040fe:	f7ff ff05 	bl	8003f0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08e      	sub	sp, #56	; 0x38
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004122:	2300      	movs	r3, #0
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <xQueueGenericSend+0x32>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d103      	bne.n	8004154 <xQueueGenericSend+0x40>
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <xQueueGenericSend+0x44>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <xQueueGenericSend+0x46>
 8004158:	2300      	movs	r3, #0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <xQueueGenericSend+0x60>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004170:	bf00      	nop
 8004172:	e7fe      	b.n	8004172 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d103      	bne.n	8004182 <xQueueGenericSend+0x6e>
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <xQueueGenericSend+0x72>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <xQueueGenericSend+0x74>
 8004186:	2300      	movs	r3, #0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10a      	bne.n	80041a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	623b      	str	r3, [r7, #32]
}
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041a2:	f001 f9b3 	bl	800550c <xTaskGetSchedulerState>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <xQueueGenericSend+0x9e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <xQueueGenericSend+0xa2>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <xQueueGenericSend+0xa4>
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	61fb      	str	r3, [r7, #28]
}
 80041ce:	bf00      	nop
 80041d0:	e7fe      	b.n	80041d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041d2:	f001 fef7 	bl	8005fc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <xQueueGenericSend+0xd4>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d129      	bne.n	800423c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ee:	f000 fa0b 	bl	8004608 <prvCopyDataToQueue>
 80041f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d010      	beq.n	800421e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	3324      	adds	r3, #36	; 0x24
 8004200:	4618      	mov	r0, r3
 8004202:	f000 ffc1 	bl	8005188 <xTaskRemoveFromEventList>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d013      	beq.n	8004234 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800420c:	4b3f      	ldr	r3, [pc, #252]	; (800430c <xQueueGenericSend+0x1f8>)
 800420e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	e00a      	b.n	8004234 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004224:	4b39      	ldr	r3, [pc, #228]	; (800430c <xQueueGenericSend+0x1f8>)
 8004226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004234:	f001 fef6 	bl	8006024 <vPortExitCritical>
				return pdPASS;
 8004238:	2301      	movs	r3, #1
 800423a:	e063      	b.n	8004304 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004242:	f001 feef 	bl	8006024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004246:	2300      	movs	r3, #0
 8004248:	e05c      	b.n	8004304 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800424a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424c:	2b00      	cmp	r3, #0
 800424e:	d106      	bne.n	800425e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fffb 	bl	8005250 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800425a:	2301      	movs	r3, #1
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800425e:	f001 fee1 	bl	8006024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004262:	f000 fd67 	bl	8004d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004266:	f001 fead 	bl	8005fc4 <vPortEnterCritical>
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004270:	b25b      	sxtb	r3, r3
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d103      	bne.n	8004280 <xQueueGenericSend+0x16c>
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004286:	b25b      	sxtb	r3, r3
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d103      	bne.n	8004296 <xQueueGenericSend+0x182>
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004296:	f001 fec5 	bl	8006024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800429a:	1d3a      	adds	r2, r7, #4
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 ffea 	bl	800527c <xTaskCheckForTimeOut>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d124      	bne.n	80042f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042b0:	f000 faa2 	bl	80047f8 <prvIsQueueFull>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d018      	beq.n	80042ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	3310      	adds	r3, #16
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4611      	mov	r1, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 ff10 	bl	80050e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ca:	f000 fa2d 	bl	8004728 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042ce:	f000 fd3f 	bl	8004d50 <xTaskResumeAll>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f47f af7c 	bne.w	80041d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042da:	4b0c      	ldr	r3, [pc, #48]	; (800430c <xQueueGenericSend+0x1f8>)
 80042dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	e772      	b.n	80041d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ee:	f000 fa1b 	bl	8004728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042f2:	f000 fd2d 	bl	8004d50 <xTaskResumeAll>
 80042f6:	e76c      	b.n	80041d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042fa:	f000 fa15 	bl	8004728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042fe:	f000 fd27 	bl	8004d50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004302:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004304:	4618      	mov	r0, r3
 8004306:	3738      	adds	r7, #56	; 0x38
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b090      	sub	sp, #64	; 0x40
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d103      	bne.n	800434c <xQueueGenericSendFromISR+0x3c>
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <xQueueGenericSendFromISR+0x40>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <xQueueGenericSendFromISR+0x42>
 8004350:	2300      	movs	r3, #0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d103      	bne.n	800437a <xQueueGenericSendFromISR+0x6a>
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <xQueueGenericSendFromISR+0x6e>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <xQueueGenericSendFromISR+0x70>
 800437e:	2300      	movs	r3, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	623b      	str	r3, [r7, #32]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800439a:	f001 fef5 	bl	8006188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800439e:	f3ef 8211 	mrs	r2, BASEPRI
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	61fa      	str	r2, [r7, #28]
 80043b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <xQueueGenericSendFromISR+0xbc>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d12f      	bne.n	800442c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043e2:	f000 f911 	bl	8004608 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d112      	bne.n	8004416 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d016      	beq.n	8004426 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fa:	3324      	adds	r3, #36	; 0x24
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fec3 	bl	8005188 <xTaskRemoveFromEventList>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00e      	beq.n	8004426 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	e007      	b.n	8004426 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004416:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800441a:	3301      	adds	r3, #1
 800441c:	b2db      	uxtb	r3, r3
 800441e:	b25a      	sxtb	r2, r3
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004426:	2301      	movs	r3, #1
 8004428:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800442a:	e001      	b.n	8004430 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800442c:	2300      	movs	r3, #0
 800442e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004432:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800443a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800443c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800443e:	4618      	mov	r0, r3
 8004440:	3740      	adds	r7, #64	; 0x40
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08c      	sub	sp, #48	; 0x30
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004454:	2300      	movs	r3, #0
 8004456:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <xQueueReceive+0x30>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	623b      	str	r3, [r7, #32]
}
 8004474:	bf00      	nop
 8004476:	e7fe      	b.n	8004476 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <xQueueReceive+0x3e>
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <xQueueReceive+0x42>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <xQueueReceive+0x44>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <xQueueReceive+0x5e>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	61fb      	str	r3, [r7, #28]
}
 80044a2:	bf00      	nop
 80044a4:	e7fe      	b.n	80044a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044a6:	f001 f831 	bl	800550c <xTaskGetSchedulerState>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <xQueueReceive+0x6e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <xQueueReceive+0x72>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <xQueueReceive+0x74>
 80044ba:	2300      	movs	r3, #0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xQueueReceive+0x8e>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	61bb      	str	r3, [r7, #24]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044d6:	f001 fd75 	bl	8005fc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01f      	beq.n	8004526 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ea:	f000 f8f7 	bl	80046dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	1e5a      	subs	r2, r3, #1
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00f      	beq.n	800451e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	3310      	adds	r3, #16
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fe40 	bl	8005188 <xTaskRemoveFromEventList>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800450e:	4b3d      	ldr	r3, [pc, #244]	; (8004604 <xQueueReceive+0x1bc>)
 8004510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800451e:	f001 fd81 	bl	8006024 <vPortExitCritical>
				return pdPASS;
 8004522:	2301      	movs	r3, #1
 8004524:	e069      	b.n	80045fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d103      	bne.n	8004534 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800452c:	f001 fd7a 	bl	8006024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004530:	2300      	movs	r3, #0
 8004532:	e062      	b.n	80045fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800453a:	f107 0310 	add.w	r3, r7, #16
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fe86 	bl	8005250 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004548:	f001 fd6c 	bl	8006024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800454c:	f000 fbf2 	bl	8004d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004550:	f001 fd38 	bl	8005fc4 <vPortEnterCritical>
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800455a:	b25b      	sxtb	r3, r3
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004560:	d103      	bne.n	800456a <xQueueReceive+0x122>
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004570:	b25b      	sxtb	r3, r3
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004576:	d103      	bne.n	8004580 <xQueueReceive+0x138>
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004580:	f001 fd50 	bl	8006024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004584:	1d3a      	adds	r2, r7, #4
 8004586:	f107 0310 	add.w	r3, r7, #16
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fe75 	bl	800527c <xTaskCheckForTimeOut>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d123      	bne.n	80045e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800459a:	f000 f917 	bl	80047cc <prvIsQueueEmpty>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d017      	beq.n	80045d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	3324      	adds	r3, #36	; 0x24
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fd9b 	bl	80050e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045b4:	f000 f8b8 	bl	8004728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045b8:	f000 fbca 	bl	8004d50 <xTaskResumeAll>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d189      	bne.n	80044d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045c2:	4b10      	ldr	r3, [pc, #64]	; (8004604 <xQueueReceive+0x1bc>)
 80045c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	e780      	b.n	80044d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d6:	f000 f8a7 	bl	8004728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045da:	f000 fbb9 	bl	8004d50 <xTaskResumeAll>
 80045de:	e77a      	b.n	80044d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e2:	f000 f8a1 	bl	8004728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045e6:	f000 fbb3 	bl	8004d50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ec:	f000 f8ee 	bl	80047cc <prvIsQueueEmpty>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f43f af6f 	beq.w	80044d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3730      	adds	r7, #48	; 0x30
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	e000ed04 	.word	0xe000ed04

08004608 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10d      	bne.n	8004642 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d14d      	bne.n	80046ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 ff88 	bl	8005548 <xTaskPriorityDisinherit>
 8004638:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	e043      	b.n	80046ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d119      	bne.n	800467c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6858      	ldr	r0, [r3, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	461a      	mov	r2, r3
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	f002 f846 	bl	80066e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	441a      	add	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	d32b      	bcc.n	80046ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	e026      	b.n	80046ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68d8      	ldr	r0, [r3, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	461a      	mov	r2, r3
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	f002 f82c 	bl	80066e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	425b      	negs	r3, r3
 8004696:	441a      	add	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d207      	bcs.n	80046b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	425b      	negs	r3, r3
 80046b2:	441a      	add	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d105      	bne.n	80046ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046d2:	697b      	ldr	r3, [r7, #20]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d018      	beq.n	8004720 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	441a      	add	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	d303      	bcc.n	8004710 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68d9      	ldr	r1, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	461a      	mov	r2, r3
 800471a:	6838      	ldr	r0, [r7, #0]
 800471c:	f001 ffe2 	bl	80066e4 <memcpy>
	}
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004730:	f001 fc48 	bl	8005fc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800473a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800473c:	e011      	b.n	8004762 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d012      	beq.n	800476c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3324      	adds	r3, #36	; 0x24
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fd1c 	bl	8005188 <xTaskRemoveFromEventList>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004756:	f000 fdf3 	bl	8005340 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	3b01      	subs	r3, #1
 800475e:	b2db      	uxtb	r3, r3
 8004760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	dce9      	bgt.n	800473e <prvUnlockQueue+0x16>
 800476a:	e000      	b.n	800476e <prvUnlockQueue+0x46>
					break;
 800476c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	22ff      	movs	r2, #255	; 0xff
 8004772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004776:	f001 fc55 	bl	8006024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800477a:	f001 fc23 	bl	8005fc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004786:	e011      	b.n	80047ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d012      	beq.n	80047b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3310      	adds	r3, #16
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fcf7 	bl	8005188 <xTaskRemoveFromEventList>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047a0:	f000 fdce 	bl	8005340 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047a4:	7bbb      	ldrb	r3, [r7, #14]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	dce9      	bgt.n	8004788 <prvUnlockQueue+0x60>
 80047b4:	e000      	b.n	80047b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	22ff      	movs	r2, #255	; 0xff
 80047bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047c0:	f001 fc30 	bl	8006024 <vPortExitCritical>
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047d4:	f001 fbf6 	bl	8005fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047e0:	2301      	movs	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e001      	b.n	80047ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047ea:	f001 fc1b 	bl	8006024 <vPortExitCritical>

	return xReturn;
 80047ee:	68fb      	ldr	r3, [r7, #12]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004800:	f001 fbe0 	bl	8005fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	429a      	cmp	r2, r3
 800480e:	d102      	bne.n	8004816 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004810:	2301      	movs	r3, #1
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e001      	b.n	800481a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800481a:	f001 fc03 	bl	8006024 <vPortExitCritical>

	return xReturn;
 800481e:	68fb      	ldr	r3, [r7, #12]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	e014      	b.n	8004862 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004838:	4a0f      	ldr	r2, [pc, #60]	; (8004878 <vQueueAddToRegistry+0x50>)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10b      	bne.n	800485c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004844:	490c      	ldr	r1, [pc, #48]	; (8004878 <vQueueAddToRegistry+0x50>)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800484e:	4a0a      	ldr	r2, [pc, #40]	; (8004878 <vQueueAddToRegistry+0x50>)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4413      	add	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800485a:	e006      	b.n	800486a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3301      	adds	r3, #1
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b07      	cmp	r3, #7
 8004866:	d9e7      	bls.n	8004838 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	2000090c 	.word	0x2000090c

0800487c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800488c:	f001 fb9a 	bl	8005fc4 <vPortEnterCritical>
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004896:	b25b      	sxtb	r3, r3
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d103      	bne.n	80048a6 <vQueueWaitForMessageRestricted+0x2a>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ac:	b25b      	sxtb	r3, r3
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d103      	bne.n	80048bc <vQueueWaitForMessageRestricted+0x40>
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048bc:	f001 fbb2 	bl	8006024 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	3324      	adds	r3, #36	; 0x24
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fc2d 	bl	8005130 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048d6:	6978      	ldr	r0, [r7, #20]
 80048d8:	f7ff ff26 	bl	8004728 <prvUnlockQueue>
	}
 80048dc:	bf00      	nop
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08e      	sub	sp, #56	; 0x38
 80048e8:	af04      	add	r7, sp, #16
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <xTaskCreateStatic+0x2a>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	623b      	str	r3, [r7, #32]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <xTaskCreateStatic+0x46>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	61fb      	str	r3, [r7, #28]
}
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800492a:	23a8      	movs	r3, #168	; 0xa8
 800492c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2ba8      	cmp	r3, #168	; 0xa8
 8004932:	d00a      	beq.n	800494a <xTaskCreateStatic+0x66>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	61bb      	str	r3, [r7, #24]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800494a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	2b00      	cmp	r3, #0
 8004950:	d01e      	beq.n	8004990 <xTaskCreateStatic+0xac>
 8004952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01b      	beq.n	8004990 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004960:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	2202      	movs	r2, #2
 8004966:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800496a:	2300      	movs	r3, #0
 800496c:	9303      	str	r3, [sp, #12]
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	9302      	str	r3, [sp, #8]
 8004972:	f107 0314 	add.w	r3, r7, #20
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f850 	bl	8004a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800498a:	f000 f8f3 	bl	8004b74 <prvAddNewTaskToReadyList>
 800498e:	e001      	b.n	8004994 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004994:	697b      	ldr	r3, [r7, #20]
	}
 8004996:	4618      	mov	r0, r3
 8004998:	3728      	adds	r7, #40	; 0x28
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b08c      	sub	sp, #48	; 0x30
 80049a2:	af04      	add	r7, sp, #16
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	4613      	mov	r3, r2
 80049ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f001 fc28 	bl	8006208 <pvPortMalloc>
 80049b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00e      	beq.n	80049de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049c0:	20a8      	movs	r0, #168	; 0xa8
 80049c2:	f001 fc21 	bl	8006208 <pvPortMalloc>
 80049c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
 80049d4:	e005      	b.n	80049e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049d6:	6978      	ldr	r0, [r7, #20]
 80049d8:	f001 fce2 	bl	80063a0 <vPortFree>
 80049dc:	e001      	b.n	80049e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d017      	beq.n	8004a18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049f0:	88fa      	ldrh	r2, [r7, #6]
 80049f2:	2300      	movs	r3, #0
 80049f4:	9303      	str	r3, [sp, #12]
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	9302      	str	r3, [sp, #8]
 80049fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f80e 	bl	8004a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a0c:	69f8      	ldr	r0, [r7, #28]
 8004a0e:	f000 f8b1 	bl	8004b74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	e002      	b.n	8004a1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a18:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
	}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3720      	adds	r7, #32
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	461a      	mov	r2, r3
 8004a40:	21a5      	movs	r1, #165	; 0xa5
 8004a42:	f001 fdcb 	bl	80065dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a50:	3b01      	subs	r3, #1
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	f023 0307 	bic.w	r3, r3, #7
 8004a5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	617b      	str	r3, [r7, #20]
}
 8004a7c:	bf00      	nop
 8004a7e:	e7fe      	b.n	8004a7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01f      	beq.n	8004ac6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	e012      	b.n	8004ab2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4413      	add	r3, r2
 8004a92:	7819      	ldrb	r1, [r3, #0]
 8004a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	3334      	adds	r3, #52	; 0x34
 8004a9c:	460a      	mov	r2, r1
 8004a9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d006      	beq.n	8004aba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	2b0f      	cmp	r3, #15
 8004ab6:	d9e9      	bls.n	8004a8c <prvInitialiseNewTask+0x64>
 8004ab8:	e000      	b.n	8004abc <prvInitialiseNewTask+0x94>
			{
				break;
 8004aba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ac4:	e003      	b.n	8004ace <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	2b37      	cmp	r3, #55	; 0x37
 8004ad2:	d901      	bls.n	8004ad8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ad4:	2337      	movs	r3, #55	; 0x37
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004adc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	3304      	adds	r3, #4
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff f978 	bl	8003de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	3318      	adds	r3, #24
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff f973 	bl	8003de4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	3354      	adds	r3, #84	; 0x54
 8004b28:	224c      	movs	r2, #76	; 0x4c
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fd55 	bl	80065dc <memset>
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	4a0c      	ldr	r2, [pc, #48]	; (8004b68 <prvInitialiseNewTask+0x140>)
 8004b36:	659a      	str	r2, [r3, #88]	; 0x58
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	4a0c      	ldr	r2, [pc, #48]	; (8004b6c <prvInitialiseNewTask+0x144>)
 8004b3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	4a0b      	ldr	r2, [pc, #44]	; (8004b70 <prvInitialiseNewTask+0x148>)
 8004b42:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	69b8      	ldr	r0, [r7, #24]
 8004b4a:	f001 f90d 	bl	8005d68 <pxPortInitialiseStack>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b60:	bf00      	nop
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20004ba0 	.word	0x20004ba0
 8004b6c:	20004c08 	.word	0x20004c08
 8004b70:	20004c70 	.word	0x20004c70

08004b74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b7c:	f001 fa22 	bl	8005fc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b80:	4b2d      	ldr	r3, [pc, #180]	; (8004c38 <prvAddNewTaskToReadyList+0xc4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	4a2c      	ldr	r2, [pc, #176]	; (8004c38 <prvAddNewTaskToReadyList+0xc4>)
 8004b88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b8a:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <prvAddNewTaskToReadyList+0xc8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b92:	4a2a      	ldr	r2, [pc, #168]	; (8004c3c <prvAddNewTaskToReadyList+0xc8>)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b98:	4b27      	ldr	r3, [pc, #156]	; (8004c38 <prvAddNewTaskToReadyList+0xc4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d110      	bne.n	8004bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ba0:	f000 fbf2 	bl	8005388 <prvInitialiseTaskLists>
 8004ba4:	e00d      	b.n	8004bc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ba6:	4b26      	ldr	r3, [pc, #152]	; (8004c40 <prvAddNewTaskToReadyList+0xcc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <prvAddNewTaskToReadyList+0xc8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d802      	bhi.n	8004bc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bbc:	4a1f      	ldr	r2, [pc, #124]	; (8004c3c <prvAddNewTaskToReadyList+0xc8>)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bc2:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <prvAddNewTaskToReadyList+0xd0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	4a1e      	ldr	r2, [pc, #120]	; (8004c44 <prvAddNewTaskToReadyList+0xd0>)
 8004bca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <prvAddNewTaskToReadyList+0xd0>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd8:	4b1b      	ldr	r3, [pc, #108]	; (8004c48 <prvAddNewTaskToReadyList+0xd4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d903      	bls.n	8004be8 <prvAddNewTaskToReadyList+0x74>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <prvAddNewTaskToReadyList+0xd4>)
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <prvAddNewTaskToReadyList+0xd8>)
 8004bf6:	441a      	add	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f7ff f8fd 	bl	8003dfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c04:	f001 fa0e 	bl	8006024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c08:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <prvAddNewTaskToReadyList+0xcc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00e      	beq.n	8004c2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <prvAddNewTaskToReadyList+0xc8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d207      	bcs.n	8004c2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <prvAddNewTaskToReadyList+0xdc>)
 8004c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000e20 	.word	0x20000e20
 8004c3c:	2000094c 	.word	0x2000094c
 8004c40:	20000e2c 	.word	0x20000e2c
 8004c44:	20000e3c 	.word	0x20000e3c
 8004c48:	20000e28 	.word	0x20000e28
 8004c4c:	20000950 	.word	0x20000950
 8004c50:	e000ed04 	.word	0xe000ed04

08004c54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08a      	sub	sp, #40	; 0x28
 8004c58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c62:	463a      	mov	r2, r7
 8004c64:	1d39      	adds	r1, r7, #4
 8004c66:	f107 0308 	add.w	r3, r7, #8
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff f866 	bl	8003d3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c70:	6839      	ldr	r1, [r7, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	9202      	str	r2, [sp, #8]
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	460a      	mov	r2, r1
 8004c82:	4924      	ldr	r1, [pc, #144]	; (8004d14 <vTaskStartScheduler+0xc0>)
 8004c84:	4824      	ldr	r0, [pc, #144]	; (8004d18 <vTaskStartScheduler+0xc4>)
 8004c86:	f7ff fe2d 	bl	80048e4 <xTaskCreateStatic>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4a23      	ldr	r2, [pc, #140]	; (8004d1c <vTaskStartScheduler+0xc8>)
 8004c8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c90:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <vTaskStartScheduler+0xc8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e001      	b.n	8004ca2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d102      	bne.n	8004cae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ca8:	f000 fd10 	bl	80056cc <xTimerCreateTimerTask>
 8004cac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d11b      	bne.n	8004cec <vTaskStartScheduler+0x98>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	613b      	str	r3, [r7, #16]
}
 8004cc6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004cc8:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <vTaskStartScheduler+0xcc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3354      	adds	r3, #84	; 0x54
 8004cce:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <vTaskStartScheduler+0xd0>)
 8004cd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <vTaskStartScheduler+0xd4>)
 8004cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cda:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <vTaskStartScheduler+0xd8>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ce0:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <vTaskStartScheduler+0xdc>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ce6:	f001 f8cb 	bl	8005e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cea:	e00e      	b.n	8004d0a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d10a      	bne.n	8004d0a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	60fb      	str	r3, [r7, #12]
}
 8004d06:	bf00      	nop
 8004d08:	e7fe      	b.n	8004d08 <vTaskStartScheduler+0xb4>
}
 8004d0a:	bf00      	nop
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	08006814 	.word	0x08006814
 8004d18:	08005359 	.word	0x08005359
 8004d1c:	20000e44 	.word	0x20000e44
 8004d20:	2000094c 	.word	0x2000094c
 8004d24:	200000a4 	.word	0x200000a4
 8004d28:	20000e40 	.word	0x20000e40
 8004d2c:	20000e2c 	.word	0x20000e2c
 8004d30:	20000e24 	.word	0x20000e24

08004d34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <vTaskSuspendAll+0x18>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	4a03      	ldr	r2, [pc, #12]	; (8004d4c <vTaskSuspendAll+0x18>)
 8004d40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d42:	bf00      	nop
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	20000e48 	.word	0x20000e48

08004d50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d5e:	4b42      	ldr	r3, [pc, #264]	; (8004e68 <xTaskResumeAll+0x118>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <xTaskResumeAll+0x2c>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	603b      	str	r3, [r7, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d7c:	f001 f922 	bl	8005fc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d80:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <xTaskResumeAll+0x118>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	4a38      	ldr	r2, [pc, #224]	; (8004e68 <xTaskResumeAll+0x118>)
 8004d88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d8a:	4b37      	ldr	r3, [pc, #220]	; (8004e68 <xTaskResumeAll+0x118>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d162      	bne.n	8004e58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d92:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <xTaskResumeAll+0x11c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d05e      	beq.n	8004e58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d9a:	e02f      	b.n	8004dfc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9c:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <xTaskResumeAll+0x120>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3318      	adds	r3, #24
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff f885 	bl	8003eb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff f880 	bl	8003eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbc:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <xTaskResumeAll+0x124>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d903      	bls.n	8004dcc <xTaskResumeAll+0x7c>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	4a2a      	ldr	r2, [pc, #168]	; (8004e74 <xTaskResumeAll+0x124>)
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4a27      	ldr	r2, [pc, #156]	; (8004e78 <xTaskResumeAll+0x128>)
 8004dda:	441a      	add	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f7ff f80b 	bl	8003dfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <xTaskResumeAll+0x12c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004df6:	4b22      	ldr	r3, [pc, #136]	; (8004e80 <xTaskResumeAll+0x130>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dfc:	4b1c      	ldr	r3, [pc, #112]	; (8004e70 <xTaskResumeAll+0x120>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1cb      	bne.n	8004d9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e0a:	f000 fb5f 	bl	80054cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <xTaskResumeAll+0x134>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d010      	beq.n	8004e3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e1a:	f000 f847 	bl	8004eac <xTaskIncrementTick>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e24:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <xTaskResumeAll+0x130>)
 8004e26:	2201      	movs	r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f1      	bne.n	8004e1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e36:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <xTaskResumeAll+0x134>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e3c:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <xTaskResumeAll+0x130>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d009      	beq.n	8004e58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e44:	2301      	movs	r3, #1
 8004e46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <xTaskResumeAll+0x138>)
 8004e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e58:	f001 f8e4 	bl	8006024 <vPortExitCritical>

	return xAlreadyYielded;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000e48 	.word	0x20000e48
 8004e6c:	20000e20 	.word	0x20000e20
 8004e70:	20000de0 	.word	0x20000de0
 8004e74:	20000e28 	.word	0x20000e28
 8004e78:	20000950 	.word	0x20000950
 8004e7c:	2000094c 	.word	0x2000094c
 8004e80:	20000e34 	.word	0x20000e34
 8004e84:	20000e30 	.word	0x20000e30
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <xTaskGetTickCount+0x1c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e98:	687b      	ldr	r3, [r7, #4]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000e24 	.word	0x20000e24

08004eac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb6:	4b4f      	ldr	r3, [pc, #316]	; (8004ff4 <xTaskIncrementTick+0x148>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f040 808f 	bne.w	8004fde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ec0:	4b4d      	ldr	r3, [pc, #308]	; (8004ff8 <xTaskIncrementTick+0x14c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ec8:	4a4b      	ldr	r2, [pc, #300]	; (8004ff8 <xTaskIncrementTick+0x14c>)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d120      	bne.n	8004f16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ed4:	4b49      	ldr	r3, [pc, #292]	; (8004ffc <xTaskIncrementTick+0x150>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	603b      	str	r3, [r7, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <xTaskIncrementTick+0x46>
 8004ef4:	4b41      	ldr	r3, [pc, #260]	; (8004ffc <xTaskIncrementTick+0x150>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	4b41      	ldr	r3, [pc, #260]	; (8005000 <xTaskIncrementTick+0x154>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a3f      	ldr	r2, [pc, #252]	; (8004ffc <xTaskIncrementTick+0x150>)
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	4a3f      	ldr	r2, [pc, #252]	; (8005000 <xTaskIncrementTick+0x154>)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	4b3e      	ldr	r3, [pc, #248]	; (8005004 <xTaskIncrementTick+0x158>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	4a3d      	ldr	r2, [pc, #244]	; (8005004 <xTaskIncrementTick+0x158>)
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	f000 fadb 	bl	80054cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f16:	4b3c      	ldr	r3, [pc, #240]	; (8005008 <xTaskIncrementTick+0x15c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d349      	bcc.n	8004fb4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f20:	4b36      	ldr	r3, [pc, #216]	; (8004ffc <xTaskIncrementTick+0x150>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2a:	4b37      	ldr	r3, [pc, #220]	; (8005008 <xTaskIncrementTick+0x15c>)
 8004f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f30:	601a      	str	r2, [r3, #0]
					break;
 8004f32:	e03f      	b.n	8004fb4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f34:	4b31      	ldr	r3, [pc, #196]	; (8004ffc <xTaskIncrementTick+0x150>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d203      	bcs.n	8004f54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f4c:	4a2e      	ldr	r2, [pc, #184]	; (8005008 <xTaskIncrementTick+0x15c>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f52:	e02f      	b.n	8004fb4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fe ffad 	bl	8003eb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	3318      	adds	r3, #24
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe ffa4 	bl	8003eb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f74:	4b25      	ldr	r3, [pc, #148]	; (800500c <xTaskIncrementTick+0x160>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d903      	bls.n	8004f84 <xTaskIncrementTick+0xd8>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	4a22      	ldr	r2, [pc, #136]	; (800500c <xTaskIncrementTick+0x160>)
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <xTaskIncrementTick+0x164>)
 8004f92:	441a      	add	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f7fe ff2f 	bl	8003dfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <xTaskIncrementTick+0x168>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d3b8      	bcc.n	8004f20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fb2:	e7b5      	b.n	8004f20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fb4:	4b17      	ldr	r3, [pc, #92]	; (8005014 <xTaskIncrementTick+0x168>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fba:	4915      	ldr	r1, [pc, #84]	; (8005010 <xTaskIncrementTick+0x164>)
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d901      	bls.n	8004fd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004fd0:	4b11      	ldr	r3, [pc, #68]	; (8005018 <xTaskIncrementTick+0x16c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	e004      	b.n	8004fe8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004fde:	4b0f      	ldr	r3, [pc, #60]	; (800501c <xTaskIncrementTick+0x170>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	4a0d      	ldr	r2, [pc, #52]	; (800501c <xTaskIncrementTick+0x170>)
 8004fe6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fe8:	697b      	ldr	r3, [r7, #20]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000e48 	.word	0x20000e48
 8004ff8:	20000e24 	.word	0x20000e24
 8004ffc:	20000dd8 	.word	0x20000dd8
 8005000:	20000ddc 	.word	0x20000ddc
 8005004:	20000e38 	.word	0x20000e38
 8005008:	20000e40 	.word	0x20000e40
 800500c:	20000e28 	.word	0x20000e28
 8005010:	20000950 	.word	0x20000950
 8005014:	2000094c 	.word	0x2000094c
 8005018:	20000e34 	.word	0x20000e34
 800501c:	20000e30 	.word	0x20000e30

08005020 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005026:	4b2a      	ldr	r3, [pc, #168]	; (80050d0 <vTaskSwitchContext+0xb0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800502e:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <vTaskSwitchContext+0xb4>)
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005034:	e046      	b.n	80050c4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005036:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <vTaskSwitchContext+0xb4>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800503c:	4b26      	ldr	r3, [pc, #152]	; (80050d8 <vTaskSwitchContext+0xb8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e010      	b.n	8005066 <vTaskSwitchContext+0x46>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10a      	bne.n	8005060 <vTaskSwitchContext+0x40>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	607b      	str	r3, [r7, #4]
}
 800505c:	bf00      	nop
 800505e:	e7fe      	b.n	800505e <vTaskSwitchContext+0x3e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3b01      	subs	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	491d      	ldr	r1, [pc, #116]	; (80050dc <vTaskSwitchContext+0xbc>)
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0e4      	beq.n	8005044 <vTaskSwitchContext+0x24>
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4a15      	ldr	r2, [pc, #84]	; (80050dc <vTaskSwitchContext+0xbc>)
 8005086:	4413      	add	r3, r2
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	605a      	str	r2, [r3, #4]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	3308      	adds	r3, #8
 800509c:	429a      	cmp	r2, r3
 800509e:	d104      	bne.n	80050aa <vTaskSwitchContext+0x8a>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	605a      	str	r2, [r3, #4]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4a0b      	ldr	r2, [pc, #44]	; (80050e0 <vTaskSwitchContext+0xc0>)
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4a08      	ldr	r2, [pc, #32]	; (80050d8 <vTaskSwitchContext+0xb8>)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050ba:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <vTaskSwitchContext+0xc0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3354      	adds	r3, #84	; 0x54
 80050c0:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <vTaskSwitchContext+0xc4>)
 80050c2:	6013      	str	r3, [r2, #0]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	20000e48 	.word	0x20000e48
 80050d4:	20000e34 	.word	0x20000e34
 80050d8:	20000e28 	.word	0x20000e28
 80050dc:	20000950 	.word	0x20000950
 80050e0:	2000094c 	.word	0x2000094c
 80050e4:	200000a4 	.word	0x200000a4

080050e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	60fb      	str	r3, [r7, #12]
}
 800510a:	bf00      	nop
 800510c:	e7fe      	b.n	800510c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <vTaskPlaceOnEventList+0x44>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3318      	adds	r3, #24
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fe fe95 	bl	8003e46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800511c:	2101      	movs	r1, #1
 800511e:	6838      	ldr	r0, [r7, #0]
 8005120:	f000 fa80 	bl	8005624 <prvAddCurrentTaskToDelayedList>
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	2000094c 	.word	0x2000094c

08005130 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	617b      	str	r3, [r7, #20]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <vTaskPlaceOnEventListRestricted+0x54>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3318      	adds	r3, #24
 800515e:	4619      	mov	r1, r3
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7fe fe4c 	bl	8003dfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800516c:	f04f 33ff 	mov.w	r3, #4294967295
 8005170:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	68b8      	ldr	r0, [r7, #8]
 8005176:	f000 fa55 	bl	8005624 <prvAddCurrentTaskToDelayedList>
	}
 800517a:	bf00      	nop
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	2000094c 	.word	0x2000094c

08005188 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	60fb      	str	r3, [r7, #12]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	3318      	adds	r3, #24
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe fe7d 	bl	8003eb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051be:	4b1e      	ldr	r3, [pc, #120]	; (8005238 <xTaskRemoveFromEventList+0xb0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d11d      	bne.n	8005202 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	3304      	adds	r3, #4
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fe74 	bl	8003eb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d4:	4b19      	ldr	r3, [pc, #100]	; (800523c <xTaskRemoveFromEventList+0xb4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d903      	bls.n	80051e4 <xTaskRemoveFromEventList+0x5c>
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	4a16      	ldr	r2, [pc, #88]	; (800523c <xTaskRemoveFromEventList+0xb4>)
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <xTaskRemoveFromEventList+0xb8>)
 80051f2:	441a      	add	r2, r3
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	3304      	adds	r3, #4
 80051f8:	4619      	mov	r1, r3
 80051fa:	4610      	mov	r0, r2
 80051fc:	f7fe fdff 	bl	8003dfe <vListInsertEnd>
 8005200:	e005      	b.n	800520e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	3318      	adds	r3, #24
 8005206:	4619      	mov	r1, r3
 8005208:	480e      	ldr	r0, [pc, #56]	; (8005244 <xTaskRemoveFromEventList+0xbc>)
 800520a:	f7fe fdf8 	bl	8003dfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005212:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <xTaskRemoveFromEventList+0xc0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	429a      	cmp	r2, r3
 800521a:	d905      	bls.n	8005228 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800521c:	2301      	movs	r3, #1
 800521e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <xTaskRemoveFromEventList+0xc4>)
 8005222:	2201      	movs	r2, #1
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e001      	b.n	800522c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800522c:	697b      	ldr	r3, [r7, #20]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000e48 	.word	0x20000e48
 800523c:	20000e28 	.word	0x20000e28
 8005240:	20000950 	.word	0x20000950
 8005244:	20000de0 	.word	0x20000de0
 8005248:	2000094c 	.word	0x2000094c
 800524c:	20000e34 	.word	0x20000e34

08005250 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005258:	4b06      	ldr	r3, [pc, #24]	; (8005274 <vTaskInternalSetTimeOutState+0x24>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <vTaskInternalSetTimeOutState+0x28>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	605a      	str	r2, [r3, #4]
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	20000e38 	.word	0x20000e38
 8005278:	20000e24 	.word	0x20000e24

0800527c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	613b      	str	r3, [r7, #16]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	60fb      	str	r3, [r7, #12]
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80052be:	f000 fe81 	bl	8005fc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80052c2:	4b1d      	ldr	r3, [pc, #116]	; (8005338 <xTaskCheckForTimeOut+0xbc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052da:	d102      	bne.n	80052e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80052dc:	2300      	movs	r3, #0
 80052de:	61fb      	str	r3, [r7, #28]
 80052e0:	e023      	b.n	800532a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4b15      	ldr	r3, [pc, #84]	; (800533c <xTaskCheckForTimeOut+0xc0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d007      	beq.n	80052fe <xTaskCheckForTimeOut+0x82>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	e015      	b.n	800532a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	429a      	cmp	r2, r3
 8005306:	d20b      	bcs.n	8005320 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	1ad2      	subs	r2, r2, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff ff9b 	bl	8005250 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	e004      	b.n	800532a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005326:	2301      	movs	r3, #1
 8005328:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800532a:	f000 fe7b 	bl	8006024 <vPortExitCritical>

	return xReturn;
 800532e:	69fb      	ldr	r3, [r7, #28]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000e24 	.word	0x20000e24
 800533c:	20000e38 	.word	0x20000e38

08005340 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005344:	4b03      	ldr	r3, [pc, #12]	; (8005354 <vTaskMissedYield+0x14>)
 8005346:	2201      	movs	r2, #1
 8005348:	601a      	str	r2, [r3, #0]
}
 800534a:	bf00      	nop
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	20000e34 	.word	0x20000e34

08005358 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005360:	f000 f852 	bl	8005408 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <prvIdleTask+0x28>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d9f9      	bls.n	8005360 <prvIdleTask+0x8>
			{
				taskYIELD();
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <prvIdleTask+0x2c>)
 800536e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800537c:	e7f0      	b.n	8005360 <prvIdleTask+0x8>
 800537e:	bf00      	nop
 8005380:	20000950 	.word	0x20000950
 8005384:	e000ed04 	.word	0xe000ed04

08005388 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
 8005392:	e00c      	b.n	80053ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4a12      	ldr	r2, [pc, #72]	; (80053e8 <prvInitialiseTaskLists+0x60>)
 80053a0:	4413      	add	r3, r2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe fcfe 	bl	8003da4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3301      	adds	r3, #1
 80053ac:	607b      	str	r3, [r7, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b37      	cmp	r3, #55	; 0x37
 80053b2:	d9ef      	bls.n	8005394 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053b4:	480d      	ldr	r0, [pc, #52]	; (80053ec <prvInitialiseTaskLists+0x64>)
 80053b6:	f7fe fcf5 	bl	8003da4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053ba:	480d      	ldr	r0, [pc, #52]	; (80053f0 <prvInitialiseTaskLists+0x68>)
 80053bc:	f7fe fcf2 	bl	8003da4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053c0:	480c      	ldr	r0, [pc, #48]	; (80053f4 <prvInitialiseTaskLists+0x6c>)
 80053c2:	f7fe fcef 	bl	8003da4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053c6:	480c      	ldr	r0, [pc, #48]	; (80053f8 <prvInitialiseTaskLists+0x70>)
 80053c8:	f7fe fcec 	bl	8003da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053cc:	480b      	ldr	r0, [pc, #44]	; (80053fc <prvInitialiseTaskLists+0x74>)
 80053ce:	f7fe fce9 	bl	8003da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <prvInitialiseTaskLists+0x78>)
 80053d4:	4a05      	ldr	r2, [pc, #20]	; (80053ec <prvInitialiseTaskLists+0x64>)
 80053d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053d8:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <prvInitialiseTaskLists+0x7c>)
 80053da:	4a05      	ldr	r2, [pc, #20]	; (80053f0 <prvInitialiseTaskLists+0x68>)
 80053dc:	601a      	str	r2, [r3, #0]
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000950 	.word	0x20000950
 80053ec:	20000db0 	.word	0x20000db0
 80053f0:	20000dc4 	.word	0x20000dc4
 80053f4:	20000de0 	.word	0x20000de0
 80053f8:	20000df4 	.word	0x20000df4
 80053fc:	20000e0c 	.word	0x20000e0c
 8005400:	20000dd8 	.word	0x20000dd8
 8005404:	20000ddc 	.word	0x20000ddc

08005408 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800540e:	e019      	b.n	8005444 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005410:	f000 fdd8 	bl	8005fc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005414:	4b10      	ldr	r3, [pc, #64]	; (8005458 <prvCheckTasksWaitingTermination+0x50>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	4618      	mov	r0, r3
 8005422:	f7fe fd49 	bl	8003eb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005426:	4b0d      	ldr	r3, [pc, #52]	; (800545c <prvCheckTasksWaitingTermination+0x54>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3b01      	subs	r3, #1
 800542c:	4a0b      	ldr	r2, [pc, #44]	; (800545c <prvCheckTasksWaitingTermination+0x54>)
 800542e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <prvCheckTasksWaitingTermination+0x58>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3b01      	subs	r3, #1
 8005436:	4a0a      	ldr	r2, [pc, #40]	; (8005460 <prvCheckTasksWaitingTermination+0x58>)
 8005438:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800543a:	f000 fdf3 	bl	8006024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f810 	bl	8005464 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <prvCheckTasksWaitingTermination+0x58>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e1      	bne.n	8005410 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000df4 	.word	0x20000df4
 800545c:	20000e20 	.word	0x20000e20
 8005460:	20000e08 	.word	0x20000e08

08005464 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3354      	adds	r3, #84	; 0x54
 8005470:	4618      	mov	r0, r3
 8005472:	f001 f8bb 	bl	80065ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800547c:	2b00      	cmp	r3, #0
 800547e:	d108      	bne.n	8005492 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	4618      	mov	r0, r3
 8005486:	f000 ff8b 	bl	80063a0 <vPortFree>
				vPortFree( pxTCB );
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 ff88 	bl	80063a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005490:	e018      	b.n	80054c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005498:	2b01      	cmp	r3, #1
 800549a:	d103      	bne.n	80054a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 ff7f 	bl	80063a0 <vPortFree>
	}
 80054a2:	e00f      	b.n	80054c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d00a      	beq.n	80054c4 <prvDeleteTCB+0x60>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	60fb      	str	r3, [r7, #12]
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <prvDeleteTCB+0x5e>
	}
 80054c4:	bf00      	nop
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054d2:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <prvResetNextTaskUnblockTime+0x38>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d104      	bne.n	80054e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054dc:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <prvResetNextTaskUnblockTime+0x3c>)
 80054de:	f04f 32ff 	mov.w	r2, #4294967295
 80054e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054e4:	e008      	b.n	80054f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e6:	4b07      	ldr	r3, [pc, #28]	; (8005504 <prvResetNextTaskUnblockTime+0x38>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4a04      	ldr	r2, [pc, #16]	; (8005508 <prvResetNextTaskUnblockTime+0x3c>)
 80054f6:	6013      	str	r3, [r2, #0]
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	20000dd8 	.word	0x20000dd8
 8005508:	20000e40 	.word	0x20000e40

0800550c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005512:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <xTaskGetSchedulerState+0x34>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800551a:	2301      	movs	r3, #1
 800551c:	607b      	str	r3, [r7, #4]
 800551e:	e008      	b.n	8005532 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <xTaskGetSchedulerState+0x38>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d102      	bne.n	800552e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005528:	2302      	movs	r3, #2
 800552a:	607b      	str	r3, [r7, #4]
 800552c:	e001      	b.n	8005532 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800552e:	2300      	movs	r3, #0
 8005530:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005532:	687b      	ldr	r3, [r7, #4]
	}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	20000e2c 	.word	0x20000e2c
 8005544:	20000e48 	.word	0x20000e48

08005548 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d056      	beq.n	800560c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800555e:	4b2e      	ldr	r3, [pc, #184]	; (8005618 <xTaskPriorityDisinherit+0xd0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	429a      	cmp	r2, r3
 8005566:	d00a      	beq.n	800557e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	60fb      	str	r3, [r7, #12]
}
 800557a:	bf00      	nop
 800557c:	e7fe      	b.n	800557c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60bb      	str	r3, [r7, #8]
}
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a0:	1e5a      	subs	r2, r3, #1
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d02c      	beq.n	800560c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d128      	bne.n	800560c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	3304      	adds	r3, #4
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fc7a 	bl	8003eb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <xTaskPriorityDisinherit+0xd4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d903      	bls.n	80055ec <xTaskPriorityDisinherit+0xa4>
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	4a0c      	ldr	r2, [pc, #48]	; (800561c <xTaskPriorityDisinherit+0xd4>)
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4a09      	ldr	r2, [pc, #36]	; (8005620 <xTaskPriorityDisinherit+0xd8>)
 80055fa:	441a      	add	r2, r3
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	3304      	adds	r3, #4
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f7fe fbfb 	bl	8003dfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005608:	2301      	movs	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800560c:	697b      	ldr	r3, [r7, #20]
	}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	2000094c 	.word	0x2000094c
 800561c:	20000e28 	.word	0x20000e28
 8005620:	20000950 	.word	0x20000950

08005624 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800562e:	4b21      	ldr	r3, [pc, #132]	; (80056b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005634:	4b20      	ldr	r3, [pc, #128]	; (80056b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3304      	adds	r3, #4
 800563a:	4618      	mov	r0, r3
 800563c:	f7fe fc3c 	bl	8003eb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d10a      	bne.n	800565e <prvAddCurrentTaskToDelayedList+0x3a>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800564e:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3304      	adds	r3, #4
 8005654:	4619      	mov	r1, r3
 8005656:	4819      	ldr	r0, [pc, #100]	; (80056bc <prvAddCurrentTaskToDelayedList+0x98>)
 8005658:	f7fe fbd1 	bl	8003dfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800565c:	e026      	b.n	80056ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005666:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	429a      	cmp	r2, r3
 8005674:	d209      	bcs.n	800568a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005676:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f7fe fbdf 	bl	8003e46 <vListInsert>
}
 8005688:	e010      	b.n	80056ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800568a:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3304      	adds	r3, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f7fe fbd5 	bl	8003e46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800569c:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d202      	bcs.n	80056ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80056a6:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6013      	str	r3, [r2, #0]
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000e24 	.word	0x20000e24
 80056b8:	2000094c 	.word	0x2000094c
 80056bc:	20000e0c 	.word	0x20000e0c
 80056c0:	20000ddc 	.word	0x20000ddc
 80056c4:	20000dd8 	.word	0x20000dd8
 80056c8:	20000e40 	.word	0x20000e40

080056cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80056d6:	f000 fb07 	bl	8005ce8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80056da:	4b1c      	ldr	r3, [pc, #112]	; (800574c <xTimerCreateTimerTask+0x80>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d021      	beq.n	8005726 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80056ea:	1d3a      	adds	r2, r7, #4
 80056ec:	f107 0108 	add.w	r1, r7, #8
 80056f0:	f107 030c 	add.w	r3, r7, #12
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fe fb3b 	bl	8003d70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	9202      	str	r2, [sp, #8]
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	2302      	movs	r3, #2
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	2300      	movs	r3, #0
 800570a:	460a      	mov	r2, r1
 800570c:	4910      	ldr	r1, [pc, #64]	; (8005750 <xTimerCreateTimerTask+0x84>)
 800570e:	4811      	ldr	r0, [pc, #68]	; (8005754 <xTimerCreateTimerTask+0x88>)
 8005710:	f7ff f8e8 	bl	80048e4 <xTaskCreateStatic>
 8005714:	4603      	mov	r3, r0
 8005716:	4a10      	ldr	r2, [pc, #64]	; (8005758 <xTimerCreateTimerTask+0x8c>)
 8005718:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <xTimerCreateTimerTask+0x8c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005722:	2301      	movs	r3, #1
 8005724:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	613b      	str	r3, [r7, #16]
}
 800573e:	bf00      	nop
 8005740:	e7fe      	b.n	8005740 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005742:	697b      	ldr	r3, [r7, #20]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000e7c 	.word	0x20000e7c
 8005750:	0800681c 	.word	0x0800681c
 8005754:	08005891 	.word	0x08005891
 8005758:	20000e80 	.word	0x20000e80

0800575c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08a      	sub	sp, #40	; 0x28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800576a:	2300      	movs	r3, #0
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	623b      	str	r3, [r7, #32]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800578a:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <xTimerGenericCommand+0x98>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d02a      	beq.n	80057e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b05      	cmp	r3, #5
 80057a2:	dc18      	bgt.n	80057d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80057a4:	f7ff feb2 	bl	800550c <xTaskGetSchedulerState>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d109      	bne.n	80057c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80057ae:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <xTimerGenericCommand+0x98>)
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	f107 0110 	add.w	r1, r7, #16
 80057b6:	2300      	movs	r3, #0
 80057b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ba:	f7fe fcab 	bl	8004114 <xQueueGenericSend>
 80057be:	6278      	str	r0, [r7, #36]	; 0x24
 80057c0:	e012      	b.n	80057e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80057c2:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <xTimerGenericCommand+0x98>)
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	f107 0110 	add.w	r1, r7, #16
 80057ca:	2300      	movs	r3, #0
 80057cc:	2200      	movs	r2, #0
 80057ce:	f7fe fca1 	bl	8004114 <xQueueGenericSend>
 80057d2:	6278      	str	r0, [r7, #36]	; 0x24
 80057d4:	e008      	b.n	80057e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80057d6:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <xTimerGenericCommand+0x98>)
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	f107 0110 	add.w	r1, r7, #16
 80057de:	2300      	movs	r3, #0
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	f7fe fd95 	bl	8004310 <xQueueGenericSendFromISR>
 80057e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3728      	adds	r7, #40	; 0x28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000e7c 	.word	0x20000e7c

080057f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005802:	4b22      	ldr	r3, [pc, #136]	; (800588c <prvProcessExpiredTimer+0x94>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	3304      	adds	r3, #4
 8005810:	4618      	mov	r0, r3
 8005812:	f7fe fb51 	bl	8003eb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d022      	beq.n	800586a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	699a      	ldr	r2, [r3, #24]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	18d1      	adds	r1, r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	6978      	ldr	r0, [r7, #20]
 8005832:	f000 f8d1 	bl	80059d8 <prvInsertTimerInActiveList>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01f      	beq.n	800587c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800583c:	2300      	movs	r3, #0
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2300      	movs	r3, #0
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	2100      	movs	r1, #0
 8005846:	6978      	ldr	r0, [r7, #20]
 8005848:	f7ff ff88 	bl	800575c <xTimerGenericCommand>
 800584c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d113      	bne.n	800587c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	60fb      	str	r3, [r7, #12]
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	b2da      	uxtb	r2, r3
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	6978      	ldr	r0, [r7, #20]
 8005882:	4798      	blx	r3
}
 8005884:	bf00      	nop
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20000e74 	.word	0x20000e74

08005890 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005898:	f107 0308 	add.w	r3, r7, #8
 800589c:	4618      	mov	r0, r3
 800589e:	f000 f857 	bl	8005950 <prvGetNextExpireTime>
 80058a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4619      	mov	r1, r3
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f803 	bl	80058b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80058ae:	f000 f8d5 	bl	8005a5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058b2:	e7f1      	b.n	8005898 <prvTimerTask+0x8>

080058b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80058be:	f7ff fa39 	bl	8004d34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058c2:	f107 0308 	add.w	r3, r7, #8
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 f866 	bl	8005998 <prvSampleTimeNow>
 80058cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d130      	bne.n	8005936 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <prvProcessTimerOrBlockTask+0x3c>
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d806      	bhi.n	80058f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80058e2:	f7ff fa35 	bl	8004d50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80058e6:	68f9      	ldr	r1, [r7, #12]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff ff85 	bl	80057f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80058ee:	e024      	b.n	800593a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058f6:	4b13      	ldr	r3, [pc, #76]	; (8005944 <prvProcessTimerOrBlockTask+0x90>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <prvProcessTimerOrBlockTask+0x50>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <prvProcessTimerOrBlockTask+0x52>
 8005904:	2300      	movs	r3, #0
 8005906:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <prvProcessTimerOrBlockTask+0x94>)
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	4619      	mov	r1, r3
 8005916:	f7fe ffb1 	bl	800487c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800591a:	f7ff fa19 	bl	8004d50 <xTaskResumeAll>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005924:	4b09      	ldr	r3, [pc, #36]	; (800594c <prvProcessTimerOrBlockTask+0x98>)
 8005926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	f3bf 8f6f 	isb	sy
}
 8005934:	e001      	b.n	800593a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005936:	f7ff fa0b 	bl	8004d50 <xTaskResumeAll>
}
 800593a:	bf00      	nop
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000e78 	.word	0x20000e78
 8005948:	20000e7c 	.word	0x20000e7c
 800594c:	e000ed04 	.word	0xe000ed04

08005950 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005958:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <prvGetNextExpireTime+0x44>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <prvGetNextExpireTime+0x16>
 8005962:	2201      	movs	r2, #1
 8005964:	e000      	b.n	8005968 <prvGetNextExpireTime+0x18>
 8005966:	2200      	movs	r2, #0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d105      	bne.n	8005980 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005974:	4b07      	ldr	r3, [pc, #28]	; (8005994 <prvGetNextExpireTime+0x44>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	e001      	b.n	8005984 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005984:	68fb      	ldr	r3, [r7, #12]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20000e74 	.word	0x20000e74

08005998 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80059a0:	f7ff fa74 	bl	8004e8c <xTaskGetTickCount>
 80059a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <prvSampleTimeNow+0x3c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d205      	bcs.n	80059bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80059b0:	f000 f936 	bl	8005c20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	e002      	b.n	80059c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80059c2:	4a04      	ldr	r2, [pc, #16]	; (80059d4 <prvSampleTimeNow+0x3c>)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80059c8:	68fb      	ldr	r3, [r7, #12]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000e84 	.word	0x20000e84

080059d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d812      	bhi.n	8005a24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	1ad2      	subs	r2, r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d302      	bcc.n	8005a12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e01b      	b.n	8005a4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a12:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <prvInsertTimerInActiveList+0x7c>)
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	f7fe fa12 	bl	8003e46 <vListInsert>
 8005a22:	e012      	b.n	8005a4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d206      	bcs.n	8005a3a <prvInsertTimerInActiveList+0x62>
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d302      	bcc.n	8005a3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	e007      	b.n	8005a4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a3a:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <prvInsertTimerInActiveList+0x80>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f7fe f9fe 	bl	8003e46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a4a:	697b      	ldr	r3, [r7, #20]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20000e78 	.word	0x20000e78
 8005a58:	20000e74 	.word	0x20000e74

08005a5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08e      	sub	sp, #56	; 0x38
 8005a60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a62:	e0ca      	b.n	8005bfa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	da18      	bge.n	8005a9c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a6a:	1d3b      	adds	r3, r7, #4
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	61fb      	str	r3, [r7, #28]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a92:	6850      	ldr	r0, [r2, #4]
 8005a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a96:	6892      	ldr	r2, [r2, #8]
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f2c0 80ab 	blt.w	8005bfa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d004      	beq.n	8005aba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe f9ff 	bl	8003eb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005aba:	463b      	mov	r3, r7
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff ff6b 	bl	8005998 <prvSampleTimeNow>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b09      	cmp	r3, #9
 8005ac8:	f200 8096 	bhi.w	8005bf8 <prvProcessReceivedCommands+0x19c>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <prvProcessReceivedCommands+0x78>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005afd 	.word	0x08005afd
 8005ad8:	08005afd 	.word	0x08005afd
 8005adc:	08005afd 	.word	0x08005afd
 8005ae0:	08005b71 	.word	0x08005b71
 8005ae4:	08005b85 	.word	0x08005b85
 8005ae8:	08005bcf 	.word	0x08005bcf
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005afd 	.word	0x08005afd
 8005af4:	08005b71 	.word	0x08005b71
 8005af8:	08005b85 	.word	0x08005b85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	18d1      	adds	r1, r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1c:	f7ff ff5c 	bl	80059d8 <prvInsertTimerInActiveList>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d069      	beq.n	8005bfa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d05e      	beq.n	8005bfa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	441a      	add	r2, r3
 8005b44:	2300      	movs	r3, #0
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4e:	f7ff fe05 	bl	800575c <xTimerGenericCommand>
 8005b52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d14f      	bne.n	8005bfa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	61bb      	str	r3, [r7, #24]
}
 8005b6c:	bf00      	nop
 8005b6e:	e7fe      	b.n	8005b6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005b82:	e03a      	b.n	8005bfa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	617b      	str	r3, [r7, #20]
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	18d1      	adds	r1, r2, r3
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bc8:	f7ff ff06 	bl	80059d8 <prvInsertTimerInActiveList>
					break;
 8005bcc:	e015      	b.n	8005bfa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d103      	bne.n	8005be4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bde:	f000 fbdf 	bl	80063a0 <vPortFree>
 8005be2:	e00a      	b.n	8005bfa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bea:	f023 0301 	bic.w	r3, r3, #1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005bf6:	e000      	b.n	8005bfa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005bf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bfa:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <prvProcessReceivedCommands+0x1c0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	1d39      	adds	r1, r7, #4
 8005c00:	2200      	movs	r2, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fe fc20 	bl	8004448 <xQueueReceive>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f47f af2a 	bne.w	8005a64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	3730      	adds	r7, #48	; 0x30
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000e7c 	.word	0x20000e7c

08005c20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c26:	e048      	b.n	8005cba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c28:	4b2d      	ldr	r3, [pc, #180]	; (8005ce0 <prvSwitchTimerLists+0xc0>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c32:	4b2b      	ldr	r3, [pc, #172]	; (8005ce0 <prvSwitchTimerLists+0xc0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe f939 	bl	8003eb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d02e      	beq.n	8005cba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4413      	add	r3, r2
 8005c64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d90e      	bls.n	8005c8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c7a:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <prvSwitchTimerLists+0xc0>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3304      	adds	r3, #4
 8005c82:	4619      	mov	r1, r3
 8005c84:	4610      	mov	r0, r2
 8005c86:	f7fe f8de 	bl	8003e46 <vListInsert>
 8005c8a:	e016      	b.n	8005cba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	2300      	movs	r3, #0
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	2100      	movs	r1, #0
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff fd60 	bl	800575c <xTimerGenericCommand>
 8005c9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	603b      	str	r3, [r7, #0]
}
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <prvSwitchTimerLists+0xc0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1b1      	bne.n	8005c28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005cc4:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <prvSwitchTimerLists+0xc0>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005cca:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <prvSwitchTimerLists+0xc4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a04      	ldr	r2, [pc, #16]	; (8005ce0 <prvSwitchTimerLists+0xc0>)
 8005cd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005cd2:	4a04      	ldr	r2, [pc, #16]	; (8005ce4 <prvSwitchTimerLists+0xc4>)
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	6013      	str	r3, [r2, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20000e74 	.word	0x20000e74
 8005ce4:	20000e78 	.word	0x20000e78

08005ce8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005cee:	f000 f969 	bl	8005fc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005cf2:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <prvCheckForValidListAndQueue+0x60>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d120      	bne.n	8005d3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005cfa:	4814      	ldr	r0, [pc, #80]	; (8005d4c <prvCheckForValidListAndQueue+0x64>)
 8005cfc:	f7fe f852 	bl	8003da4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d00:	4813      	ldr	r0, [pc, #76]	; (8005d50 <prvCheckForValidListAndQueue+0x68>)
 8005d02:	f7fe f84f 	bl	8003da4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d06:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <prvCheckForValidListAndQueue+0x6c>)
 8005d08:	4a10      	ldr	r2, [pc, #64]	; (8005d4c <prvCheckForValidListAndQueue+0x64>)
 8005d0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d0c:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <prvCheckForValidListAndQueue+0x70>)
 8005d0e:	4a10      	ldr	r2, [pc, #64]	; (8005d50 <prvCheckForValidListAndQueue+0x68>)
 8005d10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d12:	2300      	movs	r3, #0
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <prvCheckForValidListAndQueue+0x74>)
 8005d18:	4a11      	ldr	r2, [pc, #68]	; (8005d60 <prvCheckForValidListAndQueue+0x78>)
 8005d1a:	2110      	movs	r1, #16
 8005d1c:	200a      	movs	r0, #10
 8005d1e:	f7fe f95d 	bl	8003fdc <xQueueGenericCreateStatic>
 8005d22:	4603      	mov	r3, r0
 8005d24:	4a08      	ldr	r2, [pc, #32]	; (8005d48 <prvCheckForValidListAndQueue+0x60>)
 8005d26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d28:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <prvCheckForValidListAndQueue+0x60>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <prvCheckForValidListAndQueue+0x60>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	490b      	ldr	r1, [pc, #44]	; (8005d64 <prvCheckForValidListAndQueue+0x7c>)
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fd76 	bl	8004828 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d3c:	f000 f972 	bl	8006024 <vPortExitCritical>
}
 8005d40:	bf00      	nop
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000e7c 	.word	0x20000e7c
 8005d4c:	20000e4c 	.word	0x20000e4c
 8005d50:	20000e60 	.word	0x20000e60
 8005d54:	20000e74 	.word	0x20000e74
 8005d58:	20000e78 	.word	0x20000e78
 8005d5c:	20000f28 	.word	0x20000f28
 8005d60:	20000e88 	.word	0x20000e88
 8005d64:	08006824 	.word	0x08006824

08005d68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3b04      	subs	r3, #4
 8005d78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3b04      	subs	r3, #4
 8005d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f023 0201 	bic.w	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3b04      	subs	r3, #4
 8005d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d98:	4a0c      	ldr	r2, [pc, #48]	; (8005dcc <pxPortInitialiseStack+0x64>)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3b14      	subs	r3, #20
 8005da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3b04      	subs	r3, #4
 8005dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f06f 0202 	mvn.w	r2, #2
 8005db6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3b20      	subs	r3, #32
 8005dbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	08005dd1 	.word	0x08005dd1

08005dd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <prvTaskExitError+0x54>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de2:	d00a      	beq.n	8005dfa <prvTaskExitError+0x2a>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	60fb      	str	r3, [r7, #12]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <prvTaskExitError+0x28>
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	60bb      	str	r3, [r7, #8]
}
 8005e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e0e:	bf00      	nop
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0fc      	beq.n	8005e10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	20000054 	.word	0x20000054
	...

08005e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e30:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <pxCurrentTCBConst2>)
 8005e32:	6819      	ldr	r1, [r3, #0]
 8005e34:	6808      	ldr	r0, [r1, #0]
 8005e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3a:	f380 8809 	msr	PSP, r0
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f380 8811 	msr	BASEPRI, r0
 8005e4a:	4770      	bx	lr
 8005e4c:	f3af 8000 	nop.w

08005e50 <pxCurrentTCBConst2>:
 8005e50:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop

08005e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e58:	4808      	ldr	r0, [pc, #32]	; (8005e7c <prvPortStartFirstTask+0x24>)
 8005e5a:	6800      	ldr	r0, [r0, #0]
 8005e5c:	6800      	ldr	r0, [r0, #0]
 8005e5e:	f380 8808 	msr	MSP, r0
 8005e62:	f04f 0000 	mov.w	r0, #0
 8005e66:	f380 8814 	msr	CONTROL, r0
 8005e6a:	b662      	cpsie	i
 8005e6c:	b661      	cpsie	f
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	df00      	svc	0
 8005e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e7a:	bf00      	nop
 8005e7c:	e000ed08 	.word	0xe000ed08

08005e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e86:	4b46      	ldr	r3, [pc, #280]	; (8005fa0 <xPortStartScheduler+0x120>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a46      	ldr	r2, [pc, #280]	; (8005fa4 <xPortStartScheduler+0x124>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d10a      	bne.n	8005ea6 <xPortStartScheduler+0x26>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	613b      	str	r3, [r7, #16]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ea6:	4b3e      	ldr	r3, [pc, #248]	; (8005fa0 <xPortStartScheduler+0x120>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a3f      	ldr	r2, [pc, #252]	; (8005fa8 <xPortStartScheduler+0x128>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d10a      	bne.n	8005ec6 <xPortStartScheduler+0x46>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	60fb      	str	r3, [r7, #12]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ec6:	4b39      	ldr	r3, [pc, #228]	; (8005fac <xPortStartScheduler+0x12c>)
 8005ec8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	22ff      	movs	r2, #255	; 0xff
 8005ed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	4b31      	ldr	r3, [pc, #196]	; (8005fb0 <xPortStartScheduler+0x130>)
 8005eec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005eee:	4b31      	ldr	r3, [pc, #196]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005ef0:	2207      	movs	r2, #7
 8005ef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ef4:	e009      	b.n	8005f0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ef6:	4b2f      	ldr	r3, [pc, #188]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	4a2d      	ldr	r2, [pc, #180]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005efe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f0a:	78fb      	ldrb	r3, [r7, #3]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	2b80      	cmp	r3, #128	; 0x80
 8005f14:	d0ef      	beq.n	8005ef6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f16:	4b27      	ldr	r3, [pc, #156]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f1c3 0307 	rsb	r3, r3, #7
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d00a      	beq.n	8005f38 <xPortStartScheduler+0xb8>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	60bb      	str	r3, [r7, #8]
}
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f38:	4b1e      	ldr	r3, [pc, #120]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f42:	4b1c      	ldr	r3, [pc, #112]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f4a:	4a1a      	ldr	r2, [pc, #104]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005f4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f56:	4b18      	ldr	r3, [pc, #96]	; (8005fb8 <xPortStartScheduler+0x138>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a17      	ldr	r2, [pc, #92]	; (8005fb8 <xPortStartScheduler+0x138>)
 8005f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f62:	4b15      	ldr	r3, [pc, #84]	; (8005fb8 <xPortStartScheduler+0x138>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a14      	ldr	r2, [pc, #80]	; (8005fb8 <xPortStartScheduler+0x138>)
 8005f68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f6e:	f000 f8dd 	bl	800612c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f72:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <xPortStartScheduler+0x13c>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f78:	f000 f8fc 	bl	8006174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f7c:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <xPortStartScheduler+0x140>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a0f      	ldr	r2, [pc, #60]	; (8005fc0 <xPortStartScheduler+0x140>)
 8005f82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f88:	f7ff ff66 	bl	8005e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f8c:	f7ff f848 	bl	8005020 <vTaskSwitchContext>
	prvTaskExitError();
 8005f90:	f7ff ff1e 	bl	8005dd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	e000ed00 	.word	0xe000ed00
 8005fa4:	410fc271 	.word	0x410fc271
 8005fa8:	410fc270 	.word	0x410fc270
 8005fac:	e000e400 	.word	0xe000e400
 8005fb0:	20000f78 	.word	0x20000f78
 8005fb4:	20000f7c 	.word	0x20000f7c
 8005fb8:	e000ed20 	.word	0xe000ed20
 8005fbc:	20000054 	.word	0x20000054
 8005fc0:	e000ef34 	.word	0xe000ef34

08005fc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	607b      	str	r3, [r7, #4]
}
 8005fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fde:	4b0f      	ldr	r3, [pc, #60]	; (800601c <vPortEnterCritical+0x58>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	4a0d      	ldr	r2, [pc, #52]	; (800601c <vPortEnterCritical+0x58>)
 8005fe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	; (800601c <vPortEnterCritical+0x58>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d10f      	bne.n	8006010 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <vPortEnterCritical+0x5c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <vPortEnterCritical+0x4c>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	603b      	str	r3, [r7, #0]
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <vPortEnterCritical+0x4a>
	}
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	20000054 	.word	0x20000054
 8006020:	e000ed04 	.word	0xe000ed04

08006024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800602a:	4b12      	ldr	r3, [pc, #72]	; (8006074 <vPortExitCritical+0x50>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <vPortExitCritical+0x24>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	607b      	str	r3, [r7, #4]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006048:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <vPortExitCritical+0x50>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3b01      	subs	r3, #1
 800604e:	4a09      	ldr	r2, [pc, #36]	; (8006074 <vPortExitCritical+0x50>)
 8006050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006052:	4b08      	ldr	r3, [pc, #32]	; (8006074 <vPortExitCritical+0x50>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d105      	bne.n	8006066 <vPortExitCritical+0x42>
 800605a:	2300      	movs	r3, #0
 800605c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	f383 8811 	msr	BASEPRI, r3
}
 8006064:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000054 	.word	0x20000054
	...

08006080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006080:	f3ef 8009 	mrs	r0, PSP
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	4b15      	ldr	r3, [pc, #84]	; (80060e0 <pxCurrentTCBConst>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	f01e 0f10 	tst.w	lr, #16
 8006090:	bf08      	it	eq
 8006092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609a:	6010      	str	r0, [r2, #0]
 800609c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060a4:	f380 8811 	msr	BASEPRI, r0
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f7fe ffb6 	bl	8005020 <vTaskSwitchContext>
 80060b4:	f04f 0000 	mov.w	r0, #0
 80060b8:	f380 8811 	msr	BASEPRI, r0
 80060bc:	bc09      	pop	{r0, r3}
 80060be:	6819      	ldr	r1, [r3, #0]
 80060c0:	6808      	ldr	r0, [r1, #0]
 80060c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c6:	f01e 0f10 	tst.w	lr, #16
 80060ca:	bf08      	it	eq
 80060cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060d0:	f380 8809 	msr	PSP, r0
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	f3af 8000 	nop.w

080060e0 <pxCurrentTCBConst>:
 80060e0:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop

080060e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	607b      	str	r3, [r7, #4]
}
 8006100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006102:	f7fe fed3 	bl	8004eac <xTaskIncrementTick>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <xPortSysTickHandler+0x40>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	2300      	movs	r3, #0
 8006116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f383 8811 	msr	BASEPRI, r3
}
 800611e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <vPortSetupTimerInterrupt+0x34>)
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <vPortSetupTimerInterrupt+0x38>)
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <vPortSetupTimerInterrupt+0x3c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a0a      	ldr	r2, [pc, #40]	; (800616c <vPortSetupTimerInterrupt+0x40>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	099b      	lsrs	r3, r3, #6
 8006148:	4a09      	ldr	r2, [pc, #36]	; (8006170 <vPortSetupTimerInterrupt+0x44>)
 800614a:	3b01      	subs	r3, #1
 800614c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800614e:	4b04      	ldr	r3, [pc, #16]	; (8006160 <vPortSetupTimerInterrupt+0x34>)
 8006150:	2207      	movs	r2, #7
 8006152:	601a      	str	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	e000e010 	.word	0xe000e010
 8006164:	e000e018 	.word	0xe000e018
 8006168:	2000001c 	.word	0x2000001c
 800616c:	10624dd3 	.word	0x10624dd3
 8006170:	e000e014 	.word	0xe000e014

08006174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006184 <vPortEnableVFP+0x10>
 8006178:	6801      	ldr	r1, [r0, #0]
 800617a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800617e:	6001      	str	r1, [r0, #0]
 8006180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006182:	bf00      	nop
 8006184:	e000ed88 	.word	0xe000ed88

08006188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800618e:	f3ef 8305 	mrs	r3, IPSR
 8006192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b0f      	cmp	r3, #15
 8006198:	d914      	bls.n	80061c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800619a:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <vPortValidateInterruptPriority+0x70>)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061a4:	4b15      	ldr	r3, [pc, #84]	; (80061fc <vPortValidateInterruptPriority+0x74>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	7afa      	ldrb	r2, [r7, #11]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d20a      	bcs.n	80061c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	607b      	str	r3, [r7, #4]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061c4:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <vPortValidateInterruptPriority+0x78>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061cc:	4b0d      	ldr	r3, [pc, #52]	; (8006204 <vPortValidateInterruptPriority+0x7c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d90a      	bls.n	80061ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	603b      	str	r3, [r7, #0]
}
 80061e6:	bf00      	nop
 80061e8:	e7fe      	b.n	80061e8 <vPortValidateInterruptPriority+0x60>
	}
 80061ea:	bf00      	nop
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	e000e3f0 	.word	0xe000e3f0
 80061fc:	20000f78 	.word	0x20000f78
 8006200:	e000ed0c 	.word	0xe000ed0c
 8006204:	20000f7c 	.word	0x20000f7c

08006208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08a      	sub	sp, #40	; 0x28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006210:	2300      	movs	r3, #0
 8006212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006214:	f7fe fd8e 	bl	8004d34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006218:	4b5b      	ldr	r3, [pc, #364]	; (8006388 <pvPortMalloc+0x180>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006220:	f000 f920 	bl	8006464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006224:	4b59      	ldr	r3, [pc, #356]	; (800638c <pvPortMalloc+0x184>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4013      	ands	r3, r2
 800622c:	2b00      	cmp	r3, #0
 800622e:	f040 8093 	bne.w	8006358 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01d      	beq.n	8006274 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006238:	2208      	movs	r2, #8
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4413      	add	r3, r2
 800623e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	2b00      	cmp	r3, #0
 8006248:	d014      	beq.n	8006274 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f023 0307 	bic.w	r3, r3, #7
 8006250:	3308      	adds	r3, #8
 8006252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <pvPortMalloc+0x6c>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	617b      	str	r3, [r7, #20]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d06e      	beq.n	8006358 <pvPortMalloc+0x150>
 800627a:	4b45      	ldr	r3, [pc, #276]	; (8006390 <pvPortMalloc+0x188>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	429a      	cmp	r2, r3
 8006282:	d869      	bhi.n	8006358 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006284:	4b43      	ldr	r3, [pc, #268]	; (8006394 <pvPortMalloc+0x18c>)
 8006286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006288:	4b42      	ldr	r3, [pc, #264]	; (8006394 <pvPortMalloc+0x18c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800628e:	e004      	b.n	800629a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d903      	bls.n	80062ac <pvPortMalloc+0xa4>
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f1      	bne.n	8006290 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062ac:	4b36      	ldr	r3, [pc, #216]	; (8006388 <pvPortMalloc+0x180>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d050      	beq.n	8006358 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2208      	movs	r2, #8
 80062bc:	4413      	add	r3, r2
 80062be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	1ad2      	subs	r2, r2, r3
 80062d0:	2308      	movs	r3, #8
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d91f      	bls.n	8006318 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4413      	add	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <pvPortMalloc+0xf8>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	613b      	str	r3, [r7, #16]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	1ad2      	subs	r2, r2, r3
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006312:	69b8      	ldr	r0, [r7, #24]
 8006314:	f000 f908 	bl	8006528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006318:	4b1d      	ldr	r3, [pc, #116]	; (8006390 <pvPortMalloc+0x188>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	4a1b      	ldr	r2, [pc, #108]	; (8006390 <pvPortMalloc+0x188>)
 8006324:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006326:	4b1a      	ldr	r3, [pc, #104]	; (8006390 <pvPortMalloc+0x188>)
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <pvPortMalloc+0x190>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	d203      	bcs.n	800633a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006332:	4b17      	ldr	r3, [pc, #92]	; (8006390 <pvPortMalloc+0x188>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a18      	ldr	r2, [pc, #96]	; (8006398 <pvPortMalloc+0x190>)
 8006338:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	4b13      	ldr	r3, [pc, #76]	; (800638c <pvPortMalloc+0x184>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	431a      	orrs	r2, r3
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800634e:	4b13      	ldr	r3, [pc, #76]	; (800639c <pvPortMalloc+0x194>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3301      	adds	r3, #1
 8006354:	4a11      	ldr	r2, [pc, #68]	; (800639c <pvPortMalloc+0x194>)
 8006356:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006358:	f7fe fcfa 	bl	8004d50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <pvPortMalloc+0x174>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	60fb      	str	r3, [r7, #12]
}
 8006378:	bf00      	nop
 800637a:	e7fe      	b.n	800637a <pvPortMalloc+0x172>
	return pvReturn;
 800637c:	69fb      	ldr	r3, [r7, #28]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3728      	adds	r7, #40	; 0x28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20004b88 	.word	0x20004b88
 800638c:	20004b9c 	.word	0x20004b9c
 8006390:	20004b8c 	.word	0x20004b8c
 8006394:	20004b80 	.word	0x20004b80
 8006398:	20004b90 	.word	0x20004b90
 800639c:	20004b94 	.word	0x20004b94

080063a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d04d      	beq.n	800644e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063b2:	2308      	movs	r3, #8
 80063b4:	425b      	negs	r3, r3
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4413      	add	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	4b24      	ldr	r3, [pc, #144]	; (8006458 <vPortFree+0xb8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4013      	ands	r3, r2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <vPortFree+0x44>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	60fb      	str	r3, [r7, #12]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <vPortFree+0x62>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	60bb      	str	r3, [r7, #8]
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	4b14      	ldr	r3, [pc, #80]	; (8006458 <vPortFree+0xb8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4013      	ands	r3, r2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01e      	beq.n	800644e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d11a      	bne.n	800644e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	4b0e      	ldr	r3, [pc, #56]	; (8006458 <vPortFree+0xb8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	43db      	mvns	r3, r3
 8006422:	401a      	ands	r2, r3
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006428:	f7fe fc84 	bl	8004d34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <vPortFree+0xbc>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4413      	add	r3, r2
 8006436:	4a09      	ldr	r2, [pc, #36]	; (800645c <vPortFree+0xbc>)
 8006438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800643a:	6938      	ldr	r0, [r7, #16]
 800643c:	f000 f874 	bl	8006528 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006440:	4b07      	ldr	r3, [pc, #28]	; (8006460 <vPortFree+0xc0>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3301      	adds	r3, #1
 8006446:	4a06      	ldr	r2, [pc, #24]	; (8006460 <vPortFree+0xc0>)
 8006448:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800644a:	f7fe fc81 	bl	8004d50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800644e:	bf00      	nop
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20004b9c 	.word	0x20004b9c
 800645c:	20004b8c 	.word	0x20004b8c
 8006460:	20004b98 	.word	0x20004b98

08006464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800646a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800646e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006470:	4b27      	ldr	r3, [pc, #156]	; (8006510 <prvHeapInit+0xac>)
 8006472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00c      	beq.n	8006498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3307      	adds	r3, #7
 8006482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0307 	bic.w	r3, r3, #7
 800648a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	4a1f      	ldr	r2, [pc, #124]	; (8006510 <prvHeapInit+0xac>)
 8006494:	4413      	add	r3, r2
 8006496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800649c:	4a1d      	ldr	r2, [pc, #116]	; (8006514 <prvHeapInit+0xb0>)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064a2:	4b1c      	ldr	r3, [pc, #112]	; (8006514 <prvHeapInit+0xb0>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	4413      	add	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064b0:	2208      	movs	r2, #8
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0307 	bic.w	r3, r3, #7
 80064be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4a15      	ldr	r2, [pc, #84]	; (8006518 <prvHeapInit+0xb4>)
 80064c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064c6:	4b14      	ldr	r3, [pc, #80]	; (8006518 <prvHeapInit+0xb4>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2200      	movs	r2, #0
 80064cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064ce:	4b12      	ldr	r3, [pc, #72]	; (8006518 <prvHeapInit+0xb4>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064e4:	4b0c      	ldr	r3, [pc, #48]	; (8006518 <prvHeapInit+0xb4>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	4a0a      	ldr	r2, [pc, #40]	; (800651c <prvHeapInit+0xb8>)
 80064f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	4a09      	ldr	r2, [pc, #36]	; (8006520 <prvHeapInit+0xbc>)
 80064fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064fc:	4b09      	ldr	r3, [pc, #36]	; (8006524 <prvHeapInit+0xc0>)
 80064fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006502:	601a      	str	r2, [r3, #0]
}
 8006504:	bf00      	nop
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	20000f80 	.word	0x20000f80
 8006514:	20004b80 	.word	0x20004b80
 8006518:	20004b88 	.word	0x20004b88
 800651c:	20004b90 	.word	0x20004b90
 8006520:	20004b8c 	.word	0x20004b8c
 8006524:	20004b9c 	.word	0x20004b9c

08006528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006530:	4b28      	ldr	r3, [pc, #160]	; (80065d4 <prvInsertBlockIntoFreeList+0xac>)
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	e002      	b.n	800653c <prvInsertBlockIntoFreeList+0x14>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	429a      	cmp	r2, r3
 8006544:	d8f7      	bhi.n	8006536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	4413      	add	r3, r2
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	429a      	cmp	r2, r3
 8006556:	d108      	bne.n	800656a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	441a      	add	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	441a      	add	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d118      	bne.n	80065b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d00d      	beq.n	80065a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	441a      	add	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e008      	b.n	80065b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <prvInsertBlockIntoFreeList+0xb0>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	e003      	b.n	80065b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d002      	beq.n	80065c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20004b80 	.word	0x20004b80
 80065d8:	20004b88 	.word	0x20004b88

080065dc <memset>:
 80065dc:	4402      	add	r2, r0
 80065de:	4603      	mov	r3, r0
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d100      	bne.n	80065e6 <memset+0xa>
 80065e4:	4770      	bx	lr
 80065e6:	f803 1b01 	strb.w	r1, [r3], #1
 80065ea:	e7f9      	b.n	80065e0 <memset+0x4>

080065ec <_reclaim_reent>:
 80065ec:	4b29      	ldr	r3, [pc, #164]	; (8006694 <_reclaim_reent+0xa8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4283      	cmp	r3, r0
 80065f2:	b570      	push	{r4, r5, r6, lr}
 80065f4:	4604      	mov	r4, r0
 80065f6:	d04b      	beq.n	8006690 <_reclaim_reent+0xa4>
 80065f8:	69c3      	ldr	r3, [r0, #28]
 80065fa:	b143      	cbz	r3, 800660e <_reclaim_reent+0x22>
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d144      	bne.n	800668c <_reclaim_reent+0xa0>
 8006602:	69e3      	ldr	r3, [r4, #28]
 8006604:	6819      	ldr	r1, [r3, #0]
 8006606:	b111      	cbz	r1, 800660e <_reclaim_reent+0x22>
 8006608:	4620      	mov	r0, r4
 800660a:	f000 f879 	bl	8006700 <_free_r>
 800660e:	6961      	ldr	r1, [r4, #20]
 8006610:	b111      	cbz	r1, 8006618 <_reclaim_reent+0x2c>
 8006612:	4620      	mov	r0, r4
 8006614:	f000 f874 	bl	8006700 <_free_r>
 8006618:	69e1      	ldr	r1, [r4, #28]
 800661a:	b111      	cbz	r1, 8006622 <_reclaim_reent+0x36>
 800661c:	4620      	mov	r0, r4
 800661e:	f000 f86f 	bl	8006700 <_free_r>
 8006622:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006624:	b111      	cbz	r1, 800662c <_reclaim_reent+0x40>
 8006626:	4620      	mov	r0, r4
 8006628:	f000 f86a 	bl	8006700 <_free_r>
 800662c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800662e:	b111      	cbz	r1, 8006636 <_reclaim_reent+0x4a>
 8006630:	4620      	mov	r0, r4
 8006632:	f000 f865 	bl	8006700 <_free_r>
 8006636:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006638:	b111      	cbz	r1, 8006640 <_reclaim_reent+0x54>
 800663a:	4620      	mov	r0, r4
 800663c:	f000 f860 	bl	8006700 <_free_r>
 8006640:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006642:	b111      	cbz	r1, 800664a <_reclaim_reent+0x5e>
 8006644:	4620      	mov	r0, r4
 8006646:	f000 f85b 	bl	8006700 <_free_r>
 800664a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800664c:	b111      	cbz	r1, 8006654 <_reclaim_reent+0x68>
 800664e:	4620      	mov	r0, r4
 8006650:	f000 f856 	bl	8006700 <_free_r>
 8006654:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006656:	b111      	cbz	r1, 800665e <_reclaim_reent+0x72>
 8006658:	4620      	mov	r0, r4
 800665a:	f000 f851 	bl	8006700 <_free_r>
 800665e:	6a23      	ldr	r3, [r4, #32]
 8006660:	b1b3      	cbz	r3, 8006690 <_reclaim_reent+0xa4>
 8006662:	4620      	mov	r0, r4
 8006664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006668:	4718      	bx	r3
 800666a:	5949      	ldr	r1, [r1, r5]
 800666c:	b941      	cbnz	r1, 8006680 <_reclaim_reent+0x94>
 800666e:	3504      	adds	r5, #4
 8006670:	69e3      	ldr	r3, [r4, #28]
 8006672:	2d80      	cmp	r5, #128	; 0x80
 8006674:	68d9      	ldr	r1, [r3, #12]
 8006676:	d1f8      	bne.n	800666a <_reclaim_reent+0x7e>
 8006678:	4620      	mov	r0, r4
 800667a:	f000 f841 	bl	8006700 <_free_r>
 800667e:	e7c0      	b.n	8006602 <_reclaim_reent+0x16>
 8006680:	680e      	ldr	r6, [r1, #0]
 8006682:	4620      	mov	r0, r4
 8006684:	f000 f83c 	bl	8006700 <_free_r>
 8006688:	4631      	mov	r1, r6
 800668a:	e7ef      	b.n	800666c <_reclaim_reent+0x80>
 800668c:	2500      	movs	r5, #0
 800668e:	e7ef      	b.n	8006670 <_reclaim_reent+0x84>
 8006690:	bd70      	pop	{r4, r5, r6, pc}
 8006692:	bf00      	nop
 8006694:	200000a4 	.word	0x200000a4

08006698 <__libc_init_array>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	4d0d      	ldr	r5, [pc, #52]	; (80066d0 <__libc_init_array+0x38>)
 800669c:	4c0d      	ldr	r4, [pc, #52]	; (80066d4 <__libc_init_array+0x3c>)
 800669e:	1b64      	subs	r4, r4, r5
 80066a0:	10a4      	asrs	r4, r4, #2
 80066a2:	2600      	movs	r6, #0
 80066a4:	42a6      	cmp	r6, r4
 80066a6:	d109      	bne.n	80066bc <__libc_init_array+0x24>
 80066a8:	4d0b      	ldr	r5, [pc, #44]	; (80066d8 <__libc_init_array+0x40>)
 80066aa:	4c0c      	ldr	r4, [pc, #48]	; (80066dc <__libc_init_array+0x44>)
 80066ac:	f000 f880 	bl	80067b0 <_init>
 80066b0:	1b64      	subs	r4, r4, r5
 80066b2:	10a4      	asrs	r4, r4, #2
 80066b4:	2600      	movs	r6, #0
 80066b6:	42a6      	cmp	r6, r4
 80066b8:	d105      	bne.n	80066c6 <__libc_init_array+0x2e>
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c0:	4798      	blx	r3
 80066c2:	3601      	adds	r6, #1
 80066c4:	e7ee      	b.n	80066a4 <__libc_init_array+0xc>
 80066c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ca:	4798      	blx	r3
 80066cc:	3601      	adds	r6, #1
 80066ce:	e7f2      	b.n	80066b6 <__libc_init_array+0x1e>
 80066d0:	08006868 	.word	0x08006868
 80066d4:	08006868 	.word	0x08006868
 80066d8:	08006868 	.word	0x08006868
 80066dc:	0800686c 	.word	0x0800686c

080066e0 <__retarget_lock_acquire_recursive>:
 80066e0:	4770      	bx	lr

080066e2 <__retarget_lock_release_recursive>:
 80066e2:	4770      	bx	lr

080066e4 <memcpy>:
 80066e4:	440a      	add	r2, r1
 80066e6:	4291      	cmp	r1, r2
 80066e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066ec:	d100      	bne.n	80066f0 <memcpy+0xc>
 80066ee:	4770      	bx	lr
 80066f0:	b510      	push	{r4, lr}
 80066f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066fa:	4291      	cmp	r1, r2
 80066fc:	d1f9      	bne.n	80066f2 <memcpy+0xe>
 80066fe:	bd10      	pop	{r4, pc}

08006700 <_free_r>:
 8006700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006702:	2900      	cmp	r1, #0
 8006704:	d044      	beq.n	8006790 <_free_r+0x90>
 8006706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800670a:	9001      	str	r0, [sp, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f1a1 0404 	sub.w	r4, r1, #4
 8006712:	bfb8      	it	lt
 8006714:	18e4      	addlt	r4, r4, r3
 8006716:	f000 f83f 	bl	8006798 <__malloc_lock>
 800671a:	4a1e      	ldr	r2, [pc, #120]	; (8006794 <_free_r+0x94>)
 800671c:	9801      	ldr	r0, [sp, #4]
 800671e:	6813      	ldr	r3, [r2, #0]
 8006720:	b933      	cbnz	r3, 8006730 <_free_r+0x30>
 8006722:	6063      	str	r3, [r4, #4]
 8006724:	6014      	str	r4, [r2, #0]
 8006726:	b003      	add	sp, #12
 8006728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800672c:	f000 b83a 	b.w	80067a4 <__malloc_unlock>
 8006730:	42a3      	cmp	r3, r4
 8006732:	d908      	bls.n	8006746 <_free_r+0x46>
 8006734:	6825      	ldr	r5, [r4, #0]
 8006736:	1961      	adds	r1, r4, r5
 8006738:	428b      	cmp	r3, r1
 800673a:	bf01      	itttt	eq
 800673c:	6819      	ldreq	r1, [r3, #0]
 800673e:	685b      	ldreq	r3, [r3, #4]
 8006740:	1949      	addeq	r1, r1, r5
 8006742:	6021      	streq	r1, [r4, #0]
 8006744:	e7ed      	b.n	8006722 <_free_r+0x22>
 8006746:	461a      	mov	r2, r3
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	b10b      	cbz	r3, 8006750 <_free_r+0x50>
 800674c:	42a3      	cmp	r3, r4
 800674e:	d9fa      	bls.n	8006746 <_free_r+0x46>
 8006750:	6811      	ldr	r1, [r2, #0]
 8006752:	1855      	adds	r5, r2, r1
 8006754:	42a5      	cmp	r5, r4
 8006756:	d10b      	bne.n	8006770 <_free_r+0x70>
 8006758:	6824      	ldr	r4, [r4, #0]
 800675a:	4421      	add	r1, r4
 800675c:	1854      	adds	r4, r2, r1
 800675e:	42a3      	cmp	r3, r4
 8006760:	6011      	str	r1, [r2, #0]
 8006762:	d1e0      	bne.n	8006726 <_free_r+0x26>
 8006764:	681c      	ldr	r4, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	6053      	str	r3, [r2, #4]
 800676a:	440c      	add	r4, r1
 800676c:	6014      	str	r4, [r2, #0]
 800676e:	e7da      	b.n	8006726 <_free_r+0x26>
 8006770:	d902      	bls.n	8006778 <_free_r+0x78>
 8006772:	230c      	movs	r3, #12
 8006774:	6003      	str	r3, [r0, #0]
 8006776:	e7d6      	b.n	8006726 <_free_r+0x26>
 8006778:	6825      	ldr	r5, [r4, #0]
 800677a:	1961      	adds	r1, r4, r5
 800677c:	428b      	cmp	r3, r1
 800677e:	bf04      	itt	eq
 8006780:	6819      	ldreq	r1, [r3, #0]
 8006782:	685b      	ldreq	r3, [r3, #4]
 8006784:	6063      	str	r3, [r4, #4]
 8006786:	bf04      	itt	eq
 8006788:	1949      	addeq	r1, r1, r5
 800678a:	6021      	streq	r1, [r4, #0]
 800678c:	6054      	str	r4, [r2, #4]
 800678e:	e7ca      	b.n	8006726 <_free_r+0x26>
 8006790:	b003      	add	sp, #12
 8006792:	bd30      	pop	{r4, r5, pc}
 8006794:	20004cdc 	.word	0x20004cdc

08006798 <__malloc_lock>:
 8006798:	4801      	ldr	r0, [pc, #4]	; (80067a0 <__malloc_lock+0x8>)
 800679a:	f7ff bfa1 	b.w	80066e0 <__retarget_lock_acquire_recursive>
 800679e:	bf00      	nop
 80067a0:	20004cd8 	.word	0x20004cd8

080067a4 <__malloc_unlock>:
 80067a4:	4801      	ldr	r0, [pc, #4]	; (80067ac <__malloc_unlock+0x8>)
 80067a6:	f7ff bf9c 	b.w	80066e2 <__retarget_lock_release_recursive>
 80067aa:	bf00      	nop
 80067ac:	20004cd8 	.word	0x20004cd8

080067b0 <_init>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	bf00      	nop
 80067b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b6:	bc08      	pop	{r3}
 80067b8:	469e      	mov	lr, r3
 80067ba:	4770      	bx	lr

080067bc <_fini>:
 80067bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067be:	bf00      	nop
 80067c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c2:	bc08      	pop	{r3}
 80067c4:	469e      	mov	lr, r3
 80067c6:	4770      	bx	lr
