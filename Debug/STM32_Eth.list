
STM32_Eth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d98  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08008f48  08008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff0  08008ff0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff8  08008ff8  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08009000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          00005414  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200054c0  200054c0  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001538b  00000000  00000000  0002011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d48  00000000  00000000  000354aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001288  00000000  00000000  000391f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e29  00000000  00000000  0003a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002648b  00000000  00000000  0003b2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000163f3  00000000  00000000  00061734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e0729  00000000  00000000  00077b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004de8  00000000  00000000  00158250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0015d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008f30 	.word	0x08008f30

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	08008f30 	.word	0x08008f30

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8000500:	2204      	movs	r2, #4
 8000502:	4909      	ldr	r1, [pc, #36]	; (8000528 <default_ip_assign+0x2c>)
 8000504:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000508:	f003 fbf0 	bl	8003cec <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 800050c:	2204      	movs	r2, #4
 800050e:	4907      	ldr	r1, [pc, #28]	; (800052c <default_ip_assign+0x30>)
 8000510:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000514:	f003 fbea 	bl	8003cec <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8000518:	2204      	movs	r2, #4
 800051a:	4905      	ldr	r1, [pc, #20]	; (8000530 <default_ip_assign+0x34>)
 800051c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000520:	f003 fbe4 	bl	8003cec <WIZCHIP_WRITE_BUF>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200000d8 	.word	0x200000d8
 800052c:	200000e0 	.word	0x200000e0
 8000530:	200000dc 	.word	0x200000dc

08000534 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2000      	movs	r0, #0
 800053c:	f003 fb28 	bl	8003b90 <WIZCHIP_WRITE>
   getMR(); // for delay
 8000540:	2000      	movs	r0, #0
 8000542:	f003 fad9 	bl	8003af8 <WIZCHIP_READ>
   default_ip_assign();
 8000546:	f7ff ffd9 	bl	80004fc <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 800054a:	2206      	movs	r2, #6
 800054c:	4903      	ldr	r1, [pc, #12]	; (800055c <default_ip_update+0x28>)
 800054e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000552:	f003 fbcb 	bl	8003cec <WIZCHIP_WRITE_BUF>
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200000f8 	.word	0x200000f8

08000560 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	2000      	movs	r0, #0
 8000568:	f003 fb12 	bl	8003b90 <WIZCHIP_WRITE>
	getMR(); // for delay
 800056c:	2000      	movs	r0, #0
 800056e:	f003 fac3 	bl	8003af8 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8000572:	2206      	movs	r2, #6
 8000574:	4903      	ldr	r1, [pc, #12]	; (8000584 <default_ip_conflict+0x24>)
 8000576:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800057a:	f003 fbb7 	bl	8003cec <WIZCHIP_WRITE_BUF>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000f8 	.word	0x200000f8

08000588 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <reg_dhcp_cbfunc+0x50>)
 8000596:	4a11      	ldr	r2, [pc, #68]	; (80005dc <reg_dhcp_cbfunc+0x54>)
 8000598:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <reg_dhcp_cbfunc+0x58>)
 800059c:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <reg_dhcp_cbfunc+0x5c>)
 800059e:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <reg_dhcp_cbfunc+0x60>)
 80005a2:	4a12      	ldr	r2, [pc, #72]	; (80005ec <reg_dhcp_cbfunc+0x64>)
 80005a4:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d002      	beq.n	80005b2 <reg_dhcp_cbfunc+0x2a>
 80005ac:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <reg_dhcp_cbfunc+0x50>)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <reg_dhcp_cbfunc+0x36>
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <reg_dhcp_cbfunc+0x58>)
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <reg_dhcp_cbfunc+0x42>
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <reg_dhcp_cbfunc+0x60>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000010 	.word	0x20000010
 80005dc:	080004fd 	.word	0x080004fd
 80005e0:	20000014 	.word	0x20000014
 80005e4:	08000535 	.word	0x08000535
 80005e8:	20000018 	.word	0x20000018
 80005ec:	08000561 	.word	0x08000561

080005f0 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 80005f6:	463b      	mov	r3, r7
 80005f8:	2206      	movs	r2, #6
 80005fa:	4619      	mov	r1, r3
 80005fc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000600:	f003 fb14 	bl	8003c2c <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8000604:	4b72      	ldr	r3, [pc, #456]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 800060c:	4b70      	ldr	r3, [pc, #448]	; (80007d0 <makeDHCPMSG+0x1e0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2201      	movs	r2, #1
 8000612:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8000614:	4b6e      	ldr	r3, [pc, #440]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2206      	movs	r2, #6
 800061a:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 800061c:	4b6c      	ldr	r3, [pc, #432]	; (80007d0 <makeDHCPMSG+0x1e0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8000624:	4b6a      	ldr	r3, [pc, #424]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3304      	adds	r3, #4
 800062a:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 800062c:	4b69      	ldr	r3, [pc, #420]	; (80007d4 <makeDHCPMSG+0x1e4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	0e1b      	lsrs	r3, r3, #24
 8000632:	b2da      	uxtb	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8000638:	4b66      	ldr	r3, [pc, #408]	; (80007d4 <makeDHCPMSG+0x1e4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	0c1a      	lsrs	r2, r3, #16
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	3301      	adds	r3, #1
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8000646:	4b63      	ldr	r3, [pc, #396]	; (80007d4 <makeDHCPMSG+0x1e4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a1a      	lsrs	r2, r3, #8
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	3302      	adds	r3, #2
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8000654:	4b5f      	ldr	r3, [pc, #380]	; (80007d4 <makeDHCPMSG+0x1e4>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	3303      	adds	r3, #3
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8000660:	4b5b      	ldr	r3, [pc, #364]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8000668:	4b59      	ldr	r3, [pc, #356]	; (80007d0 <makeDHCPMSG+0x1e0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	330a      	adds	r3, #10
 800066e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	3301      	adds	r3, #1
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 800067e:	4b54      	ldr	r3, [pc, #336]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2200      	movs	r2, #0
 8000684:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8000686:	4b52      	ldr	r3, [pc, #328]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2200      	movs	r2, #0
 800068c:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 800068e:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2200      	movs	r2, #0
 8000694:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8000696:	4b4e      	ldr	r3, [pc, #312]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2200      	movs	r2, #0
 800069c:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 800069e:	4b4c      	ldr	r3, [pc, #304]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2200      	movs	r2, #0
 80006a4:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 80006a6:	4b4a      	ldr	r3, [pc, #296]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2200      	movs	r2, #0
 80006ac:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 80006ae:	4b48      	ldr	r3, [pc, #288]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2200      	movs	r2, #0
 80006b4:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 80006b6:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2200      	movs	r2, #0
 80006bc:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 80006be:	4b44      	ldr	r3, [pc, #272]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 80006c6:	4b42      	ldr	r3, [pc, #264]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 80006ce:	4b40      	ldr	r3, [pc, #256]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2200      	movs	r2, #0
 80006d4:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 80006d6:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2200      	movs	r2, #0
 80006dc:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 80006de:	4b3c      	ldr	r3, [pc, #240]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 80006e6:	4b3a      	ldr	r3, [pc, #232]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2200      	movs	r2, #0
 80006ec:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 80006ee:	4b38      	ldr	r3, [pc, #224]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2200      	movs	r2, #0
 80006f4:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 80006f6:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2200      	movs	r2, #0
 80006fc:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a35      	ldr	r2, [pc, #212]	; (80007d8 <makeDHCPMSG+0x1e8>)
 8000704:	7812      	ldrb	r2, [r2, #0]
 8000706:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8000708:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <makeDHCPMSG+0x1e0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a32      	ldr	r2, [pc, #200]	; (80007d8 <makeDHCPMSG+0x1e8>)
 800070e:	7852      	ldrb	r2, [r2, #1]
 8000710:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8000712:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a30      	ldr	r2, [pc, #192]	; (80007d8 <makeDHCPMSG+0x1e8>)
 8000718:	7892      	ldrb	r2, [r2, #2]
 800071a:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 800071c:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <makeDHCPMSG+0x1e0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a2d      	ldr	r2, [pc, #180]	; (80007d8 <makeDHCPMSG+0x1e8>)
 8000722:	78d2      	ldrb	r2, [r2, #3]
 8000724:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a2b      	ldr	r2, [pc, #172]	; (80007d8 <makeDHCPMSG+0x1e8>)
 800072c:	7912      	ldrb	r2, [r2, #4]
 800072e:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a28      	ldr	r2, [pc, #160]	; (80007d8 <makeDHCPMSG+0x1e8>)
 8000738:	7952      	ldrb	r2, [r2, #5]
 800073a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 800073e:	2306      	movs	r3, #6
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	e008      	b.n	8000756 <makeDHCPMSG+0x166>
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	4413      	add	r3, r2
 800074c:	2200      	movs	r2, #0
 800074e:	771a      	strb	r2, [r3, #28]
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	3301      	adds	r3, #1
 8000754:	73fb      	strb	r3, [r7, #15]
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	2b0f      	cmp	r3, #15
 800075a:	d9f3      	bls.n	8000744 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e009      	b.n	8000776 <makeDHCPMSG+0x186>
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	4413      	add	r3, r2
 800076a:	2200      	movs	r2, #0
 800076c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	3301      	adds	r3, #1
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	2b3f      	cmp	r3, #63	; 0x3f
 800077a:	d9f2      	bls.n	8000762 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	e009      	b.n	8000796 <makeDHCPMSG+0x1a6>
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <makeDHCPMSG+0x1e0>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	4413      	add	r3, r2
 800078a:	2200      	movs	r2, #0
 800078c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	3301      	adds	r3, #1
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079a:	2b00      	cmp	r3, #0
 800079c:	daf1      	bge.n	8000782 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2263      	movs	r2, #99	; 0x63
 80007a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2282      	movs	r2, #130	; 0x82
 80007ae:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2253      	movs	r2, #83	; 0x53
 80007b8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <makeDHCPMSG+0x1e0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2263      	movs	r2, #99	; 0x63
 80007c2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000f4 	.word	0x200000f4
 80007d4:	200000f0 	.word	0x200000f0
 80007d8:	200000f8 	.word	0x200000f8

080007dc <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 80007dc:	b5b0      	push	{r4, r5, r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 80007e6:	f7ff ff03 	bl	80005f0 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 80007ea:	4b56      	ldr	r3, [pc, #344]	; (8000944 <send_DHCP_DISCOVER+0x168>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 80007f0:	4b54      	ldr	r3, [pc, #336]	; (8000944 <send_DHCP_DISCOVER+0x168>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 80007f6:	4b53      	ldr	r3, [pc, #332]	; (8000944 <send_DHCP_DISCOVER+0x168>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 80007fc:	4b51      	ldr	r3, [pc, #324]	; (8000944 <send_DHCP_DISCOVER+0x168>)
 80007fe:	2200      	movs	r2, #0
 8000800:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8000802:	4b51      	ldr	r3, [pc, #324]	; (8000948 <send_DHCP_DISCOVER+0x16c>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8000808:	4b4f      	ldr	r3, [pc, #316]	; (8000948 <send_DHCP_DISCOVER+0x16c>)
 800080a:	2200      	movs	r2, #0
 800080c:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 800080e:	4b4e      	ldr	r3, [pc, #312]	; (8000948 <send_DHCP_DISCOVER+0x16c>)
 8000810:	2200      	movs	r2, #0
 8000812:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8000814:	4b4c      	ldr	r3, [pc, #304]	; (8000948 <send_DHCP_DISCOVER+0x16c>)
 8000816:	2200      	movs	r2, #0
 8000818:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 800081a:	2304      	movs	r3, #4
 800081c:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800081e:	4b4b      	ldr	r3, [pc, #300]	; (800094c <send_DHCP_DISCOVER+0x170>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	88bb      	ldrh	r3, [r7, #4]
 8000824:	1c59      	adds	r1, r3, #1
 8000826:	80b9      	strh	r1, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	2235      	movs	r2, #53	; 0x35
 800082c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000830:	4b46      	ldr	r3, [pc, #280]	; (800094c <send_DHCP_DISCOVER+0x170>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	88bb      	ldrh	r3, [r7, #4]
 8000836:	1c59      	adds	r1, r3, #1
 8000838:	80b9      	strh	r1, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	2201      	movs	r2, #1
 800083e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8000842:	4b42      	ldr	r3, [pc, #264]	; (800094c <send_DHCP_DISCOVER+0x170>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	1c59      	adds	r1, r3, #1
 800084a:	80b9      	strh	r1, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	2201      	movs	r2, #1
 8000850:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8000854:	4b3d      	ldr	r3, [pc, #244]	; (800094c <send_DHCP_DISCOVER+0x170>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	88bb      	ldrh	r3, [r7, #4]
 800085a:	1c59      	adds	r1, r3, #1
 800085c:	80b9      	strh	r1, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	223d      	movs	r2, #61	; 0x3d
 8000862:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8000866:	4b39      	ldr	r3, [pc, #228]	; (800094c <send_DHCP_DISCOVER+0x170>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	88bb      	ldrh	r3, [r7, #4]
 800086c:	1c59      	adds	r1, r3, #1
 800086e:	80b9      	strh	r1, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	2207      	movs	r2, #7
 8000874:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000878:	4b34      	ldr	r3, [pc, #208]	; (800094c <send_DHCP_DISCOVER+0x170>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	88bb      	ldrh	r3, [r7, #4]
 800087e:	1c59      	adds	r1, r3, #1
 8000880:	80b9      	strh	r1, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	2201      	movs	r2, #1
 8000886:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800088a:	4b30      	ldr	r3, [pc, #192]	; (800094c <send_DHCP_DISCOVER+0x170>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	88bb      	ldrh	r3, [r7, #4]
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	80b9      	strh	r1, [r7, #4]
 8000894:	4618      	mov	r0, r3
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <send_DHCP_DISCOVER+0x174>)
 8000898:	7819      	ldrb	r1, [r3, #0]
 800089a:	1813      	adds	r3, r2, r0
 800089c:	460a      	mov	r2, r1
 800089e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <send_DHCP_DISCOVER+0x170>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	88bb      	ldrh	r3, [r7, #4]
 80008a8:	1c59      	adds	r1, r3, #1
 80008aa:	80b9      	strh	r1, [r7, #4]
 80008ac:	4618      	mov	r0, r3
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <send_DHCP_DISCOVER+0x174>)
 80008b0:	7859      	ldrb	r1, [r3, #1]
 80008b2:	1813      	adds	r3, r2, r0
 80008b4:	460a      	mov	r2, r1
 80008b6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <send_DHCP_DISCOVER+0x170>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	88bb      	ldrh	r3, [r7, #4]
 80008c0:	1c59      	adds	r1, r3, #1
 80008c2:	80b9      	strh	r1, [r7, #4]
 80008c4:	4618      	mov	r0, r3
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <send_DHCP_DISCOVER+0x174>)
 80008c8:	7899      	ldrb	r1, [r3, #2]
 80008ca:	1813      	adds	r3, r2, r0
 80008cc:	460a      	mov	r2, r1
 80008ce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <send_DHCP_DISCOVER+0x170>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	88bb      	ldrh	r3, [r7, #4]
 80008d8:	1c59      	adds	r1, r3, #1
 80008da:	80b9      	strh	r1, [r7, #4]
 80008dc:	4618      	mov	r0, r3
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <send_DHCP_DISCOVER+0x174>)
 80008e0:	78d9      	ldrb	r1, [r3, #3]
 80008e2:	1813      	adds	r3, r2, r0
 80008e4:	460a      	mov	r2, r1
 80008e6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <send_DHCP_DISCOVER+0x170>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	1c59      	adds	r1, r3, #1
 80008f2:	80b9      	strh	r1, [r7, #4]
 80008f4:	4618      	mov	r0, r3
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <send_DHCP_DISCOVER+0x174>)
 80008f8:	7919      	ldrb	r1, [r3, #4]
 80008fa:	1813      	adds	r3, r2, r0
 80008fc:	460a      	mov	r2, r1
 80008fe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <send_DHCP_DISCOVER+0x170>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	88bb      	ldrh	r3, [r7, #4]
 8000908:	1c59      	adds	r1, r3, #1
 800090a:	80b9      	strh	r1, [r7, #4]
 800090c:	4618      	mov	r0, r3
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <send_DHCP_DISCOVER+0x174>)
 8000910:	7959      	ldrb	r1, [r3, #5]
 8000912:	1813      	adds	r3, r2, r0
 8000914:	460a      	mov	r2, r1
 8000916:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <send_DHCP_DISCOVER+0x170>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	88bb      	ldrh	r3, [r7, #4]
 8000920:	1c59      	adds	r1, r3, #1
 8000922:	80b9      	strh	r1, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	220c      	movs	r2, #12
 8000928:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <send_DHCP_DISCOVER+0x170>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	88bb      	ldrh	r3, [r7, #4]
 8000932:	1c59      	adds	r1, r3, #1
 8000934:	80b9      	strh	r1, [r7, #4]
 8000936:	4413      	add	r3, r2
 8000938:	2200      	movs	r2, #0
 800093a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800093e:	2300      	movs	r3, #0
 8000940:	80fb      	strh	r3, [r7, #6]
 8000942:	e017      	b.n	8000974 <send_DHCP_DISCOVER+0x198>
 8000944:	200000cc 	.word	0x200000cc
 8000948:	200000d0 	.word	0x200000d0
 800094c:	200000f4 	.word	0x200000f4
 8000950:	200000f8 	.word	0x200000f8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8000954:	88f9      	ldrh	r1, [r7, #6]
 8000956:	4b80      	ldr	r3, [pc, #512]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	88bb      	ldrh	r3, [r7, #4]
 800095c:	1c58      	adds	r0, r3, #1
 800095e:	80b8      	strh	r0, [r7, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	4b7e      	ldr	r3, [pc, #504]	; (8000b5c <send_DHCP_DISCOVER+0x380>)
 8000964:	5c59      	ldrb	r1, [r3, r1]
 8000966:	1813      	adds	r3, r2, r0
 8000968:	460a      	mov	r2, r1
 800096a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	3301      	adds	r3, #1
 8000972:	80fb      	strh	r3, [r7, #6]
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <send_DHCP_DISCOVER+0x380>)
 8000978:	5cd3      	ldrb	r3, [r2, r3]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ea      	bne.n	8000954 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800097e:	4b78      	ldr	r3, [pc, #480]	; (8000b60 <send_DHCP_DISCOVER+0x384>)
 8000980:	78db      	ldrb	r3, [r3, #3]
 8000982:	091b      	lsrs	r3, r3, #4
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b74      	ldr	r3, [pc, #464]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000988:	681c      	ldr	r4, [r3, #0]
 800098a:	88bb      	ldrh	r3, [r7, #4]
 800098c:	1c59      	adds	r1, r3, #1
 800098e:	80b9      	strh	r1, [r7, #4]
 8000990:	461d      	mov	r5, r3
 8000992:	4610      	mov	r0, r2
 8000994:	f001 f9c4 	bl	8001d20 <NibbleToHex>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	1963      	adds	r3, r4, r5
 800099e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80009a2:	4b6f      	ldr	r3, [pc, #444]	; (8000b60 <send_DHCP_DISCOVER+0x384>)
 80009a4:	78da      	ldrb	r2, [r3, #3]
 80009a6:	4b6c      	ldr	r3, [pc, #432]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 80009a8:	681c      	ldr	r4, [r3, #0]
 80009aa:	88bb      	ldrh	r3, [r7, #4]
 80009ac:	1c59      	adds	r1, r3, #1
 80009ae:	80b9      	strh	r1, [r7, #4]
 80009b0:	461d      	mov	r5, r3
 80009b2:	4610      	mov	r0, r2
 80009b4:	f001 f9b4 	bl	8001d20 <NibbleToHex>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	1963      	adds	r3, r4, r5
 80009be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80009c2:	4b67      	ldr	r3, [pc, #412]	; (8000b60 <send_DHCP_DISCOVER+0x384>)
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	091b      	lsrs	r3, r3, #4
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b63      	ldr	r3, [pc, #396]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 80009cc:	681c      	ldr	r4, [r3, #0]
 80009ce:	88bb      	ldrh	r3, [r7, #4]
 80009d0:	1c59      	adds	r1, r3, #1
 80009d2:	80b9      	strh	r1, [r7, #4]
 80009d4:	461d      	mov	r5, r3
 80009d6:	4610      	mov	r0, r2
 80009d8:	f001 f9a2 	bl	8001d20 <NibbleToHex>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	1963      	adds	r3, r4, r5
 80009e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80009e6:	4b5e      	ldr	r3, [pc, #376]	; (8000b60 <send_DHCP_DISCOVER+0x384>)
 80009e8:	791a      	ldrb	r2, [r3, #4]
 80009ea:	4b5b      	ldr	r3, [pc, #364]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 80009ec:	681c      	ldr	r4, [r3, #0]
 80009ee:	88bb      	ldrh	r3, [r7, #4]
 80009f0:	1c59      	adds	r1, r3, #1
 80009f2:	80b9      	strh	r1, [r7, #4]
 80009f4:	461d      	mov	r5, r3
 80009f6:	4610      	mov	r0, r2
 80009f8:	f001 f992 	bl	8001d20 <NibbleToHex>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	1963      	adds	r3, r4, r5
 8000a02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8000a06:	4b56      	ldr	r3, [pc, #344]	; (8000b60 <send_DHCP_DISCOVER+0x384>)
 8000a08:	795b      	ldrb	r3, [r3, #5]
 8000a0a:	091b      	lsrs	r3, r3, #4
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b52      	ldr	r3, [pc, #328]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000a10:	681c      	ldr	r4, [r3, #0]
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	1c59      	adds	r1, r3, #1
 8000a16:	80b9      	strh	r1, [r7, #4]
 8000a18:	461d      	mov	r5, r3
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	f001 f980 	bl	8001d20 <NibbleToHex>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	1963      	adds	r3, r4, r5
 8000a26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8000a2a:	4b4d      	ldr	r3, [pc, #308]	; (8000b60 <send_DHCP_DISCOVER+0x384>)
 8000a2c:	795a      	ldrb	r2, [r3, #5]
 8000a2e:	4b4a      	ldr	r3, [pc, #296]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000a30:	681c      	ldr	r4, [r3, #0]
 8000a32:	88bb      	ldrh	r3, [r7, #4]
 8000a34:	1c59      	adds	r1, r3, #1
 8000a36:	80b9      	strh	r1, [r7, #4]
 8000a38:	461d      	mov	r5, r3
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	f001 f970 	bl	8001d20 <NibbleToHex>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	1963      	adds	r3, r4, r5
 8000a46:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	b2d9      	uxtb	r1, r3
 8000a4e:	4b42      	ldr	r3, [pc, #264]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	88b8      	ldrh	r0, [r7, #4]
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	3307      	adds	r3, #7
 8000a58:	1ac3      	subs	r3, r0, r3
 8000a5a:	3106      	adds	r1, #6
 8000a5c:	b2c9      	uxtb	r1, r1
 8000a5e:	4413      	add	r3, r2
 8000a60:	460a      	mov	r2, r1
 8000a62:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8000a66:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	88bb      	ldrh	r3, [r7, #4]
 8000a6c:	1c59      	adds	r1, r3, #1
 8000a6e:	80b9      	strh	r1, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	2237      	movs	r2, #55	; 0x37
 8000a74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8000a78:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	88bb      	ldrh	r3, [r7, #4]
 8000a7e:	1c59      	adds	r1, r3, #1
 8000a80:	80b9      	strh	r1, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	2206      	movs	r2, #6
 8000a86:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8000a8a:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	88bb      	ldrh	r3, [r7, #4]
 8000a90:	1c59      	adds	r1, r3, #1
 8000a92:	80b9      	strh	r1, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	2201      	movs	r2, #1
 8000a98:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	88bb      	ldrh	r3, [r7, #4]
 8000aa2:	1c59      	adds	r1, r3, #1
 8000aa4:	80b9      	strh	r1, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8000aae:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	88bb      	ldrh	r3, [r7, #4]
 8000ab4:	1c59      	adds	r1, r3, #1
 8000ab6:	80b9      	strh	r1, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	2206      	movs	r2, #6
 8000abc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	88bb      	ldrh	r3, [r7, #4]
 8000ac6:	1c59      	adds	r1, r3, #1
 8000ac8:	80b9      	strh	r1, [r7, #4]
 8000aca:	4413      	add	r3, r2
 8000acc:	220f      	movs	r2, #15
 8000ace:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	1c59      	adds	r1, r3, #1
 8000ada:	80b9      	strh	r1, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	223a      	movs	r2, #58	; 0x3a
 8000ae0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	88bb      	ldrh	r3, [r7, #4]
 8000aea:	1c59      	adds	r1, r3, #1
 8000aec:	80b9      	strh	r1, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	223b      	movs	r2, #59	; 0x3b
 8000af2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	88bb      	ldrh	r3, [r7, #4]
 8000afc:	1c59      	adds	r1, r3, #1
 8000afe:	80b9      	strh	r1, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	22ff      	movs	r2, #255	; 0xff
 8000b04:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8000b08:	88bb      	ldrh	r3, [r7, #4]
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	e009      	b.n	8000b22 <send_DHCP_DISCOVER+0x346>
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	4413      	add	r3, r2
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	80fb      	strh	r3, [r7, #6]
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8000b28:	d3f1      	bcc.n	8000b0e <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8000b2a:	23ff      	movs	r3, #255	; 0xff
 8000b2c:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8000b2e:	23ff      	movs	r3, #255	; 0xff
 8000b30:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8000b32:	23ff      	movs	r3, #255	; 0xff
 8000b34:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8000b36:	23ff      	movs	r3, #255	; 0xff
 8000b38:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <send_DHCP_DISCOVER+0x388>)
 8000b3c:	7818      	ldrb	r0, [r3, #0]
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <send_DHCP_DISCOVER+0x37c>)
 8000b40:	6819      	ldr	r1, [r3, #0]
 8000b42:	463b      	mov	r3, r7
 8000b44:	2243      	movs	r2, #67	; 0x43
 8000b46:	9200      	str	r2, [sp, #0]
 8000b48:	f44f 7209 	mov.w	r2, #548	; 0x224
 8000b4c:	f002 fbbe 	bl	80032cc <sendto>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bdb0      	pop	{r4, r5, r7, pc}
 8000b58:	200000f4 	.word	0x200000f4
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	200000f8 	.word	0x200000f8
 8000b64:	200000c8 	.word	0x200000c8

08000b68 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8000b72:	f7ff fd3d 	bl	80005f0 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <send_DHCP_REQUEST+0x7c>)
 8000b78:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d004      	beq.n	8000b8a <send_DHCP_REQUEST+0x22>
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <send_DHCP_REQUEST+0x7c>)
 8000b82:	f993 3000 	ldrsb.w	r3, [r3]
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	d134      	bne.n	8000bf4 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <send_DHCP_REQUEST+0x80>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	330a      	adds	r3, #10
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <send_DHCP_REQUEST+0x80>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	330a      	adds	r3, #10
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <send_DHCP_REQUEST+0x80>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <send_DHCP_REQUEST+0x84>)
 8000ba6:	7812      	ldrb	r2, [r2, #0]
 8000ba8:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <send_DHCP_REQUEST+0x80>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <send_DHCP_REQUEST+0x84>)
 8000bb0:	7852      	ldrb	r2, [r2, #1]
 8000bb2:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <send_DHCP_REQUEST+0x80>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <send_DHCP_REQUEST+0x84>)
 8000bba:	7892      	ldrb	r2, [r2, #2]
 8000bbc:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <send_DHCP_REQUEST+0x80>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <send_DHCP_REQUEST+0x84>)
 8000bc4:	78d2      	ldrb	r2, [r2, #3]
 8000bc6:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <send_DHCP_REQUEST+0x88>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <send_DHCP_REQUEST+0x88>)
 8000bd0:	785b      	ldrb	r3, [r3, #1]
 8000bd2:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <send_DHCP_REQUEST+0x88>)
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <send_DHCP_REQUEST+0x88>)
 8000bdc:	78db      	ldrb	r3, [r3, #3]
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	e010      	b.n	8000c04 <send_DHCP_REQUEST+0x9c>
 8000be2:	bf00      	nop
 8000be4:	200000e8 	.word	0x200000e8
 8000be8:	200000f4 	.word	0x200000f4
 8000bec:	200000d8 	.word	0x200000d8
 8000bf0:	200000cc 	.word	0x200000cc
   }
   else
   {
   	ip[0] = 255;
 8000bf4:	23ff      	movs	r3, #255	; 0xff
 8000bf6:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8000bf8:	23ff      	movs	r3, #255	; 0xff
 8000bfa:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8000bfc:	23ff      	movs	r3, #255	; 0xff
 8000bfe:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8000c00:	23ff      	movs	r3, #255	; 0xff
 8000c02:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8000c04:	2304      	movs	r3, #4
 8000c06:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8000c08:	4b8d      	ldr	r3, [pc, #564]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	897b      	ldrh	r3, [r7, #10]
 8000c0e:	1c59      	adds	r1, r3, #1
 8000c10:	8179      	strh	r1, [r7, #10]
 8000c12:	4413      	add	r3, r2
 8000c14:	2235      	movs	r2, #53	; 0x35
 8000c16:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000c1a:	4b89      	ldr	r3, [pc, #548]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	897b      	ldrh	r3, [r7, #10]
 8000c20:	1c59      	adds	r1, r3, #1
 8000c22:	8179      	strh	r1, [r7, #10]
 8000c24:	4413      	add	r3, r2
 8000c26:	2201      	movs	r2, #1
 8000c28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8000c2c:	4b84      	ldr	r3, [pc, #528]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	897b      	ldrh	r3, [r7, #10]
 8000c32:	1c59      	adds	r1, r3, #1
 8000c34:	8179      	strh	r1, [r7, #10]
 8000c36:	4413      	add	r3, r2
 8000c38:	2203      	movs	r2, #3
 8000c3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8000c3e:	4b80      	ldr	r3, [pc, #512]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	897b      	ldrh	r3, [r7, #10]
 8000c44:	1c59      	adds	r1, r3, #1
 8000c46:	8179      	strh	r1, [r7, #10]
 8000c48:	4413      	add	r3, r2
 8000c4a:	223d      	movs	r2, #61	; 0x3d
 8000c4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8000c50:	4b7b      	ldr	r3, [pc, #492]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	897b      	ldrh	r3, [r7, #10]
 8000c56:	1c59      	adds	r1, r3, #1
 8000c58:	8179      	strh	r1, [r7, #10]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000c62:	4b77      	ldr	r3, [pc, #476]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	897b      	ldrh	r3, [r7, #10]
 8000c68:	1c59      	adds	r1, r3, #1
 8000c6a:	8179      	strh	r1, [r7, #10]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8000c74:	4b72      	ldr	r3, [pc, #456]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	897b      	ldrh	r3, [r7, #10]
 8000c7a:	1c59      	adds	r1, r3, #1
 8000c7c:	8179      	strh	r1, [r7, #10]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	4b70      	ldr	r3, [pc, #448]	; (8000e44 <send_DHCP_REQUEST+0x2dc>)
 8000c82:	7819      	ldrb	r1, [r3, #0]
 8000c84:	1813      	adds	r3, r2, r0
 8000c86:	460a      	mov	r2, r1
 8000c88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8000c8c:	4b6c      	ldr	r3, [pc, #432]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	897b      	ldrh	r3, [r7, #10]
 8000c92:	1c59      	adds	r1, r3, #1
 8000c94:	8179      	strh	r1, [r7, #10]
 8000c96:	4618      	mov	r0, r3
 8000c98:	4b6a      	ldr	r3, [pc, #424]	; (8000e44 <send_DHCP_REQUEST+0x2dc>)
 8000c9a:	7859      	ldrb	r1, [r3, #1]
 8000c9c:	1813      	adds	r3, r2, r0
 8000c9e:	460a      	mov	r2, r1
 8000ca0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8000ca4:	4b66      	ldr	r3, [pc, #408]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	897b      	ldrh	r3, [r7, #10]
 8000caa:	1c59      	adds	r1, r3, #1
 8000cac:	8179      	strh	r1, [r7, #10]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	4b64      	ldr	r3, [pc, #400]	; (8000e44 <send_DHCP_REQUEST+0x2dc>)
 8000cb2:	7899      	ldrb	r1, [r3, #2]
 8000cb4:	1813      	adds	r3, r2, r0
 8000cb6:	460a      	mov	r2, r1
 8000cb8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8000cbc:	4b60      	ldr	r3, [pc, #384]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	897b      	ldrh	r3, [r7, #10]
 8000cc2:	1c59      	adds	r1, r3, #1
 8000cc4:	8179      	strh	r1, [r7, #10]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	4b5e      	ldr	r3, [pc, #376]	; (8000e44 <send_DHCP_REQUEST+0x2dc>)
 8000cca:	78d9      	ldrb	r1, [r3, #3]
 8000ccc:	1813      	adds	r3, r2, r0
 8000cce:	460a      	mov	r2, r1
 8000cd0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8000cd4:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	897b      	ldrh	r3, [r7, #10]
 8000cda:	1c59      	adds	r1, r3, #1
 8000cdc:	8179      	strh	r1, [r7, #10]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	4b58      	ldr	r3, [pc, #352]	; (8000e44 <send_DHCP_REQUEST+0x2dc>)
 8000ce2:	7919      	ldrb	r1, [r3, #4]
 8000ce4:	1813      	adds	r3, r2, r0
 8000ce6:	460a      	mov	r2, r1
 8000ce8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8000cec:	4b54      	ldr	r3, [pc, #336]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	897b      	ldrh	r3, [r7, #10]
 8000cf2:	1c59      	adds	r1, r3, #1
 8000cf4:	8179      	strh	r1, [r7, #10]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	4b52      	ldr	r3, [pc, #328]	; (8000e44 <send_DHCP_REQUEST+0x2dc>)
 8000cfa:	7959      	ldrb	r1, [r3, #5]
 8000cfc:	1813      	adds	r3, r2, r0
 8000cfe:	460a      	mov	r2, r1
 8000d00:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	2bff      	cmp	r3, #255	; 0xff
 8000d08:	f040 8084 	bne.w	8000e14 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8000d0c:	4b4c      	ldr	r3, [pc, #304]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	897b      	ldrh	r3, [r7, #10]
 8000d12:	1c59      	adds	r1, r3, #1
 8000d14:	8179      	strh	r1, [r7, #10]
 8000d16:	4413      	add	r3, r2
 8000d18:	2232      	movs	r2, #50	; 0x32
 8000d1a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8000d1e:	4b48      	ldr	r3, [pc, #288]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	897b      	ldrh	r3, [r7, #10]
 8000d24:	1c59      	adds	r1, r3, #1
 8000d26:	8179      	strh	r1, [r7, #10]
 8000d28:	4413      	add	r3, r2
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8000d30:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	897b      	ldrh	r3, [r7, #10]
 8000d36:	1c59      	adds	r1, r3, #1
 8000d38:	8179      	strh	r1, [r7, #10]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	4b42      	ldr	r3, [pc, #264]	; (8000e48 <send_DHCP_REQUEST+0x2e0>)
 8000d3e:	7819      	ldrb	r1, [r3, #0]
 8000d40:	1813      	adds	r3, r2, r0
 8000d42:	460a      	mov	r2, r1
 8000d44:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8000d48:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	897b      	ldrh	r3, [r7, #10]
 8000d4e:	1c59      	adds	r1, r3, #1
 8000d50:	8179      	strh	r1, [r7, #10]
 8000d52:	4618      	mov	r0, r3
 8000d54:	4b3c      	ldr	r3, [pc, #240]	; (8000e48 <send_DHCP_REQUEST+0x2e0>)
 8000d56:	7859      	ldrb	r1, [r3, #1]
 8000d58:	1813      	adds	r3, r2, r0
 8000d5a:	460a      	mov	r2, r1
 8000d5c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	897b      	ldrh	r3, [r7, #10]
 8000d66:	1c59      	adds	r1, r3, #1
 8000d68:	8179      	strh	r1, [r7, #10]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <send_DHCP_REQUEST+0x2e0>)
 8000d6e:	7899      	ldrb	r1, [r3, #2]
 8000d70:	1813      	adds	r3, r2, r0
 8000d72:	460a      	mov	r2, r1
 8000d74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	897b      	ldrh	r3, [r7, #10]
 8000d7e:	1c59      	adds	r1, r3, #1
 8000d80:	8179      	strh	r1, [r7, #10]
 8000d82:	4618      	mov	r0, r3
 8000d84:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <send_DHCP_REQUEST+0x2e0>)
 8000d86:	78d9      	ldrb	r1, [r3, #3]
 8000d88:	1813      	adds	r3, r2, r0
 8000d8a:	460a      	mov	r2, r1
 8000d8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8000d90:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	897b      	ldrh	r3, [r7, #10]
 8000d96:	1c59      	adds	r1, r3, #1
 8000d98:	8179      	strh	r1, [r7, #10]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	2236      	movs	r2, #54	; 0x36
 8000d9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	897b      	ldrh	r3, [r7, #10]
 8000da8:	1c59      	adds	r1, r3, #1
 8000daa:	8179      	strh	r1, [r7, #10]
 8000dac:	4413      	add	r3, r2
 8000dae:	2204      	movs	r2, #4
 8000db0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	897b      	ldrh	r3, [r7, #10]
 8000dba:	1c59      	adds	r1, r3, #1
 8000dbc:	8179      	strh	r1, [r7, #10]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <send_DHCP_REQUEST+0x2e4>)
 8000dc2:	7819      	ldrb	r1, [r3, #0]
 8000dc4:	1813      	adds	r3, r2, r0
 8000dc6:	460a      	mov	r2, r1
 8000dc8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	897b      	ldrh	r3, [r7, #10]
 8000dd2:	1c59      	adds	r1, r3, #1
 8000dd4:	8179      	strh	r1, [r7, #10]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <send_DHCP_REQUEST+0x2e4>)
 8000dda:	7859      	ldrb	r1, [r3, #1]
 8000ddc:	1813      	adds	r3, r2, r0
 8000dde:	460a      	mov	r2, r1
 8000de0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	897b      	ldrh	r3, [r7, #10]
 8000dea:	1c59      	adds	r1, r3, #1
 8000dec:	8179      	strh	r1, [r7, #10]
 8000dee:	4618      	mov	r0, r3
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <send_DHCP_REQUEST+0x2e4>)
 8000df2:	7899      	ldrb	r1, [r3, #2]
 8000df4:	1813      	adds	r3, r2, r0
 8000df6:	460a      	mov	r2, r1
 8000df8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	897b      	ldrh	r3, [r7, #10]
 8000e02:	1c59      	adds	r1, r3, #1
 8000e04:	8179      	strh	r1, [r7, #10]
 8000e06:	4618      	mov	r0, r3
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <send_DHCP_REQUEST+0x2e4>)
 8000e0a:	78d9      	ldrb	r1, [r3, #3]
 8000e0c:	1813      	adds	r3, r2, r0
 8000e0e:	460a      	mov	r2, r1
 8000e10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	897b      	ldrh	r3, [r7, #10]
 8000e1a:	1c59      	adds	r1, r3, #1
 8000e1c:	8179      	strh	r1, [r7, #10]
 8000e1e:	4413      	add	r3, r2
 8000e20:	220c      	movs	r2, #12
 8000e22:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <send_DHCP_REQUEST+0x2d8>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	897b      	ldrh	r3, [r7, #10]
 8000e2c:	1c59      	adds	r1, r3, #1
 8000e2e:	8179      	strh	r1, [r7, #10]
 8000e30:	4413      	add	r3, r2
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	e019      	b.n	8000e72 <send_DHCP_REQUEST+0x30a>
 8000e3e:	bf00      	nop
 8000e40:	200000f4 	.word	0x200000f4
 8000e44:	200000f8 	.word	0x200000f8
 8000e48:	200000d8 	.word	0x200000d8
 8000e4c:	200000cc 	.word	0x200000cc
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8000e50:	4b86      	ldr	r3, [pc, #536]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	897b      	ldrh	r3, [r7, #10]
 8000e56:	1c59      	adds	r1, r3, #1
 8000e58:	8179      	strh	r1, [r7, #10]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	4984      	ldr	r1, [pc, #528]	; (8001070 <send_DHCP_REQUEST+0x508>)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	440b      	add	r3, r1
 8000e62:	7819      	ldrb	r1, [r3, #0]
 8000e64:	1813      	adds	r3, r2, r0
 8000e66:	460a      	mov	r2, r1
 8000e68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4a7f      	ldr	r2, [pc, #508]	; (8001070 <send_DHCP_REQUEST+0x508>)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1e8      	bne.n	8000e50 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8000e7e:	4b7d      	ldr	r3, [pc, #500]	; (8001074 <send_DHCP_REQUEST+0x50c>)
 8000e80:	78db      	ldrb	r3, [r3, #3]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b79      	ldr	r3, [pc, #484]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000e88:	681c      	ldr	r4, [r3, #0]
 8000e8a:	897b      	ldrh	r3, [r7, #10]
 8000e8c:	1c59      	adds	r1, r3, #1
 8000e8e:	8179      	strh	r1, [r7, #10]
 8000e90:	461d      	mov	r5, r3
 8000e92:	4610      	mov	r0, r2
 8000e94:	f000 ff44 	bl	8001d20 <NibbleToHex>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	1963      	adds	r3, r4, r5
 8000e9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8000ea2:	4b74      	ldr	r3, [pc, #464]	; (8001074 <send_DHCP_REQUEST+0x50c>)
 8000ea4:	78da      	ldrb	r2, [r3, #3]
 8000ea6:	4b71      	ldr	r3, [pc, #452]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000ea8:	681c      	ldr	r4, [r3, #0]
 8000eaa:	897b      	ldrh	r3, [r7, #10]
 8000eac:	1c59      	adds	r1, r3, #1
 8000eae:	8179      	strh	r1, [r7, #10]
 8000eb0:	461d      	mov	r5, r3
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	f000 ff34 	bl	8001d20 <NibbleToHex>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	1963      	adds	r3, r4, r5
 8000ebe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8000ec2:	4b6c      	ldr	r3, [pc, #432]	; (8001074 <send_DHCP_REQUEST+0x50c>)
 8000ec4:	791b      	ldrb	r3, [r3, #4]
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b68      	ldr	r3, [pc, #416]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000ecc:	681c      	ldr	r4, [r3, #0]
 8000ece:	897b      	ldrh	r3, [r7, #10]
 8000ed0:	1c59      	adds	r1, r3, #1
 8000ed2:	8179      	strh	r1, [r7, #10]
 8000ed4:	461d      	mov	r5, r3
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	f000 ff22 	bl	8001d20 <NibbleToHex>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	1963      	adds	r3, r4, r5
 8000ee2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8000ee6:	4b63      	ldr	r3, [pc, #396]	; (8001074 <send_DHCP_REQUEST+0x50c>)
 8000ee8:	791a      	ldrb	r2, [r3, #4]
 8000eea:	4b60      	ldr	r3, [pc, #384]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000eec:	681c      	ldr	r4, [r3, #0]
 8000eee:	897b      	ldrh	r3, [r7, #10]
 8000ef0:	1c59      	adds	r1, r3, #1
 8000ef2:	8179      	strh	r1, [r7, #10]
 8000ef4:	461d      	mov	r5, r3
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	f000 ff12 	bl	8001d20 <NibbleToHex>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	1963      	adds	r3, r4, r5
 8000f02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8000f06:	4b5b      	ldr	r3, [pc, #364]	; (8001074 <send_DHCP_REQUEST+0x50c>)
 8000f08:	795b      	ldrb	r3, [r3, #5]
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b57      	ldr	r3, [pc, #348]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000f10:	681c      	ldr	r4, [r3, #0]
 8000f12:	897b      	ldrh	r3, [r7, #10]
 8000f14:	1c59      	adds	r1, r3, #1
 8000f16:	8179      	strh	r1, [r7, #10]
 8000f18:	461d      	mov	r5, r3
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	f000 ff00 	bl	8001d20 <NibbleToHex>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	1963      	adds	r3, r4, r5
 8000f26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8000f2a:	4b52      	ldr	r3, [pc, #328]	; (8001074 <send_DHCP_REQUEST+0x50c>)
 8000f2c:	795a      	ldrb	r2, [r3, #5]
 8000f2e:	4b4f      	ldr	r3, [pc, #316]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000f30:	681c      	ldr	r4, [r3, #0]
 8000f32:	897b      	ldrh	r3, [r7, #10]
 8000f34:	1c59      	adds	r1, r3, #1
 8000f36:	8179      	strh	r1, [r7, #10]
 8000f38:	461d      	mov	r5, r3
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	f000 fef0 	bl	8001d20 <NibbleToHex>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	1963      	adds	r3, r4, r5
 8000f46:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	b2d9      	uxtb	r1, r3
 8000f4e:	4b47      	ldr	r3, [pc, #284]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	8978      	ldrh	r0, [r7, #10]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	3307      	adds	r3, #7
 8000f58:	1ac3      	subs	r3, r0, r3
 8000f5a:	3106      	adds	r1, #6
 8000f5c:	b2c9      	uxtb	r1, r1
 8000f5e:	4413      	add	r3, r2
 8000f60:	460a      	mov	r2, r1
 8000f62:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8000f66:	4b41      	ldr	r3, [pc, #260]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	897b      	ldrh	r3, [r7, #10]
 8000f6c:	1c59      	adds	r1, r3, #1
 8000f6e:	8179      	strh	r1, [r7, #10]
 8000f70:	4413      	add	r3, r2
 8000f72:	2237      	movs	r2, #55	; 0x37
 8000f74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8000f78:	4b3c      	ldr	r3, [pc, #240]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	897b      	ldrh	r3, [r7, #10]
 8000f7e:	1c59      	adds	r1, r3, #1
 8000f80:	8179      	strh	r1, [r7, #10]
 8000f82:	4413      	add	r3, r2
 8000f84:	2208      	movs	r2, #8
 8000f86:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	897b      	ldrh	r3, [r7, #10]
 8000f90:	1c59      	adds	r1, r3, #1
 8000f92:	8179      	strh	r1, [r7, #10]
 8000f94:	4413      	add	r3, r2
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8000f9c:	4b33      	ldr	r3, [pc, #204]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	897b      	ldrh	r3, [r7, #10]
 8000fa2:	1c59      	adds	r1, r3, #1
 8000fa4:	8179      	strh	r1, [r7, #10]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	2203      	movs	r2, #3
 8000faa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	897b      	ldrh	r3, [r7, #10]
 8000fb4:	1c59      	adds	r1, r3, #1
 8000fb6:	8179      	strh	r1, [r7, #10]
 8000fb8:	4413      	add	r3, r2
 8000fba:	2206      	movs	r2, #6
 8000fbc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	897b      	ldrh	r3, [r7, #10]
 8000fc6:	1c59      	adds	r1, r3, #1
 8000fc8:	8179      	strh	r1, [r7, #10]
 8000fca:	4413      	add	r3, r2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8000fd2:	4b26      	ldr	r3, [pc, #152]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	897b      	ldrh	r3, [r7, #10]
 8000fd8:	1c59      	adds	r1, r3, #1
 8000fda:	8179      	strh	r1, [r7, #10]
 8000fdc:	4413      	add	r3, r2
 8000fde:	223a      	movs	r2, #58	; 0x3a
 8000fe0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	897b      	ldrh	r3, [r7, #10]
 8000fea:	1c59      	adds	r1, r3, #1
 8000fec:	8179      	strh	r1, [r7, #10]
 8000fee:	4413      	add	r3, r2
 8000ff0:	223b      	movs	r2, #59	; 0x3b
 8000ff2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <send_DHCP_REQUEST+0x504>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	897b      	ldrh	r3, [r7, #10]
 8000ffc:	1c59      	adds	r1, r3, #1
 8000ffe:	8179      	strh	r1, [r7, #10]
 8001000:	4413      	add	r3, r2
 8001002:	221f      	movs	r2, #31
 8001004:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <send_DHCP_REQUEST+0x504>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	897b      	ldrh	r3, [r7, #10]
 800100e:	1c59      	adds	r1, r3, #1
 8001010:	8179      	strh	r1, [r7, #10]
 8001012:	4413      	add	r3, r2
 8001014:	2221      	movs	r2, #33	; 0x21
 8001016:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <send_DHCP_REQUEST+0x504>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	897b      	ldrh	r3, [r7, #10]
 8001020:	1c59      	adds	r1, r3, #1
 8001022:	8179      	strh	r1, [r7, #10]
 8001024:	4413      	add	r3, r2
 8001026:	22ff      	movs	r2, #255	; 0xff
 8001028:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800102c:	897b      	ldrh	r3, [r7, #10]
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e009      	b.n	8001046 <send_DHCP_REQUEST+0x4de>
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <send_DHCP_REQUEST+0x504>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4413      	add	r3, r2
 800103a:	33ec      	adds	r3, #236	; 0xec
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3301      	adds	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800104c:	dbf1      	blt.n	8001032 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <send_DHCP_REQUEST+0x510>)
 8001050:	7818      	ldrb	r0, [r3, #0]
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <send_DHCP_REQUEST+0x504>)
 8001054:	6819      	ldr	r1, [r3, #0]
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2243      	movs	r2, #67	; 0x43
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001060:	f002 f934 	bl	80032cc <sendto>

}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bdb0      	pop	{r4, r5, r7, pc}
 800106c:	200000f4 	.word	0x200000f4
 8001070:	20000008 	.word	0x20000008
 8001074:	200000f8 	.word	0x200000f8
 8001078:	200000c8 	.word	0x200000c8

0800107c <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001086:	f7ff fab3 	bl	80005f0 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800108a:	2304      	movs	r3, #4
 800108c:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800108e:	4b9f      	ldr	r3, [pc, #636]	; (800130c <send_DHCP_DECLINE+0x290>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	330a      	adds	r3, #10
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001098:	4b9c      	ldr	r3, [pc, #624]	; (800130c <send_DHCP_DECLINE+0x290>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	330a      	adds	r3, #10
 800109e:	3301      	adds	r3, #1
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80010a4:	4b99      	ldr	r3, [pc, #612]	; (800130c <send_DHCP_DECLINE+0x290>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	897b      	ldrh	r3, [r7, #10]
 80010aa:	1c59      	adds	r1, r3, #1
 80010ac:	8179      	strh	r1, [r7, #10]
 80010ae:	4413      	add	r3, r2
 80010b0:	2235      	movs	r2, #53	; 0x35
 80010b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80010b6:	4b95      	ldr	r3, [pc, #596]	; (800130c <send_DHCP_DECLINE+0x290>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	897b      	ldrh	r3, [r7, #10]
 80010bc:	1c59      	adds	r1, r3, #1
 80010be:	8179      	strh	r1, [r7, #10]
 80010c0:	4413      	add	r3, r2
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 80010c8:	4b90      	ldr	r3, [pc, #576]	; (800130c <send_DHCP_DECLINE+0x290>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	897b      	ldrh	r3, [r7, #10]
 80010ce:	1c59      	adds	r1, r3, #1
 80010d0:	8179      	strh	r1, [r7, #10]
 80010d2:	4413      	add	r3, r2
 80010d4:	2204      	movs	r2, #4
 80010d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80010da:	4b8c      	ldr	r3, [pc, #560]	; (800130c <send_DHCP_DECLINE+0x290>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	897b      	ldrh	r3, [r7, #10]
 80010e0:	1c59      	adds	r1, r3, #1
 80010e2:	8179      	strh	r1, [r7, #10]
 80010e4:	4413      	add	r3, r2
 80010e6:	223d      	movs	r2, #61	; 0x3d
 80010e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80010ec:	4b87      	ldr	r3, [pc, #540]	; (800130c <send_DHCP_DECLINE+0x290>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	897b      	ldrh	r3, [r7, #10]
 80010f2:	1c59      	adds	r1, r3, #1
 80010f4:	8179      	strh	r1, [r7, #10]
 80010f6:	4413      	add	r3, r2
 80010f8:	2207      	movs	r2, #7
 80010fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80010fe:	4b83      	ldr	r3, [pc, #524]	; (800130c <send_DHCP_DECLINE+0x290>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	897b      	ldrh	r3, [r7, #10]
 8001104:	1c59      	adds	r1, r3, #1
 8001106:	8179      	strh	r1, [r7, #10]
 8001108:	4413      	add	r3, r2
 800110a:	2201      	movs	r2, #1
 800110c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001110:	4b7e      	ldr	r3, [pc, #504]	; (800130c <send_DHCP_DECLINE+0x290>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	897b      	ldrh	r3, [r7, #10]
 8001116:	1c59      	adds	r1, r3, #1
 8001118:	8179      	strh	r1, [r7, #10]
 800111a:	4618      	mov	r0, r3
 800111c:	4b7c      	ldr	r3, [pc, #496]	; (8001310 <send_DHCP_DECLINE+0x294>)
 800111e:	7819      	ldrb	r1, [r3, #0]
 8001120:	1813      	adds	r3, r2, r0
 8001122:	460a      	mov	r2, r1
 8001124:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001128:	4b78      	ldr	r3, [pc, #480]	; (800130c <send_DHCP_DECLINE+0x290>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	897b      	ldrh	r3, [r7, #10]
 800112e:	1c59      	adds	r1, r3, #1
 8001130:	8179      	strh	r1, [r7, #10]
 8001132:	4618      	mov	r0, r3
 8001134:	4b76      	ldr	r3, [pc, #472]	; (8001310 <send_DHCP_DECLINE+0x294>)
 8001136:	7859      	ldrb	r1, [r3, #1]
 8001138:	1813      	adds	r3, r2, r0
 800113a:	460a      	mov	r2, r1
 800113c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001140:	4b72      	ldr	r3, [pc, #456]	; (800130c <send_DHCP_DECLINE+0x290>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	897b      	ldrh	r3, [r7, #10]
 8001146:	1c59      	adds	r1, r3, #1
 8001148:	8179      	strh	r1, [r7, #10]
 800114a:	4618      	mov	r0, r3
 800114c:	4b70      	ldr	r3, [pc, #448]	; (8001310 <send_DHCP_DECLINE+0x294>)
 800114e:	7899      	ldrb	r1, [r3, #2]
 8001150:	1813      	adds	r3, r2, r0
 8001152:	460a      	mov	r2, r1
 8001154:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001158:	4b6c      	ldr	r3, [pc, #432]	; (800130c <send_DHCP_DECLINE+0x290>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	897b      	ldrh	r3, [r7, #10]
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	8179      	strh	r1, [r7, #10]
 8001162:	4618      	mov	r0, r3
 8001164:	4b6a      	ldr	r3, [pc, #424]	; (8001310 <send_DHCP_DECLINE+0x294>)
 8001166:	78d9      	ldrb	r1, [r3, #3]
 8001168:	1813      	adds	r3, r2, r0
 800116a:	460a      	mov	r2, r1
 800116c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001170:	4b66      	ldr	r3, [pc, #408]	; (800130c <send_DHCP_DECLINE+0x290>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	897b      	ldrh	r3, [r7, #10]
 8001176:	1c59      	adds	r1, r3, #1
 8001178:	8179      	strh	r1, [r7, #10]
 800117a:	4618      	mov	r0, r3
 800117c:	4b64      	ldr	r3, [pc, #400]	; (8001310 <send_DHCP_DECLINE+0x294>)
 800117e:	7919      	ldrb	r1, [r3, #4]
 8001180:	1813      	adds	r3, r2, r0
 8001182:	460a      	mov	r2, r1
 8001184:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001188:	4b60      	ldr	r3, [pc, #384]	; (800130c <send_DHCP_DECLINE+0x290>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	897b      	ldrh	r3, [r7, #10]
 800118e:	1c59      	adds	r1, r3, #1
 8001190:	8179      	strh	r1, [r7, #10]
 8001192:	4618      	mov	r0, r3
 8001194:	4b5e      	ldr	r3, [pc, #376]	; (8001310 <send_DHCP_DECLINE+0x294>)
 8001196:	7959      	ldrb	r1, [r3, #5]
 8001198:	1813      	adds	r3, r2, r0
 800119a:	460a      	mov	r2, r1
 800119c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80011a0:	4b5a      	ldr	r3, [pc, #360]	; (800130c <send_DHCP_DECLINE+0x290>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	897b      	ldrh	r3, [r7, #10]
 80011a6:	1c59      	adds	r1, r3, #1
 80011a8:	8179      	strh	r1, [r7, #10]
 80011aa:	4413      	add	r3, r2
 80011ac:	2232      	movs	r2, #50	; 0x32
 80011ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80011b2:	4b56      	ldr	r3, [pc, #344]	; (800130c <send_DHCP_DECLINE+0x290>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	897b      	ldrh	r3, [r7, #10]
 80011b8:	1c59      	adds	r1, r3, #1
 80011ba:	8179      	strh	r1, [r7, #10]
 80011bc:	4413      	add	r3, r2
 80011be:	2204      	movs	r2, #4
 80011c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80011c4:	4b51      	ldr	r3, [pc, #324]	; (800130c <send_DHCP_DECLINE+0x290>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	897b      	ldrh	r3, [r7, #10]
 80011ca:	1c59      	adds	r1, r3, #1
 80011cc:	8179      	strh	r1, [r7, #10]
 80011ce:	4618      	mov	r0, r3
 80011d0:	4b50      	ldr	r3, [pc, #320]	; (8001314 <send_DHCP_DECLINE+0x298>)
 80011d2:	7819      	ldrb	r1, [r3, #0]
 80011d4:	1813      	adds	r3, r2, r0
 80011d6:	460a      	mov	r2, r1
 80011d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80011dc:	4b4b      	ldr	r3, [pc, #300]	; (800130c <send_DHCP_DECLINE+0x290>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	897b      	ldrh	r3, [r7, #10]
 80011e2:	1c59      	adds	r1, r3, #1
 80011e4:	8179      	strh	r1, [r7, #10]
 80011e6:	4618      	mov	r0, r3
 80011e8:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <send_DHCP_DECLINE+0x298>)
 80011ea:	7859      	ldrb	r1, [r3, #1]
 80011ec:	1813      	adds	r3, r2, r0
 80011ee:	460a      	mov	r2, r1
 80011f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80011f4:	4b45      	ldr	r3, [pc, #276]	; (800130c <send_DHCP_DECLINE+0x290>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	897b      	ldrh	r3, [r7, #10]
 80011fa:	1c59      	adds	r1, r3, #1
 80011fc:	8179      	strh	r1, [r7, #10]
 80011fe:	4618      	mov	r0, r3
 8001200:	4b44      	ldr	r3, [pc, #272]	; (8001314 <send_DHCP_DECLINE+0x298>)
 8001202:	7899      	ldrb	r1, [r3, #2]
 8001204:	1813      	adds	r3, r2, r0
 8001206:	460a      	mov	r2, r1
 8001208:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <send_DHCP_DECLINE+0x290>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	897b      	ldrh	r3, [r7, #10]
 8001212:	1c59      	adds	r1, r3, #1
 8001214:	8179      	strh	r1, [r7, #10]
 8001216:	4618      	mov	r0, r3
 8001218:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <send_DHCP_DECLINE+0x298>)
 800121a:	78d9      	ldrb	r1, [r3, #3]
 800121c:	1813      	adds	r3, r2, r0
 800121e:	460a      	mov	r2, r1
 8001220:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001224:	4b39      	ldr	r3, [pc, #228]	; (800130c <send_DHCP_DECLINE+0x290>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	897b      	ldrh	r3, [r7, #10]
 800122a:	1c59      	adds	r1, r3, #1
 800122c:	8179      	strh	r1, [r7, #10]
 800122e:	4413      	add	r3, r2
 8001230:	2236      	movs	r2, #54	; 0x36
 8001232:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001236:	4b35      	ldr	r3, [pc, #212]	; (800130c <send_DHCP_DECLINE+0x290>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	897b      	ldrh	r3, [r7, #10]
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	8179      	strh	r1, [r7, #10]
 8001240:	4413      	add	r3, r2
 8001242:	2204      	movs	r2, #4
 8001244:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001248:	4b30      	ldr	r3, [pc, #192]	; (800130c <send_DHCP_DECLINE+0x290>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	897b      	ldrh	r3, [r7, #10]
 800124e:	1c59      	adds	r1, r3, #1
 8001250:	8179      	strh	r1, [r7, #10]
 8001252:	4618      	mov	r0, r3
 8001254:	4b30      	ldr	r3, [pc, #192]	; (8001318 <send_DHCP_DECLINE+0x29c>)
 8001256:	7819      	ldrb	r1, [r3, #0]
 8001258:	1813      	adds	r3, r2, r0
 800125a:	460a      	mov	r2, r1
 800125c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <send_DHCP_DECLINE+0x290>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	1c59      	adds	r1, r3, #1
 8001268:	8179      	strh	r1, [r7, #10]
 800126a:	4618      	mov	r0, r3
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <send_DHCP_DECLINE+0x29c>)
 800126e:	7859      	ldrb	r1, [r3, #1]
 8001270:	1813      	adds	r3, r2, r0
 8001272:	460a      	mov	r2, r1
 8001274:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <send_DHCP_DECLINE+0x290>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	897b      	ldrh	r3, [r7, #10]
 800127e:	1c59      	adds	r1, r3, #1
 8001280:	8179      	strh	r1, [r7, #10]
 8001282:	4618      	mov	r0, r3
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <send_DHCP_DECLINE+0x29c>)
 8001286:	7899      	ldrb	r1, [r3, #2]
 8001288:	1813      	adds	r3, r2, r0
 800128a:	460a      	mov	r2, r1
 800128c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <send_DHCP_DECLINE+0x290>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	897b      	ldrh	r3, [r7, #10]
 8001296:	1c59      	adds	r1, r3, #1
 8001298:	8179      	strh	r1, [r7, #10]
 800129a:	4618      	mov	r0, r3
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <send_DHCP_DECLINE+0x29c>)
 800129e:	78d9      	ldrb	r1, [r3, #3]
 80012a0:	1813      	adds	r3, r2, r0
 80012a2:	460a      	mov	r2, r1
 80012a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <send_DHCP_DECLINE+0x290>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	897b      	ldrh	r3, [r7, #10]
 80012ae:	1c59      	adds	r1, r3, #1
 80012b0:	8179      	strh	r1, [r7, #10]
 80012b2:	4413      	add	r3, r2
 80012b4:	22ff      	movs	r2, #255	; 0xff
 80012b6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80012ba:	897b      	ldrh	r3, [r7, #10]
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e009      	b.n	80012d4 <send_DHCP_DECLINE+0x258>
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <send_DHCP_DECLINE+0x290>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	33ec      	adds	r3, #236	; 0xec
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3301      	adds	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80012da:	dbf1      	blt.n	80012c0 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 80012dc:	23ff      	movs	r3, #255	; 0xff
 80012de:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 80012e0:	23ff      	movs	r3, #255	; 0xff
 80012e2:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 80012e4:	23ff      	movs	r3, #255	; 0xff
 80012e6:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 80012e8:	23ff      	movs	r3, #255	; 0xff
 80012ea:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <send_DHCP_DECLINE+0x2a0>)
 80012ee:	7818      	ldrb	r0, [r3, #0]
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <send_DHCP_DECLINE+0x290>)
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2243      	movs	r2, #67	; 0x43
 80012f8:	9200      	str	r2, [sp, #0]
 80012fa:	f44f 7209 	mov.w	r2, #548	; 0x224
 80012fe:	f001 ffe5 	bl	80032cc <sendto>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000f4 	.word	0x200000f4
 8001310:	200000f8 	.word	0x200000f8
 8001314:	200000d8 	.word	0x200000d8
 8001318:	200000cc 	.word	0x200000cc
 800131c:	200000c8 	.word	0x200000c8

08001320 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 800132a:	4ba1      	ldr	r3, [pc, #644]	; (80015b0 <parseDHCPMSG+0x290>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fd87 	bl	8003e42 <getSn_RX_RSR>
 8001334:	4603      	mov	r3, r0
 8001336:	823b      	strh	r3, [r7, #16]
 8001338:	8a3b      	ldrh	r3, [r7, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d011      	beq.n	8001362 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800133e:	4b9c      	ldr	r3, [pc, #624]	; (80015b0 <parseDHCPMSG+0x290>)
 8001340:	7818      	ldrb	r0, [r3, #0]
 8001342:	4b9c      	ldr	r3, [pc, #624]	; (80015b4 <parseDHCPMSG+0x294>)
 8001344:	6819      	ldr	r1, [r3, #0]
 8001346:	1d3c      	adds	r4, r7, #4
 8001348:	8a3a      	ldrh	r2, [r7, #16]
 800134a:	1cbb      	adds	r3, r7, #2
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	4623      	mov	r3, r4
 8001350:	f002 f8f2 	bl	8003538 <recvfrom>
 8001354:	4603      	mov	r3, r0
 8001356:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
   if (svr_port == DHCP_SERVER_PORT) {
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	2b43      	cmp	r3, #67	; 0x43
 800135c:	f040 81ed 	bne.w	800173a <parseDHCPMSG+0x41a>
 8001360:	e001      	b.n	8001366 <parseDHCPMSG+0x46>
   else return 0;
 8001362:	2300      	movs	r3, #0
 8001364:	e1eb      	b.n	800173e <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001366:	4b93      	ldr	r3, [pc, #588]	; (80015b4 <parseDHCPMSG+0x294>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	7f1a      	ldrb	r2, [r3, #28]
 800136c:	4b92      	ldr	r3, [pc, #584]	; (80015b8 <parseDHCPMSG+0x298>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d124      	bne.n	80013be <parseDHCPMSG+0x9e>
 8001374:	4b8f      	ldr	r3, [pc, #572]	; (80015b4 <parseDHCPMSG+0x294>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	7f5a      	ldrb	r2, [r3, #29]
 800137a:	4b8f      	ldr	r3, [pc, #572]	; (80015b8 <parseDHCPMSG+0x298>)
 800137c:	785b      	ldrb	r3, [r3, #1]
 800137e:	429a      	cmp	r2, r3
 8001380:	d11d      	bne.n	80013be <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001382:	4b8c      	ldr	r3, [pc, #560]	; (80015b4 <parseDHCPMSG+0x294>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	7f9a      	ldrb	r2, [r3, #30]
 8001388:	4b8b      	ldr	r3, [pc, #556]	; (80015b8 <parseDHCPMSG+0x298>)
 800138a:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800138c:	429a      	cmp	r2, r3
 800138e:	d116      	bne.n	80013be <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001390:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <parseDHCPMSG+0x294>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	7fda      	ldrb	r2, [r3, #31]
 8001396:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <parseDHCPMSG+0x298>)
 8001398:	78db      	ldrb	r3, [r3, #3]
 800139a:	429a      	cmp	r2, r3
 800139c:	d10f      	bne.n	80013be <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800139e:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <parseDHCPMSG+0x294>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80013a6:	4b84      	ldr	r3, [pc, #528]	; (80015b8 <parseDHCPMSG+0x298>)
 80013a8:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d107      	bne.n	80013be <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80013ae:	4b81      	ldr	r3, [pc, #516]	; (80015b4 <parseDHCPMSG+0x294>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80013b6:	4b80      	ldr	r3, [pc, #512]	; (80015b8 <parseDHCPMSG+0x298>)
 80013b8:	795b      	ldrb	r3, [r3, #5]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d001      	beq.n	80013c2 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	e1bd      	b.n	800173e <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 80013c2:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <parseDHCPMSG+0x29c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10b      	bne.n	80013e2 <parseDHCPMSG+0xc2>
 80013ca:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <parseDHCPMSG+0x29c>)
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d107      	bne.n	80013e2 <parseDHCPMSG+0xc2>
 80013d2:	4b7a      	ldr	r3, [pc, #488]	; (80015bc <parseDHCPMSG+0x29c>)
 80013d4:	789b      	ldrb	r3, [r3, #2]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d103      	bne.n	80013e2 <parseDHCPMSG+0xc2>
 80013da:	4b78      	ldr	r3, [pc, #480]	; (80015bc <parseDHCPMSG+0x29c>)
 80013dc:	78db      	ldrb	r3, [r3, #3]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d029      	beq.n	8001436 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80013e2:	793a      	ldrb	r2, [r7, #4]
 80013e4:	4b75      	ldr	r3, [pc, #468]	; (80015bc <parseDHCPMSG+0x29c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d10e      	bne.n	800140a <parseDHCPMSG+0xea>
 80013ec:	797a      	ldrb	r2, [r7, #5]
 80013ee:	4b73      	ldr	r3, [pc, #460]	; (80015bc <parseDHCPMSG+0x29c>)
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d109      	bne.n	800140a <parseDHCPMSG+0xea>
 80013f6:	79ba      	ldrb	r2, [r7, #6]
 80013f8:	4b70      	ldr	r3, [pc, #448]	; (80015bc <parseDHCPMSG+0x29c>)
 80013fa:	789b      	ldrb	r3, [r3, #2]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d104      	bne.n	800140a <parseDHCPMSG+0xea>
 8001400:	79fa      	ldrb	r2, [r7, #7]
 8001402:	4b6e      	ldr	r3, [pc, #440]	; (80015bc <parseDHCPMSG+0x29c>)
 8001404:	78db      	ldrb	r3, [r3, #3]
 8001406:	429a      	cmp	r2, r3
 8001408:	d015      	beq.n	8001436 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800140a:	793a      	ldrb	r2, [r7, #4]
 800140c:	4b6c      	ldr	r3, [pc, #432]	; (80015c0 <parseDHCPMSG+0x2a0>)
 800140e:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001410:	429a      	cmp	r2, r3
 8001412:	d10e      	bne.n	8001432 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001414:	797a      	ldrb	r2, [r7, #5]
 8001416:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <parseDHCPMSG+0x2a0>)
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	429a      	cmp	r2, r3
 800141c:	d109      	bne.n	8001432 <parseDHCPMSG+0x112>
 800141e:	79ba      	ldrb	r2, [r7, #6]
 8001420:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <parseDHCPMSG+0x2a0>)
 8001422:	789b      	ldrb	r3, [r3, #2]
 8001424:	429a      	cmp	r2, r3
 8001426:	d104      	bne.n	8001432 <parseDHCPMSG+0x112>
 8001428:	79fa      	ldrb	r2, [r7, #7]
 800142a:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <parseDHCPMSG+0x2a0>)
 800142c:	78db      	ldrb	r3, [r3, #3]
 800142e:	429a      	cmp	r2, r3
 8001430:	d001      	beq.n	8001436 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8001432:	2300      	movs	r3, #0
 8001434:	e183      	b.n	800173e <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8001436:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <parseDHCPMSG+0x294>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	33f0      	adds	r3, #240	; 0xf0
 8001440:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8001442:	8a3b      	ldrh	r3, [r7, #16]
 8001444:	3bf0      	subs	r3, #240	; 0xf0
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4413      	add	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 800144c:	e170      	b.n	8001730 <parseDHCPMSG+0x410>

			switch ( *p ) {
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b36      	cmp	r3, #54	; 0x36
 8001454:	dc76      	bgt.n	8001544 <parseDHCPMSG+0x224>
 8001456:	2b00      	cmp	r3, #0
 8001458:	f2c0 815d 	blt.w	8001716 <parseDHCPMSG+0x3f6>
 800145c:	2b36      	cmp	r3, #54	; 0x36
 800145e:	f200 815a 	bhi.w	8001716 <parseDHCPMSG+0x3f6>
 8001462:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <parseDHCPMSG+0x148>)
 8001464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001468:	08001551 	.word	0x08001551
 800146c:	08001571 	.word	0x08001571
 8001470:	08001717 	.word	0x08001717
 8001474:	080015c9 	.word	0x080015c9
 8001478:	08001717 	.word	0x08001717
 800147c:	08001717 	.word	0x08001717
 8001480:	08001615 	.word	0x08001615
 8001484:	08001717 	.word	0x08001717
 8001488:	08001717 	.word	0x08001717
 800148c:	08001717 	.word	0x08001717
 8001490:	08001717 	.word	0x08001717
 8001494:	08001717 	.word	0x08001717
 8001498:	08001717 	.word	0x08001717
 800149c:	08001717 	.word	0x08001717
 80014a0:	08001717 	.word	0x08001717
 80014a4:	08001717 	.word	0x08001717
 80014a8:	08001717 	.word	0x08001717
 80014ac:	08001717 	.word	0x08001717
 80014b0:	08001717 	.word	0x08001717
 80014b4:	08001717 	.word	0x08001717
 80014b8:	08001717 	.word	0x08001717
 80014bc:	08001717 	.word	0x08001717
 80014c0:	08001717 	.word	0x08001717
 80014c4:	08001717 	.word	0x08001717
 80014c8:	08001717 	.word	0x08001717
 80014cc:	08001717 	.word	0x08001717
 80014d0:	08001717 	.word	0x08001717
 80014d4:	08001717 	.word	0x08001717
 80014d8:	08001717 	.word	0x08001717
 80014dc:	08001717 	.word	0x08001717
 80014e0:	08001717 	.word	0x08001717
 80014e4:	08001717 	.word	0x08001717
 80014e8:	08001717 	.word	0x08001717
 80014ec:	08001717 	.word	0x08001717
 80014f0:	08001717 	.word	0x08001717
 80014f4:	08001717 	.word	0x08001717
 80014f8:	08001717 	.word	0x08001717
 80014fc:	08001717 	.word	0x08001717
 8001500:	08001717 	.word	0x08001717
 8001504:	08001717 	.word	0x08001717
 8001508:	08001717 	.word	0x08001717
 800150c:	08001717 	.word	0x08001717
 8001510:	08001717 	.word	0x08001717
 8001514:	08001717 	.word	0x08001717
 8001518:	08001717 	.word	0x08001717
 800151c:	08001717 	.word	0x08001717
 8001520:	08001717 	.word	0x08001717
 8001524:	08001717 	.word	0x08001717
 8001528:	08001717 	.word	0x08001717
 800152c:	08001717 	.word	0x08001717
 8001530:	08001717 	.word	0x08001717
 8001534:	08001661 	.word	0x08001661
 8001538:	08001717 	.word	0x08001717
 800153c:	08001559 	.word	0x08001559
 8001540:	080016bd 	.word	0x080016bd
 8001544:	2bff      	cmp	r3, #255	; 0xff
 8001546:	f040 80e6 	bne.w	8001716 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	617b      	str	r3, [r7, #20]
   				break;
 800154e:	e0ef      	b.n	8001730 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
   				break;
 8001556:	e0eb      	b.n	8001730 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
   				p++;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	617a      	str	r2, [r7, #20]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	74fb      	strb	r3, [r7, #19]
   				break;
 800156e:	e0df      	b.n	8001730 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3301      	adds	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
   				p++;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	617a      	str	r2, [r7, #20]
 8001582:	781a      	ldrb	r2, [r3, #0]
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <parseDHCPMSG+0x2a4>)
 8001586:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	617a      	str	r2, [r7, #20]
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <parseDHCPMSG+0x2a4>)
 8001592:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	617a      	str	r2, [r7, #20]
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <parseDHCPMSG+0x2a4>)
 800159e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	617a      	str	r2, [r7, #20]
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <parseDHCPMSG+0x2a4>)
 80015aa:	70da      	strb	r2, [r3, #3]
   				break;
 80015ac:	e0c0      	b.n	8001730 <parseDHCPMSG+0x410>
 80015ae:	bf00      	nop
 80015b0:	200000c8 	.word	0x200000c8
 80015b4:	200000f4 	.word	0x200000f4
 80015b8:	200000f8 	.word	0x200000f8
 80015bc:	200000cc 	.word	0x200000cc
 80015c0:	200000d0 	.word	0x200000d0
 80015c4:	200000e0 	.word	0x200000e0
   			case routersOnSubnet :
   				p++;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	617a      	str	r2, [r7, #20]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	617a      	str	r2, [r7, #20]
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <parseDHCPMSG+0x428>)
 80015e2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	617a      	str	r2, [r7, #20]
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	4b56      	ldr	r3, [pc, #344]	; (8001748 <parseDHCPMSG+0x428>)
 80015ee:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	617a      	str	r2, [r7, #20]
 80015f6:	781a      	ldrb	r2, [r3, #0]
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <parseDHCPMSG+0x428>)
 80015fa:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	617a      	str	r2, [r7, #20]
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <parseDHCPMSG+0x428>)
 8001606:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001608:	7afb      	ldrb	r3, [r7, #11]
 800160a:	3b04      	subs	r3, #4
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	4413      	add	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
   				break;
 8001612:	e08d      	b.n	8001730 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	617a      	str	r2, [r7, #20]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	617a      	str	r2, [r7, #20]
 800162a:	781a      	ldrb	r2, [r3, #0]
 800162c:	4b47      	ldr	r3, [pc, #284]	; (800174c <parseDHCPMSG+0x42c>)
 800162e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	617a      	str	r2, [r7, #20]
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	4b44      	ldr	r3, [pc, #272]	; (800174c <parseDHCPMSG+0x42c>)
 800163a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	617a      	str	r2, [r7, #20]
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	4b41      	ldr	r3, [pc, #260]	; (800174c <parseDHCPMSG+0x42c>)
 8001646:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	617a      	str	r2, [r7, #20]
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	4b3e      	ldr	r3, [pc, #248]	; (800174c <parseDHCPMSG+0x42c>)
 8001652:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001654:	7afb      	ldrb	r3, [r7, #11]
 8001656:	3b04      	subs	r3, #4
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
   				break;
 800165e:	e067      	b.n	8001730 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3301      	adds	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	617a      	str	r2, [r7, #20]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	617a      	str	r2, [r7, #20]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <parseDHCPMSG+0x430>)
 800167c:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800167e:	4b34      	ldr	r3, [pc, #208]	; (8001750 <parseDHCPMSG+0x430>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	021a      	lsls	r2, r3, #8
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	1c59      	adds	r1, r3, #1
 8001688:	6179      	str	r1, [r7, #20]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4413      	add	r3, r2
 800168e:	4a30      	ldr	r2, [pc, #192]	; (8001750 <parseDHCPMSG+0x430>)
 8001690:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <parseDHCPMSG+0x430>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	021a      	lsls	r2, r3, #8
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	1c59      	adds	r1, r3, #1
 800169c:	6179      	str	r1, [r7, #20]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a2b      	ldr	r2, [pc, #172]	; (8001750 <parseDHCPMSG+0x430>)
 80016a4:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <parseDHCPMSG+0x430>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	021a      	lsls	r2, r3, #8
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	1c59      	adds	r1, r3, #1
 80016b0:	6179      	str	r1, [r7, #20]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a26      	ldr	r2, [pc, #152]	; (8001750 <parseDHCPMSG+0x430>)
 80016b8:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 80016ba:	e039      	b.n	8001730 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	3301      	adds	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	617a      	str	r2, [r7, #20]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	617a      	str	r2, [r7, #20]
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <parseDHCPMSG+0x434>)
 80016d6:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	617a      	str	r2, [r7, #20]
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <parseDHCPMSG+0x434>)
 80016e2:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	617a      	str	r2, [r7, #20]
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <parseDHCPMSG+0x434>)
 80016ee:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	617a      	str	r2, [r7, #20]
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <parseDHCPMSG+0x434>)
 80016fa:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 80016fc:	793a      	ldrb	r2, [r7, #4]
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <parseDHCPMSG+0x438>)
 8001700:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8001702:	797a      	ldrb	r2, [r7, #5]
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <parseDHCPMSG+0x438>)
 8001706:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8001708:	79ba      	ldrb	r2, [r7, #6]
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <parseDHCPMSG+0x438>)
 800170c:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <parseDHCPMSG+0x438>)
 8001712:	70da      	strb	r2, [r3, #3]
   				break;
 8001714:	e00c      	b.n	8001730 <parseDHCPMSG+0x410>
   			default :
   				p++;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	617a      	str	r2, [r7, #20]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	4413      	add	r3, r2
 800172c:	617b      	str	r3, [r7, #20]
   				break;
 800172e:	bf00      	nop
		while ( p < e ) {
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	f4ff ae8a 	bcc.w	800144e <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 800173a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800173e:	4618      	mov	r0, r3
 8001740:	371c      	adds	r7, #28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd90      	pop	{r4, r7, pc}
 8001746:	bf00      	nop
 8001748:	200000dc 	.word	0x200000dc
 800174c:	200000e4 	.word	0x200000e4
 8001750:	20000000 	.word	0x20000000
 8001754:	200000cc 	.word	0x200000cc
 8001758:	200000d0 	.word	0x200000d0

0800175c <DHCP_run>:

uint8_t DHCP_run(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8001762:	4b7f      	ldr	r3, [pc, #508]	; (8001960 <DHCP_run+0x204>)
 8001764:	f993 3000 	ldrsb.w	r3, [r3]
 8001768:	2b06      	cmp	r3, #6
 800176a:	d101      	bne.n	8001770 <DHCP_run+0x14>
 800176c:	2305      	movs	r3, #5
 800176e:	e0f3      	b.n	8001958 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8001770:	4b7c      	ldr	r3, [pc, #496]	; (8001964 <DHCP_run+0x208>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	3301      	adds	r3, #1
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800177e:	4618      	mov	r0, r3
 8001780:	f002 f9ba 	bl	8003af8 <WIZCHIP_READ>
 8001784:	4603      	mov	r3, r0
 8001786:	2b22      	cmp	r3, #34	; 0x22
 8001788:	d006      	beq.n	8001798 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800178a:	4b76      	ldr	r3, [pc, #472]	; (8001964 <DHCP_run+0x208>)
 800178c:	7818      	ldrb	r0, [r3, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	2244      	movs	r2, #68	; 0x44
 8001792:	2102      	movs	r1, #2
 8001794:	f001 f98c 	bl	8002ab0 <socket>

	ret = DHCP_RUNNING;
 8001798:	2301      	movs	r3, #1
 800179a:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 800179c:	f7ff fdc0 	bl	8001320 <parseDHCPMSG>
 80017a0:	4603      	mov	r3, r0
 80017a2:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80017a4:	4b6e      	ldr	r3, [pc, #440]	; (8001960 <DHCP_run+0x204>)
 80017a6:	f993 3000 	ldrsb.w	r3, [r3]
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	f200 80d0 	bhi.w	8001950 <DHCP_run+0x1f4>
 80017b0:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <DHCP_run+0x5c>)
 80017b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b6:	bf00      	nop
 80017b8:	080017cd 	.word	0x080017cd
 80017bc:	080017f1 	.word	0x080017f1
 80017c0:	08001835 	.word	0x08001835
 80017c4:	08001885 	.word	0x08001885
 80017c8:	080018df 	.word	0x080018df
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <DHCP_run+0x20c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80017d2:	4b65      	ldr	r3, [pc, #404]	; (8001968 <DHCP_run+0x20c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80017d8:	4b63      	ldr	r3, [pc, #396]	; (8001968 <DHCP_run+0x20c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80017de:	4b62      	ldr	r3, [pc, #392]	; (8001968 <DHCP_run+0x20c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80017e4:	f7fe fffa 	bl	80007dc <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 80017e8:	4b5d      	ldr	r3, [pc, #372]	; (8001960 <DHCP_run+0x204>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
   		break;
 80017ee:	e0b2      	b.n	8001956 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d119      	bne.n	800182a <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 80017f6:	4b5d      	ldr	r3, [pc, #372]	; (800196c <DHCP_run+0x210>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	7c1a      	ldrb	r2, [r3, #16]
 80017fc:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <DHCP_run+0x20c>)
 80017fe:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8001800:	4b5a      	ldr	r3, [pc, #360]	; (800196c <DHCP_run+0x210>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	7c5a      	ldrb	r2, [r3, #17]
 8001806:	4b58      	ldr	r3, [pc, #352]	; (8001968 <DHCP_run+0x20c>)
 8001808:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800180a:	4b58      	ldr	r3, [pc, #352]	; (800196c <DHCP_run+0x210>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	7c9a      	ldrb	r2, [r3, #18]
 8001810:	4b55      	ldr	r3, [pc, #340]	; (8001968 <DHCP_run+0x20c>)
 8001812:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8001814:	4b55      	ldr	r3, [pc, #340]	; (800196c <DHCP_run+0x210>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	7cda      	ldrb	r2, [r3, #19]
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <DHCP_run+0x20c>)
 800181c:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 800181e:	f7ff f9a3 	bl	8000b68 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8001822:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <DHCP_run+0x204>)
 8001824:	2202      	movs	r2, #2
 8001826:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8001828:	e095      	b.n	8001956 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800182a:	f000 f8b1 	bl	8001990 <check_DHCP_timeout>
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
         break;
 8001832:	e090      	b.n	8001956 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	2b05      	cmp	r3, #5
 8001838:	d116      	bne.n	8001868 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 800183a:	f000 f909 	bl	8001a50 <check_DHCP_leasedIP>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8001844:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <DHCP_run+0x214>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4798      	blx	r3
					reset_DHCP_timeout();
 800184a:	f000 f9d3 	bl	8001bf4 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 800184e:	4b44      	ldr	r3, [pc, #272]	; (8001960 <DHCP_run+0x204>)
 8001850:	2203      	movs	r2, #3
 8001852:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8001854:	e07f      	b.n	8001956 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8001856:	f000 f9cd 	bl	8001bf4 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800185a:	4b46      	ldr	r3, [pc, #280]	; (8001974 <DHCP_run+0x218>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8001860:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <DHCP_run+0x204>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
		break;
 8001866:	e076      	b.n	8001956 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	2b06      	cmp	r3, #6
 800186c:	d105      	bne.n	800187a <DHCP_run+0x11e>
				reset_DHCP_timeout();
 800186e:	f000 f9c1 	bl	8001bf4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <DHCP_run+0x204>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
		break;
 8001878:	e06d      	b.n	8001956 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800187a:	f000 f889 	bl	8001990 <check_DHCP_timeout>
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
		break;
 8001882:	e068      	b.n	8001956 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8001884:	2304      	movs	r3, #4
 8001886:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8001888:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <DHCP_run+0x21c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d060      	beq.n	8001954 <DHCP_run+0x1f8>
 8001892:	4b39      	ldr	r3, [pc, #228]	; (8001978 <DHCP_run+0x21c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	085a      	lsrs	r2, r3, #1
 8001898:	4b38      	ldr	r3, [pc, #224]	; (800197c <DHCP_run+0x220>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d259      	bcs.n	8001954 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80018a4:	4b30      	ldr	r3, [pc, #192]	; (8001968 <DHCP_run+0x20c>)
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <DHCP_run+0x224>)
 80018aa:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 80018ac:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <DHCP_run+0x20c>)
 80018ae:	785a      	ldrb	r2, [r3, #1]
 80018b0:	4b33      	ldr	r3, [pc, #204]	; (8001980 <DHCP_run+0x224>)
 80018b2:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <DHCP_run+0x20c>)
 80018b6:	789a      	ldrb	r2, [r3, #2]
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <DHCP_run+0x224>)
 80018ba:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80018bc:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <DHCP_run+0x20c>)
 80018be:	78da      	ldrb	r2, [r3, #3]
 80018c0:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <DHCP_run+0x224>)
 80018c2:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <DHCP_run+0x228>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4a2e      	ldr	r2, [pc, #184]	; (8001984 <DHCP_run+0x228>)
 80018cc:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80018ce:	f7ff f94b 	bl	8000b68 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80018d2:	f000 f98f 	bl	8001bf4 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <DHCP_run+0x204>)
 80018d8:	2204      	movs	r2, #4
 80018da:	701a      	strb	r2, [r3, #0]
			}
		break;
 80018dc:	e03a      	b.n	8001954 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80018de:	2304      	movs	r3, #4
 80018e0:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80018e2:	79bb      	ldrb	r3, [r7, #6]
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d125      	bne.n	8001934 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 80018e8:	4b27      	ldr	r3, [pc, #156]	; (8001988 <DHCP_run+0x22c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <DHCP_run+0x224>)
 80018f0:	781a      	ldrb	r2, [r3, #0]
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <DHCP_run+0x20c>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d111      	bne.n	800191e <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80018fa:	4b21      	ldr	r3, [pc, #132]	; (8001980 <DHCP_run+0x224>)
 80018fc:	785a      	ldrb	r2, [r3, #1]
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <DHCP_run+0x20c>)
 8001900:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8001902:	429a      	cmp	r2, r3
 8001904:	d10b      	bne.n	800191e <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8001906:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <DHCP_run+0x224>)
 8001908:	789a      	ldrb	r2, [r3, #2]
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <DHCP_run+0x20c>)
 800190c:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d105      	bne.n	800191e <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <DHCP_run+0x224>)
 8001914:	78da      	ldrb	r2, [r3, #3]
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <DHCP_run+0x20c>)
 8001918:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d004      	beq.n	8001928 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 800191e:	2303      	movs	r3, #3
 8001920:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <DHCP_run+0x230>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8001928:	f000 f964 	bl	8001bf4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <DHCP_run+0x204>)
 800192e:	2203      	movs	r2, #3
 8001930:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8001932:	e010      	b.n	8001956 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8001934:	79bb      	ldrb	r3, [r7, #6]
 8001936:	2b06      	cmp	r3, #6
 8001938:	d105      	bne.n	8001946 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 800193a:	f000 f95b 	bl	8001bf4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <DHCP_run+0x204>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
	   	break;
 8001944:	e007      	b.n	8001956 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8001946:	f000 f823 	bl	8001990 <check_DHCP_timeout>
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
	   	break;
 800194e:	e002      	b.n	8001956 <DHCP_run+0x1fa>
		default :
   		break;
 8001950:	bf00      	nop
 8001952:	e000      	b.n	8001956 <DHCP_run+0x1fa>
		break;
 8001954:	bf00      	nop
	}

	return ret;
 8001956:	79fb      	ldrb	r3, [r7, #7]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200000e8 	.word	0x200000e8
 8001964:	200000c8 	.word	0x200000c8
 8001968:	200000d8 	.word	0x200000d8
 800196c:	200000f4 	.word	0x200000f4
 8001970:	20000010 	.word	0x20000010
 8001974:	20000018 	.word	0x20000018
 8001978:	20000000 	.word	0x20000000
 800197c:	200000ec 	.word	0x200000ec
 8001980:	200000d4 	.word	0x200000d4
 8001984:	200000f0 	.word	0x200000f0
 8001988:	200000e9 	.word	0x200000e9
 800198c:	20000014 	.word	0x20000014

08001990 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8001996:	2301      	movs	r3, #1
 8001998:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <check_DHCP_timeout+0xb0>)
 800199c:	f993 3000 	ldrsb.w	r3, [r3]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	dc2d      	bgt.n	8001a00 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <check_DHCP_timeout+0xb4>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <check_DHCP_timeout+0xb8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d242      	bcs.n	8001a36 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 80019b0:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <check_DHCP_timeout+0xbc>)
 80019b2:	f993 3000 	ldrsb.w	r3, [r3]
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d00c      	beq.n	80019d4 <check_DHCP_timeout+0x44>
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	dc0d      	bgt.n	80019da <check_DHCP_timeout+0x4a>
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d002      	beq.n	80019c8 <check_DHCP_timeout+0x38>
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d003      	beq.n	80019ce <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80019c6:	e008      	b.n	80019da <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80019c8:	f7fe ff08 	bl	80007dc <send_DHCP_DISCOVER>
				break;
 80019cc:	e006      	b.n	80019dc <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80019ce:	f7ff f8cb 	bl	8000b68 <send_DHCP_REQUEST>
				break;
 80019d2:	e003      	b.n	80019dc <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80019d4:	f7ff f8c8 	bl	8000b68 <send_DHCP_REQUEST>
				break;
 80019d8:	e000      	b.n	80019dc <check_DHCP_timeout+0x4c>
				break;
 80019da:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <check_DHCP_timeout+0xb8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <check_DHCP_timeout+0xb8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	330a      	adds	r3, #10
 80019e8:	4a16      	ldr	r2, [pc, #88]	; (8001a44 <check_DHCP_timeout+0xb4>)
 80019ea:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <check_DHCP_timeout+0xb0>)
 80019ee:	f993 3000 	ldrsb.w	r3, [r3]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	b25a      	sxtb	r2, r3
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <check_DHCP_timeout+0xb0>)
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	e01a      	b.n	8001a36 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <check_DHCP_timeout+0xbc>)
 8001a02:	f993 3000 	ldrsb.w	r3, [r3]
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d00c      	beq.n	8001a24 <check_DHCP_timeout+0x94>
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	dc10      	bgt.n	8001a30 <check_DHCP_timeout+0xa0>
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d002      	beq.n	8001a18 <check_DHCP_timeout+0x88>
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d006      	beq.n	8001a24 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8001a16:	e00b      	b.n	8001a30 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <check_DHCP_timeout+0xbc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	71fb      	strb	r3, [r7, #7]
				break;
 8001a22:	e006      	b.n	8001a32 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8001a24:	f7fe feda 	bl	80007dc <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <check_DHCP_timeout+0xbc>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
				break;
 8001a2e:	e000      	b.n	8001a32 <check_DHCP_timeout+0xa2>
				break;
 8001a30:	bf00      	nop
		}
		reset_DHCP_timeout();
 8001a32:	f000 f8df 	bl	8001bf4 <reset_DHCP_timeout>
	}
	return ret;
 8001a36:	79fb      	ldrb	r3, [r7, #7]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200000e9 	.word	0x200000e9
 8001a44:	20000004 	.word	0x20000004
 8001a48:	200000ec 	.word	0x200000ec
 8001a4c:	200000e8 	.word	0x200000e8

08001a50 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8001a56:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001a5a:	f002 f84d 	bl	8003af8 <WIZCHIP_READ>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8001a62:	2103      	movs	r1, #3
 8001a64:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001a68:	f002 f892 	bl	8003b90 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <check_DHCP_leasedIP+0x6c>)
 8001a6e:	7818      	ldrb	r0, [r3, #0]
 8001a70:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <check_DHCP_leasedIP+0x70>)
 8001a78:	2211      	movs	r2, #17
 8001a7a:	4912      	ldr	r1, [pc, #72]	; (8001ac4 <check_DHCP_leasedIP+0x74>)
 8001a7c:	f001 fc26 	bl	80032cc <sendto>
 8001a80:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001a8a:	f002 f881 	bl	8003b90 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f113 0f0d 	cmn.w	r3, #13
 8001a94:	d101      	bne.n	8001a9a <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00c      	b.n	8001ab4 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8001a9a:	f7ff faef 	bl	800107c <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <check_DHCP_leasedIP+0x78>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8001aa4:	bf00      	nop
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <check_DHCP_leasedIP+0x78>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d9f9      	bls.n	8001aa6 <check_DHCP_leasedIP+0x56>

		return 0;
 8001ab2:	2300      	movs	r3, #0
	}
}	
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200000c8 	.word	0x200000c8
 8001ac0:	200000d8 	.word	0x200000d8
 8001ac4:	08008f48 	.word	0x08008f48
 8001ac8:	200000ec 	.word	0x200000ec

08001acc <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8001adc:	2206      	movs	r2, #6
 8001ade:	493f      	ldr	r1, [pc, #252]	; (8001bdc <DHCP_init+0x110>)
 8001ae0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001ae4:	f002 f8a2 	bl	8003c2c <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8001ae8:	4b3c      	ldr	r3, [pc, #240]	; (8001bdc <DHCP_init+0x110>)
 8001aea:	781a      	ldrb	r2, [r3, #0]
 8001aec:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <DHCP_init+0x110>)
 8001aee:	785b      	ldrb	r3, [r3, #1]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <DHCP_init+0x110>)
 8001af6:	789b      	ldrb	r3, [r3, #2]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <DHCP_init+0x110>)
 8001afe:	78db      	ldrb	r3, [r3, #3]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <DHCP_init+0x110>)
 8001b06:	791b      	ldrb	r3, [r3, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b33      	ldr	r3, [pc, #204]	; (8001bdc <DHCP_init+0x110>)
 8001b0e:	795b      	ldrb	r3, [r3, #5]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d117      	bne.n	8001b48 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8001b18:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <DHCP_init+0x110>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <DHCP_init+0x110>)
 8001b20:	2208      	movs	r2, #8
 8001b22:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <DHCP_init+0x110>)
 8001b26:	22dc      	movs	r2, #220	; 0xdc
 8001b28:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <DHCP_init+0x110>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <DHCP_init+0x110>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8001b36:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <DHCP_init+0x110>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8001b3c:	2206      	movs	r2, #6
 8001b3e:	4927      	ldr	r1, [pc, #156]	; (8001bdc <DHCP_init+0x110>)
 8001b40:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001b44:	f002 f8d2 	bl	8003cec <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8001b48:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <DHCP_init+0x114>)
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8001b4e:	4a25      	ldr	r2, [pc, #148]	; (8001be4 <DHCP_init+0x118>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <DHCP_init+0x11c>)
 8001b56:	4a25      	ldr	r2, [pc, #148]	; (8001bec <DHCP_init+0x120>)
 8001b58:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <DHCP_init+0x110>)
 8001b5c:	78db      	ldrb	r3, [r3, #3]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <DHCP_init+0x11c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4413      	add	r3, r2
 8001b66:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <DHCP_init+0x11c>)
 8001b68:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <DHCP_init+0x110>)
 8001b6c:	791b      	ldrb	r3, [r3, #4]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <DHCP_init+0x11c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <DHCP_init+0x11c>)
 8001b78:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <DHCP_init+0x110>)
 8001b7c:	795b      	ldrb	r3, [r3, #5]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <DHCP_init+0x11c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4413      	add	r3, r2
 8001b86:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <DHCP_init+0x11c>)
 8001b88:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <DHCP_init+0x110>)
 8001b8c:	78da      	ldrb	r2, [r3, #3]
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <DHCP_init+0x110>)
 8001b90:	791b      	ldrb	r3, [r3, #4]
 8001b92:	4053      	eors	r3, r2
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <DHCP_init+0x110>)
 8001b98:	795b      	ldrb	r3, [r3, #5]
 8001b9a:	4053      	eors	r3, r2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <DHCP_init+0x11c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <DHCP_init+0x11c>)
 8001ba8:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	2204      	movs	r2, #4
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001bb6:	f002 f899 	bl	8003cec <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bc6:	f002 f891 	bl	8003cec <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8001bca:	f000 f813 	bl	8001bf4 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <DHCP_init+0x124>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200000f8 	.word	0x200000f8
 8001be0:	200000c8 	.word	0x200000c8
 8001be4:	200000f4 	.word	0x200000f4
 8001be8:	200000f0 	.word	0x200000f0
 8001bec:	12345678 	.word	0x12345678
 8001bf0:	200000e8 	.word	0x200000e8

08001bf4 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <reset_DHCP_timeout+0x20>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <reset_DHCP_timeout+0x24>)
 8001c00:	220a      	movs	r2, #10
 8001c02:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <reset_DHCP_timeout+0x28>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	200000ec 	.word	0x200000ec
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	200000e9 	.word	0x200000e9

08001c20 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <getIPfromDHCP+0x3c>)
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <getIPfromDHCP+0x3c>)
 8001c36:	7852      	ldrb	r2, [r2, #1]
 8001c38:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <getIPfromDHCP+0x3c>)
 8001c40:	7892      	ldrb	r2, [r2, #2]
 8001c42:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3303      	adds	r3, #3
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <getIPfromDHCP+0x3c>)
 8001c4a:	78d2      	ldrb	r2, [r2, #3]
 8001c4c:	701a      	strb	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	200000d8 	.word	0x200000d8

08001c60 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <getGWfromDHCP+0x3c>)
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3301      	adds	r3, #1
 8001c74:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <getGWfromDHCP+0x3c>)
 8001c76:	7852      	ldrb	r2, [r2, #1]
 8001c78:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <getGWfromDHCP+0x3c>)
 8001c80:	7892      	ldrb	r2, [r2, #2]
 8001c82:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3303      	adds	r3, #3
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <getGWfromDHCP+0x3c>)
 8001c8a:	78d2      	ldrb	r2, [r2, #3]
 8001c8c:	701a      	strb	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	200000dc 	.word	0x200000dc

08001ca0 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <getSNfromDHCP+0x3c>)
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <getSNfromDHCP+0x3c>)
 8001cb6:	7852      	ldrb	r2, [r2, #1]
 8001cb8:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <getSNfromDHCP+0x3c>)
 8001cc0:	7892      	ldrb	r2, [r2, #2]
 8001cc2:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <getSNfromDHCP+0x3c>)
 8001cca:	78d2      	ldrb	r2, [r2, #3]
 8001ccc:	701a      	strb	r2, [r3, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	200000e0 	.word	0x200000e0

08001ce0 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <getDNSfromDHCP+0x3c>)
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <getDNSfromDHCP+0x3c>)
 8001cf6:	7852      	ldrb	r2, [r2, #1]
 8001cf8:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <getDNSfromDHCP+0x3c>)
 8001d00:	7892      	ldrb	r2, [r2, #2]
 8001d02:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3303      	adds	r3, #3
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <getDNSfromDHCP+0x3c>)
 8001d0a:	78d2      	ldrb	r2, [r2, #3]
 8001d0c:	701a      	strb	r2, [r3, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200000e4 	.word	0x200000e4

08001d20 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b09      	cmp	r3, #9
 8001d36:	d803      	bhi.n	8001d40 <NibbleToHex+0x20>
    return nibble + '0';
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	3330      	adds	r3, #48	; 0x30
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	e002      	b.n	8001d46 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	3337      	adds	r3, #55	; 0x37
 8001d44:	b2db      	uxtb	r3, r3
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b085      	sub	sp, #20
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	89fb      	ldrh	r3, [r7, #14]
 8001d70:	4413      	add	r3, r2
 8001d72:	81fb      	strh	r3, [r7, #14]
	return i;
 8001d74:	89fb      	ldrh	r3, [r7, #14]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	b299      	uxth	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	b2ca      	uxtb	r2, r1
 8001d9c:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	887a      	ldrh	r2, [r7, #2]
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]
	return s;
 8001daa:	687b      	ldr	r3, [r7, #4]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b08b      	sub	sp, #44	; 0x2c
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]

	cp = compressed;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	623a      	str	r2, [r7, #32]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <parse_name+0x34>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3301      	adds	r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8001dec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001df2:	2bc0      	cmp	r3, #192	; 0xc0
 8001df4:	d117      	bne.n	8001e26 <parse_name+0x6e>
		{
			if (!indirect)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <parse_name+0x4a>
				clen++;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8001e06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8001e0e:	6a3a      	ldr	r2, [r7, #32]
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4413      	add	r3, r2
 8001e1a:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	623a      	str	r2, [r7, #32]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8001e26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d02b      	beq.n	8001e84 <parse_name+0xcc>
			break;

		len -= slen + 1;
 8001e2c:	887a      	ldrh	r2, [r7, #2]
 8001e2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8001e3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da02      	bge.n	8001e48 <parse_name+0x90>
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e038      	b.n	8001eba <parse_name+0x102>

		if (!indirect) clen += slen;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10c      	bne.n	8001e68 <parse_name+0xb0>
 8001e4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	4413      	add	r3, r2
 8001e54:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8001e56:	e007      	b.n	8001e68 <parse_name+0xb0>
 8001e58:	6a3a      	ldr	r2, [r7, #32]
 8001e5a:	1c53      	adds	r3, r2, #1
 8001e5c:	623b      	str	r3, [r7, #32]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	1c59      	adds	r1, r3, #1
 8001e62:	6079      	str	r1, [r7, #4]
 8001e64:	7812      	ldrb	r2, [r2, #0]
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	84fa      	strh	r2, [r7, #38]	; 0x26
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f2      	bne.n	8001e58 <parse_name+0xa0>
		*buf++ = '.';
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	222e      	movs	r2, #46	; 0x2e
 8001e7a:	701a      	strb	r2, [r3, #0]
		nseg++;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 8001e82:	e7a8      	b.n	8001dd6 <parse_name+0x1e>
			break;
 8001e84:	bf00      	nop
	}

	if (nseg == 0)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10a      	bne.n	8001ea2 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	222e      	movs	r2, #46	; 0x2e
 8001e94:	701a      	strb	r2, [r3, #0]
		len--;
 8001e96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
	len--;
 8001eac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8001eb8:	69fb      	ldr	r3, [r7, #28]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	372c      	adds	r7, #44	; 0x2c
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b0b4      	sub	sp, #208	; 0xd0
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8001ed0:	f107 020c 	add.w	r2, r7, #12
 8001ed4:	23c0      	movs	r3, #192	; 0xc0
 8001ed6:	6839      	ldr	r1, [r7, #0]
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff6d 	bl	8001db8 <parse_name>
 8001ede:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 8001ee2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eea:	d101      	bne.n	8001ef0 <dns_question+0x2a>
 8001eec:	2300      	movs	r3, #0
 8001eee:	e00b      	b.n	8001f08 <dns_question+0x42>

	cp += len;
 8001ef0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	3302      	adds	r3, #2
 8001efe:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	3302      	adds	r3, #2
 8001f04:	603b      	str	r3, [r7, #0]

	return cp;
 8001f06:	683b      	ldr	r3, [r7, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	37d0      	adds	r7, #208	; 0xd0
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b0b6      	sub	sp, #216	; 0xd8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8001f1c:	f107 0210 	add.w	r2, r7, #16
 8001f20:	23c0      	movs	r3, #192	; 0xc0
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f7ff ff47 	bl	8001db8 <parse_name>
 8001f2a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 8001f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f36:	d101      	bne.n	8001f3c <dns_answer+0x2c>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e0f9      	b.n	8002130 <dns_answer+0x220>

	cp += len;
 8001f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	4413      	add	r3, r2
 8001f44:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 8001f46:	68b8      	ldr	r0, [r7, #8]
 8001f48:	f7ff ff03 	bl	8001d52 <get16>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3302      	adds	r3, #2
 8001f56:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3304      	adds	r3, #4
 8001f62:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	3302      	adds	r3, #2
 8001f68:	60bb      	str	r3, [r7, #8]


	switch (type)
 8001f6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	f000 80da 	beq.w	8002128 <dns_answer+0x218>
 8001f74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f78:	2b10      	cmp	r3, #16
 8001f7a:	f300 80d7 	bgt.w	800212c <dns_answer+0x21c>
 8001f7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	d07d      	beq.n	8002082 <dns_answer+0x172>
 8001f86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	f300 80ce 	bgt.w	800212c <dns_answer+0x21c>
 8001f90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f94:	2b0c      	cmp	r3, #12
 8001f96:	dc26      	bgt.n	8001fe6 <dns_answer+0xd6>
 8001f98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f340 80c5 	ble.w	800212c <dns_answer+0x21c>
 8001fa2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	f241 32a4 	movw	r2, #5028	; 0x13a4
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	2a00      	cmp	r2, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2201      	movne	r2, #1
 8001fb8:	2200      	moveq	r2, #0
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	2a00      	cmp	r2, #0
 8001fbe:	d133      	bne.n	8002028 <dns_answer+0x118>
 8001fc0:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	bf14      	ite	ne
 8001fc8:	2201      	movne	r2, #1
 8001fca:	2200      	moveq	r2, #0
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	2a00      	cmp	r2, #0
 8001fd0:	d170      	bne.n	80020b4 <dns_answer+0x1a4>
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8001fe4:	e0a2      	b.n	800212c <dns_answer+0x21c>
	switch (type)
 8001fe6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fea:	2b0d      	cmp	r3, #13
 8001fec:	d032      	beq.n	8002054 <dns_answer+0x144>
		break;
 8001fee:	e09d      	b.n	800212c <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	60ba      	str	r2, [r7, #8]
 8001ff6:	781a      	ldrb	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60ba      	str	r2, [r7, #8]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	3201      	adds	r2, #1
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	60ba      	str	r2, [r7, #8]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	3202      	adds	r2, #2
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	60ba      	str	r2, [r7, #8]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	3203      	adds	r2, #3
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	7013      	strb	r3, [r2, #0]
		break;
 8002026:	e082      	b.n	800212e <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8002028:	f107 0210 	add.w	r2, r7, #16
 800202c:	23c0      	movs	r3, #192	; 0xc0
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f7ff fec1 	bl	8001db8 <parse_name>
 8002036:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800203a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800203e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002042:	d101      	bne.n	8002048 <dns_answer+0x138>
 8002044:	2300      	movs	r3, #0
 8002046:	e073      	b.n	8002130 <dns_answer+0x220>
		cp += len;
 8002048:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	4413      	add	r3, r2
 8002050:	60bb      	str	r3, [r7, #8]
		break;
 8002052:	e06c      	b.n	800212e <dns_answer+0x21e>
		len = *cp++;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	60ba      	str	r2, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8002060:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	4413      	add	r3, r2
 8002068:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	60ba      	str	r2, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8002076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	4413      	add	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
		break;
 8002080:	e055      	b.n	800212e <dns_answer+0x21e>
		cp += 2;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	3302      	adds	r3, #2
 8002086:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8002088:	f107 0210 	add.w	r2, r7, #16
 800208c:	23c0      	movs	r3, #192	; 0xc0
 800208e:	68b9      	ldr	r1, [r7, #8]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7ff fe91 	bl	8001db8 <parse_name>
 8002096:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800209a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800209e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a2:	d101      	bne.n	80020a8 <dns_answer+0x198>
 80020a4:	2300      	movs	r3, #0
 80020a6:	e043      	b.n	8002130 <dns_answer+0x220>
		cp += len;
 80020a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	4413      	add	r3, r2
 80020b0:	60bb      	str	r3, [r7, #8]
		break;
 80020b2:	e03c      	b.n	800212e <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 80020b4:	f107 0210 	add.w	r2, r7, #16
 80020b8:	23c0      	movs	r3, #192	; 0xc0
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7ff fe7b 	bl	8001db8 <parse_name>
 80020c2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80020c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ce:	d101      	bne.n	80020d4 <dns_answer+0x1c4>
 80020d0:	2300      	movs	r3, #0
 80020d2:	e02d      	b.n	8002130 <dns_answer+0x220>
		cp += len;
 80020d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	4413      	add	r3, r2
 80020dc:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80020de:	f107 0210 	add.w	r2, r7, #16
 80020e2:	23c0      	movs	r3, #192	; 0xc0
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff fe66 	bl	8001db8 <parse_name>
 80020ec:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80020f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d101      	bne.n	80020fe <dns_answer+0x1ee>
 80020fa:	2300      	movs	r3, #0
 80020fc:	e018      	b.n	8002130 <dns_answer+0x220>
		cp += len;
 80020fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	4413      	add	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	3304      	adds	r3, #4
 800210c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	3304      	adds	r3, #4
 8002112:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	3304      	adds	r3, #4
 8002118:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3304      	adds	r3, #4
 800211e:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	3304      	adds	r3, #4
 8002124:	60bb      	str	r3, [r7, #8]
		break;
 8002126:	e002      	b.n	800212e <dns_answer+0x21e>
		break;
 8002128:	bf00      	nop
 800212a:	e000      	b.n	800212e <dns_answer+0x21e>
		break;
 800212c:	bf00      	nop
	}

	return cp;
 800212e:	68bb      	ldr	r3, [r7, #8]
}
 8002130:	4618      	mov	r0, r3
 8002132:	37d8      	adds	r7, #216	; 0xd8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8002148:	2212      	movs	r2, #18
 800214a:	2100      	movs	r1, #0
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f006 fddd 	bl	8008d0c <memset>

	pdhdr->id = get16(&msg[0]);
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff fdfd 	bl	8001d52 <get16>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3302      	adds	r3, #2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fdf4 	bl	8001d52 <get16>
 800216a:	4603      	mov	r3, r0
 800216c:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 800216e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002172:	2b00      	cmp	r3, #0
 8002174:	da02      	bge.n	800217c <parseDNSMSG+0x44>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 800217c:	8a7b      	ldrh	r3, [r7, #18]
 800217e:	0adb      	lsrs	r3, r3, #11
 8002180:	b29b      	uxth	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	b2da      	uxtb	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 800218e:	8a7b      	ldrh	r3, [r7, #18]
 8002190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <parseDNSMSG+0x66>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 800219e:	8a7b      	ldrh	r3, [r7, #18]
 80021a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <parseDNSMSG+0x76>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 80021ae:	8a7b      	ldrh	r3, [r7, #18]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <parseDNSMSG+0x86>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 80021be:	8a7b      	ldrh	r3, [r7, #18]
 80021c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <parseDNSMSG+0x96>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 80021ce:	8a7b      	ldrh	r3, [r7, #18]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3304      	adds	r3, #4
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fdb6 	bl	8001d52 <get16>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3306      	adds	r3, #6
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fdad 	bl	8001d52 <get16>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3308      	adds	r3, #8
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fda4 	bl	8001d52 <get16>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	330a      	adds	r3, #10
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fd9b 	bl	8001d52 <get16>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	330c      	adds	r3, #12
 8002228:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 800222a:	2300      	movs	r3, #0
 800222c:	83fb      	strh	r3, [r7, #30]
 800222e:	e00d      	b.n	800224c <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 8002230:	69b9      	ldr	r1, [r7, #24]
 8002232:	6978      	ldr	r0, [r7, #20]
 8002234:	f7ff fe47 	bl	8001ec6 <dns_question>
 8002238:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <parseDNSMSG+0x10e>
 8002240:	f04f 33ff 	mov.w	r3, #4294967295
 8002244:	e03b      	b.n	80022be <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8002246:	8bfb      	ldrh	r3, [r7, #30]
 8002248:	3301      	adds	r3, #1
 800224a:	83fb      	strh	r3, [r7, #30]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	895b      	ldrh	r3, [r3, #10]
 8002250:	8bfa      	ldrh	r2, [r7, #30]
 8002252:	429a      	cmp	r2, r3
 8002254:	d3ec      	bcc.n	8002230 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8002256:	2300      	movs	r3, #0
 8002258:	83fb      	strh	r3, [r7, #30]
 800225a:	e00e      	b.n	800227a <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	6978      	ldr	r0, [r7, #20]
 8002262:	f7ff fe55 	bl	8001f10 <dns_answer>
 8002266:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d102      	bne.n	8002274 <parseDNSMSG+0x13c>
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	e024      	b.n	80022be <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8002274:	8bfb      	ldrh	r3, [r7, #30]
 8002276:	3301      	adds	r3, #1
 8002278:	83fb      	strh	r3, [r7, #30]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	899b      	ldrh	r3, [r3, #12]
 800227e:	8bfa      	ldrh	r2, [r7, #30]
 8002280:	429a      	cmp	r2, r3
 8002282:	d3eb      	bcc.n	800225c <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8002284:	2300      	movs	r3, #0
 8002286:	83fb      	strh	r3, [r7, #30]
 8002288:	e002      	b.n	8002290 <parseDNSMSG+0x158>
 800228a:	8bfb      	ldrh	r3, [r7, #30]
 800228c:	3301      	adds	r3, #1
 800228e:	83fb      	strh	r3, [r7, #30]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	89db      	ldrh	r3, [r3, #14]
 8002294:	8bfa      	ldrh	r2, [r7, #30]
 8002296:	429a      	cmp	r2, r3
 8002298:	d3f7      	bcc.n	800228a <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 800229a:	2300      	movs	r3, #0
 800229c:	83fb      	strh	r3, [r7, #30]
 800229e:	e002      	b.n	80022a6 <parseDNSMSG+0x16e>
 80022a0:	8bfb      	ldrh	r3, [r7, #30]
 80022a2:	3301      	adds	r3, #1
 80022a4:	83fb      	strh	r3, [r7, #30]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8a1b      	ldrh	r3, [r3, #16]
 80022aa:	8bfa      	ldrh	r2, [r7, #30]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d3f7      	bcc.n	80022a0 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	7a1b      	ldrb	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <parseDNSMSG+0x184>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <parseDNSMSG+0x186>
	else return 0;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0b8      	sub	sp, #224	; 0xe0
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4603      	mov	r3, r0
 80022d6:	81fb      	strh	r3, [r7, #14]
 80022d8:	4613      	mov	r3, r2
 80022da:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 80022e2:	4b57      	ldr	r3, [pc, #348]	; (8002440 <dns_makequery+0x178>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	4b55      	ldr	r3, [pc, #340]	; (8002440 <dns_makequery+0x178>)
 80022ec:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 80022ee:	4b54      	ldr	r3, [pc, #336]	; (8002440 <dns_makequery+0x178>)
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80022f8:	f7ff fd43 	bl	8001d82 <put16>
 80022fc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8002300:	89fb      	ldrh	r3, [r7, #14]
 8002302:	02db      	lsls	r3, r3, #11
 8002304:	b21b      	sxth	r3, r3
 8002306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230a:	b21b      	sxth	r3, r3
 800230c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 8002310:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002314:	4619      	mov	r1, r3
 8002316:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800231a:	f7ff fd32 	bl	8001d82 <put16>
 800231e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 8002322:	2101      	movs	r1, #1
 8002324:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002328:	f7ff fd2b 	bl	8001d82 <put16>
 800232c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8002330:	2100      	movs	r1, #0
 8002332:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002336:	f7ff fd24 	bl	8001d82 <put16>
 800233a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800233e:	2100      	movs	r1, #0
 8002340:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002344:	f7ff fd1d 	bl	8001d82 <put16>
 8002348:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800234c:	2100      	movs	r1, #0
 800234e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002352:	f7ff fd16 	bl	8001d82 <put16>
 8002356:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	4618      	mov	r0, r3
 8002362:	f006 fd77 	bl	8008e54 <strcpy>
	dname = sname;
 8002366:	f107 0310 	add.w	r3, r7, #16
 800236a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 800236e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002372:	f7fd ff3d 	bl	80001f0 <strlen>
 8002376:	4603      	mov	r3, r0
 8002378:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 800237c:	212e      	movs	r1, #46	; 0x2e
 800237e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002382:	f006 fccb 	bl	8008d1c <strchr>
 8002386:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 800238a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <dns_makequery+0xd8>
 8002392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	81bb      	strh	r3, [r7, #12]
 800239e:	e002      	b.n	80023a6 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 80023a0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80023a4:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 80023a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023b0:	89ba      	ldrh	r2, [r7, #12]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 80023b6:	89bb      	ldrh	r3, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d029      	beq.n	8002410 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 80023bc:	89bb      	ldrh	r3, [r7, #12]
 80023be:	461a      	mov	r2, r3
 80023c0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80023c4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80023c8:	f006 fcb5 	bl	8008d36 <strncpy>
		cp += len;
 80023cc:	89bb      	ldrh	r3, [r7, #12]
 80023ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80023d2:	4413      	add	r3, r2
 80023d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 80023d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d107      	bne.n	80023f0 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 80023e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
			break;
 80023ee:	e010      	b.n	8002412 <dns_makequery+0x14a>
		}
		dname += len+1;
 80023f0:	89bb      	ldrh	r3, [r7, #12]
 80023f2:	3301      	adds	r3, #1
 80023f4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80023f8:	4413      	add	r3, r2
 80023fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 80023fe:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8002402:	89bb      	ldrh	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 800240e:	e7b5      	b.n	800237c <dns_makequery+0xb4>
		if (len == 0) break;
 8002410:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8002412:	2101      	movs	r1, #1
 8002414:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002418:	f7ff fcb3 	bl	8001d82 <put16>
 800241c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8002420:	2101      	movs	r1, #1
 8002422:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002426:	f7ff fcac 	bl	8001d82 <put16>
 800242a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800242e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	b21b      	sxth	r3, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	37e0      	adds	r7, #224	; 0xe0
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000106 	.word	0x20000106

08002444 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <check_DNS_timeout+0x44>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d914      	bls.n	800247a <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8002450:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <check_DNS_timeout+0x44>)
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <check_DNS_timeout+0x48>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d905      	bls.n	800246a <check_DNS_timeout+0x26>
			retry_count = 0;
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <check_DNS_timeout+0x48>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
 8002468:	e008      	b.n	800247c <check_DNS_timeout+0x38>
		}
		retry_count++;
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <check_DNS_timeout+0x48>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <check_DNS_timeout+0x48>)
 8002474:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000108 	.word	0x20000108
 800248c:	2000010c 	.word	0x2000010c

08002490 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 800249c:	4a07      	ldr	r2, [pc, #28]	; (80024bc <DNS_init+0x2c>)
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 80024a2:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <DNS_init+0x30>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <DNS_init+0x34>)
 80024aa:	f241 1222 	movw	r2, #4386	; 0x1122
 80024ae:	801a      	strh	r2, [r3, #0]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	20000104 	.word	0x20000104
 80024c0:	20000100 	.word	0x20000100
 80024c4:	20000106 	.word	0x20000106

080024c8 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b08f      	sub	sp, #60	; 0x3c
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 80024d4:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <DNS_run+0xfc>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 80024da:	4b3b      	ldr	r3, [pc, #236]	; (80025c8 <DNS_run+0x100>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 80024e0:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <DNS_run+0x104>)
 80024e2:	7818      	ldrb	r0, [r3, #0]
 80024e4:	2300      	movs	r3, #0
 80024e6:	2200      	movs	r2, #0
 80024e8:	2102      	movs	r1, #2
 80024ea:	f000 fae1 	bl	8002ab0 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 80024ee:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <DNS_run+0x108>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7ff fee5 	bl	80022c8 <dns_makequery>
 80024fe:	4603      	mov	r3, r0
 8002500:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8002502:	4b32      	ldr	r3, [pc, #200]	; (80025cc <DNS_run+0x104>)
 8002504:	7818      	ldrb	r0, [r3, #0]
 8002506:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <DNS_run+0x108>)
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800250c:	2335      	movs	r3, #53	; 0x35
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f000 fedb 	bl	80032cc <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8002516:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <DNS_run+0x104>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f001 fc91 	bl	8003e42 <getSn_RX_RSR>
 8002520:	4603      	mov	r3, r0
 8002522:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002524:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002526:	2b00      	cmp	r3, #0
 8002528:	d029      	beq.n	800257e <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 800252a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800252c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002530:	d902      	bls.n	8002538 <DNS_run+0x70>
 8002532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002536:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <DNS_run+0x104>)
 800253a:	7818      	ldrb	r0, [r3, #0]
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <DNS_run+0x108>)
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	f107 0414 	add.w	r4, r7, #20
 8002544:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002546:	f107 0312 	add.w	r3, r7, #18
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	4623      	mov	r3, r4
 800254e:	f000 fff3 	bl	8003538 <recvfrom>
 8002552:	4603      	mov	r3, r0
 8002554:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <DNS_run+0x108>)
 8002558:	6819      	ldr	r1, [r3, #0]
 800255a:	f107 0318 	add.w	r3, r7, #24
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fde9 	bl	8002138 <parseDNSMSG>
 8002566:	4603      	mov	r3, r0
 8002568:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 800256c:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <DNS_run+0x104>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fbb0 	bl	8002cd8 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8002578:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 800257c:	e01e      	b.n	80025bc <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 800257e:	f7ff ff61 	bl	8002444 <check_DNS_timeout>
 8002582:	4603      	mov	r3, r0
 8002584:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 8002588:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800258c:	2b00      	cmp	r3, #0
 800258e:	da06      	bge.n	800259e <DNS_run+0xd6>
			close(DNS_SOCKET);
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <DNS_run+0x104>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fb9f 	bl	8002cd8 <close>
			return 0; // timeout occurred
 800259a:	2300      	movs	r3, #0
 800259c:	e00e      	b.n	80025bc <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 800259e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1b7      	bne.n	8002516 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <DNS_run+0x104>)
 80025a8:	7818      	ldrb	r0, [r3, #0]
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <DNS_run+0x108>)
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80025b0:	2335      	movs	r3, #53	; 0x35
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f000 fe89 	bl	80032cc <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 80025ba:	e7ac      	b.n	8002516 <DNS_run+0x4e>
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3734      	adds	r7, #52	; 0x34
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd90      	pop	{r4, r7, pc}
 80025c4:	2000010c 	.word	0x2000010c
 80025c8:	20000108 	.word	0x20000108
 80025cc:	20000104 	.word	0x20000104
 80025d0:	20000100 	.word	0x20000100

080025d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <MX_FREERTOS_Init+0x18>)
 80025da:	2100      	movs	r1, #0
 80025dc:	4804      	ldr	r0, [pc, #16]	; (80025f0 <MX_FREERTOS_Init+0x1c>)
 80025de:	f003 fe67 	bl	80062b0 <osThreadNew>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <MX_FREERTOS_Init+0x20>)
 80025e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	08008fbc 	.word	0x08008fbc
 80025f0:	080025f9 	.word	0x080025f9
 80025f4:	20000110 	.word	0x20000110

080025f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */



	initEth();
 8002600:	f000 f8a8 	bl	8002754 <initEth>
	while(1){
			osDelay(1000);
 8002604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002608:	f003 fee4 	bl	80063d4 <osDelay>
 800260c:	e7fa      	b.n	8002604 <StartDefaultTask+0xc>
	...

08002610 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <MX_GPIO_Init+0x5c>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	4a0f      	ldr	r2, [pc, #60]	; (800266c <MX_GPIO_Init+0x5c>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6313      	str	r3, [r2, #48]	; 0x30
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <MX_GPIO_Init+0x5c>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Eth_CS_GPIO_Port, Eth_CS_Pin, GPIO_PIN_RESET);
 8002640:	2200      	movs	r2, #0
 8002642:	2110      	movs	r1, #16
 8002644:	480a      	ldr	r0, [pc, #40]	; (8002670 <MX_GPIO_Init+0x60>)
 8002646:	f002 fabd 	bl	8004bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Eth_CS_Pin;
 800264a:	2310      	movs	r3, #16
 800264c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264e:	2301      	movs	r3, #1
 8002650:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Eth_CS_GPIO_Port, &GPIO_InitStruct);
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4804      	ldr	r0, [pc, #16]	; (8002670 <MX_GPIO_Init+0x60>)
 8002660:	f002 f904 	bl	800486c <HAL_GPIO_Init>

}
 8002664:	bf00      	nop
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40023800 	.word	0x40023800
 8002670:	40020000 	.word	0x40020000

08002674 <W5500_Select>:

#define DHCP_SOCKET     0
#define DNS_SOCKET      1
#define HTTP_SOCKET     2

void W5500_Select(void) {
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Eth_CS_GPIO_Port, Eth_CS_Pin, GPIO_PIN_RESET);
 8002678:	2200      	movs	r2, #0
 800267a:	2110      	movs	r1, #16
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <W5500_Select+0x14>)
 800267e:	f002 faa1 	bl	8004bc4 <HAL_GPIO_WritePin>
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40020000 	.word	0x40020000

0800268c <W5500_Unselect>:

void W5500_Unselect(void) {
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Eth_CS_GPIO_Port, Eth_CS_Pin, GPIO_PIN_SET);
 8002690:	2201      	movs	r2, #1
 8002692:	2110      	movs	r1, #16
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <W5500_Unselect+0x14>)
 8002696:	f002 fa95 	bl	8004bc4 <HAL_GPIO_WritePin>
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40020000 	.word	0x40020000

080026a4 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 80026b0:	887a      	ldrh	r2, [r7, #2]
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4803      	ldr	r0, [pc, #12]	; (80026c8 <W5500_ReadBuff+0x24>)
 80026ba:	f003 f886 	bl	80057ca <HAL_SPI_Receive>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000934 	.word	0x20000934

080026cc <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 80026d8:	887a      	ldrh	r2, [r7, #2]
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4803      	ldr	r0, [pc, #12]	; (80026f0 <W5500_WriteBuff+0x24>)
 80026e2:	f002 ff36 	bl	8005552 <HAL_SPI_Transmit>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000934 	.word	0x20000934

080026f4 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	2101      	movs	r1, #1
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ffd0 	bl	80026a4 <W5500_ReadBuff>
    return byte;
 8002704:	79fb      	ldrb	r3, [r7, #7]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8002718:	1dfb      	adds	r3, r7, #7
 800271a:	2101      	movs	r1, #1
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ffd5 	bl	80026cc <W5500_WriteBuff>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <Callback_IPAssigned>:

volatile bool ip_assigned = false;

void Callback_IPAssigned(void) {
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
    ip_assigned = true;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <Callback_IPAssigned+0x14>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	20000114 	.word	0x20000114

08002744 <Callback_IPConflict>:

void Callback_IPConflict(void) {
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <initEth>:
// 1K should be enough, see https://forum.wiznet.io/t/topic/1612/2
uint8_t dhcp_buffer[1024];
// 1K seems to be enough for this buffer as well
uint8_t dns_buffer[1024];

void initEth() {
 8002754:	b5b0      	push	{r4, r5, r7, lr}
 8002756:	b09c      	sub	sp, #112	; 0x70
 8002758:	af00      	add	r7, sp, #0

    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 800275a:	498a      	ldr	r1, [pc, #552]	; (8002984 <initEth+0x230>)
 800275c:	488a      	ldr	r0, [pc, #552]	; (8002988 <initEth+0x234>)
 800275e:	f001 fd1f 	bl	80041a0 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8002762:	498a      	ldr	r1, [pc, #552]	; (800298c <initEth+0x238>)
 8002764:	488a      	ldr	r0, [pc, #552]	; (8002990 <initEth+0x23c>)
 8002766:	f001 fd41 	bl	80041ec <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 800276a:	498a      	ldr	r1, [pc, #552]	; (8002994 <initEth+0x240>)
 800276c:	488a      	ldr	r0, [pc, #552]	; (8002998 <initEth+0x244>)
 800276e:	f001 fd69 	bl	8004244 <reg_wizchip_spiburst_cbfunc>

    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8002772:	4a8a      	ldr	r2, [pc, #552]	; (800299c <initEth+0x248>)
 8002774:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800277c:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8002780:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002784:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f001 fdd2 	bl	8004334 <wizchip_init>

    wiz_NetInfo net_info = {
 8002790:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
 80027a0:	f8c3 2013 	str.w	r2, [r3, #19]
 80027a4:	4a7e      	ldr	r2, [pc, #504]	; (80029a0 <initEth+0x24c>)
 80027a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027ae:	6018      	str	r0, [r3, #0]
 80027b0:	3304      	adds	r3, #4
 80027b2:	8019      	strh	r1, [r3, #0]
 80027b4:	2302      	movs	r3, #2
 80027b6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        .mac  = { 0xEA, 0x11, 0x22, 0x33, 0x44, 0xEA },
        .dhcp = NETINFO_DHCP
    };
    // set MAC address before using DHCP
    setSHAR(net_info.mac);
 80027ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027be:	2206      	movs	r2, #6
 80027c0:	4619      	mov	r1, r3
 80027c2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80027c6:	f001 fa91 	bl	8003cec <WIZCHIP_WRITE_BUF>
    DHCP_init(DHCP_SOCKET, dhcp_buffer);
 80027ca:	4976      	ldr	r1, [pc, #472]	; (80029a4 <initEth+0x250>)
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7ff f97d 	bl	8001acc <DHCP_init>

    reg_dhcp_cbfunc(
 80027d2:	4a75      	ldr	r2, [pc, #468]	; (80029a8 <initEth+0x254>)
 80027d4:	4975      	ldr	r1, [pc, #468]	; (80029ac <initEth+0x258>)
 80027d6:	4875      	ldr	r0, [pc, #468]	; (80029ac <initEth+0x258>)
 80027d8:	f7fd fed6 	bl	8000588 <reg_dhcp_cbfunc>
        Callback_IPAssigned,
        Callback_IPConflict
    );

    // actually should be called in a loop, e.g. by timer
    uint32_t ctr = 10000;
 80027dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80027e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    while((!ip_assigned) && (ctr > 0)) {
 80027e2:	e004      	b.n	80027ee <initEth+0x9a>
        DHCP_run();
 80027e4:	f7fe ffba 	bl	800175c <DHCP_run>
        ctr--;
 80027e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ea:	3b01      	subs	r3, #1
 80027ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    while((!ip_assigned) && (ctr > 0)) {
 80027ee:	4b70      	ldr	r3, [pc, #448]	; (80029b0 <initEth+0x25c>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f083 0301 	eor.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <initEth+0xb0>
 80027fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1ef      	bne.n	80027e4 <initEth+0x90>
    }
    if(!ip_assigned) {
 8002804:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <initEth+0x25c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f083 0301 	eor.w	r3, r3, #1
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 80ae 	bne.w	8002972 <initEth+0x21e>
        return;
    }

    getIPfromDHCP(net_info.ip);
 8002816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800281a:	3306      	adds	r3, #6
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff f9ff 	bl	8001c20 <getIPfromDHCP>
    getGWfromDHCP(net_info.gw);
 8002822:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002826:	330e      	adds	r3, #14
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fa19 	bl	8001c60 <getGWfromDHCP>
    getSNfromDHCP(net_info.sn);
 800282e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002832:	330a      	adds	r3, #10
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fa33 	bl	8001ca0 <getSNfromDHCP>

    uint8_t dns[4];
    getDNSfromDHCP(dns);
 800283a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fa4e 	bl	8001ce0 <getDNSfromDHCP>


    wizchip_setnetinfo(&net_info);
 8002844:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002848:	4618      	mov	r0, r3
 800284a:	f001 fdff 	bl	800444c <wizchip_setnetinfo>
    DNS_init(DNS_SOCKET, dns_buffer);
 800284e:	4959      	ldr	r1, [pc, #356]	; (80029b4 <initEth+0x260>)
 8002850:	2001      	movs	r0, #1
 8002852:	f7ff fe1d 	bl	8002490 <DNS_init>

    uint8_t addr[4];
    {
        char domain_name[] = "eax.me";
 8002856:	4a58      	ldr	r2, [pc, #352]	; (80029b8 <initEth+0x264>)
 8002858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800285c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002860:	6018      	str	r0, [r3, #0]
 8002862:	3304      	adds	r3, #4
 8002864:	8019      	strh	r1, [r3, #0]
 8002866:	3302      	adds	r3, #2
 8002868:	0c0a      	lsrs	r2, r1, #16
 800286a:	701a      	strb	r2, [r3, #0]
        int8_t res = DNS_run(dns, (uint8_t*)&domain_name, addr);
 800286c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002870:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002874:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fe25 	bl	80024c8 <DNS_run>
 800287e:	4603      	mov	r3, r0
 8002880:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
        if(res != 1) {
 8002884:	f997 3069 	ldrsb.w	r3, [r7, #105]	; 0x69
 8002888:	2b01      	cmp	r3, #1
 800288a:	d174      	bne.n	8002976 <initEth+0x222>
            return;
        }
    }

    uint8_t http_socket = HTTP_SOCKET;
 800288c:	2302      	movs	r3, #2
 800288e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
    uint8_t code = socket(http_socket, Sn_MR_TCP, 10888, 0);
 8002892:	f897 0068 	ldrb.w	r0, [r7, #104]	; 0x68
 8002896:	2300      	movs	r3, #0
 8002898:	f642 2288 	movw	r2, #10888	; 0x2a88
 800289c:	2101      	movs	r1, #1
 800289e:	f000 f907 	bl	8002ab0 <socket>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if(code != http_socket) {
 80028a8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80028ac:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d162      	bne.n	800297a <initEth+0x226>
        return;
    }

    code = connect(http_socket, addr, 80);
 80028b4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80028b8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80028bc:	2250      	movs	r2, #80	; 0x50
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fa78 	bl	8002db4 <connect>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if(code != SOCK_OK) {
 80028ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d005      	beq.n	80028de <initEth+0x18a>
        close(http_socket);
 80028d2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f9fe 	bl	8002cd8 <close>
        return;
 80028dc:	e04e      	b.n	800297c <initEth+0x228>
    }


    {
        char req[] = "GET / HTTP/1.0\r\nHost: eax.me\r\n\r\n";
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <initEth+0x268>)
 80028e0:	1d3c      	adds	r4, r7, #4
 80028e2:	461d      	mov	r5, r3
 80028e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ec:	682b      	ldr	r3, [r5, #0]
 80028ee:	7023      	strb	r3, [r4, #0]
        uint16_t len = sizeof(req) - 1;
 80028f0:	2320      	movs	r3, #32
 80028f2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        uint8_t* buff = (uint8_t*)&req;
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	663b      	str	r3, [r7, #96]	; 0x60
        while(len > 0) {
 80028fa:	e018      	b.n	800292e <initEth+0x1da>
;
            int32_t nbytes = send(http_socket, buff, len);
 80028fc:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8002900:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002904:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fb30 	bl	8002f6c <send>
 800290c:	65b8      	str	r0, [r7, #88]	; 0x58
            if(nbytes <= 0) {
 800290e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002910:	2b00      	cmp	r3, #0
 8002912:	dc05      	bgt.n	8002920 <initEth+0x1cc>
                close(http_socket);
 8002914:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002918:	4618      	mov	r0, r3
 800291a:	f000 f9dd 	bl	8002cd8 <close>
 800291e:	e02d      	b.n	800297c <initEth+0x228>
                return;
            }

            len -= nbytes;
 8002920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002922:	b29b      	uxth	r3, r3
 8002924:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        while(len > 0) {
 800292e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e2      	bne.n	80028fc <initEth+0x1a8>


    {
        char buff[32];
        for(;;) {
            int32_t nbytes = recv(http_socket, (uint8_t*)&buff, sizeof(buff)-1);
 8002936:	1d39      	adds	r1, r7, #4
 8002938:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800293c:	221f      	movs	r2, #31
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fc0e 	bl	8003160 <recv>
 8002944:	65f8      	str	r0, [r7, #92]	; 0x5c
            if(nbytes == SOCKERR_SOCKSTATUS) {
 8002946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002948:	f113 0f07 	cmn.w	r3, #7
 800294c:	d008      	beq.n	8002960 <initEth+0x20c>
                break;
            }

            if(nbytes <= 0) {
 800294e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002950:	2b00      	cmp	r3, #0
 8002952:	dd07      	ble.n	8002964 <initEth+0x210>
                break;
            }

            buff[nbytes] = '\0';
 8002954:	1d3a      	adds	r2, r7, #4
 8002956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002958:	4413      	add	r3, r2
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
        for(;;) {
 800295e:	e7ea      	b.n	8002936 <initEth+0x1e2>
                break;
 8002960:	bf00      	nop
 8002962:	e000      	b.n	8002966 <initEth+0x212>
                break;
 8002964:	bf00      	nop
        }
    }

    close(http_socket);
 8002966:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f9b4 	bl	8002cd8 <close>
 8002970:	e004      	b.n	800297c <initEth+0x228>
        return;
 8002972:	bf00      	nop
 8002974:	e002      	b.n	800297c <initEth+0x228>
            return;
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <initEth+0x228>
        return;
 800297a:	bf00      	nop
}
 800297c:	3770      	adds	r7, #112	; 0x70
 800297e:	46bd      	mov	sp, r7
 8002980:	bdb0      	pop	{r4, r5, r7, pc}
 8002982:	bf00      	nop
 8002984:	0800268d 	.word	0x0800268d
 8002988:	08002675 	.word	0x08002675
 800298c:	0800270f 	.word	0x0800270f
 8002990:	080026f5 	.word	0x080026f5
 8002994:	080026cd 	.word	0x080026cd
 8002998:	080026a5 	.word	0x080026a5
 800299c:	08008f68 	.word	0x08008f68
 80029a0:	08008f70 	.word	0x08008f70
 80029a4:	20000118 	.word	0x20000118
 80029a8:	08002745 	.word	0x08002745
 80029ac:	0800272d 	.word	0x0800272d
 80029b0:	20000114 	.word	0x20000114
 80029b4:	20000518 	.word	0x20000518
 80029b8:	08008f78 	.word	0x08008f78
 80029bc:	08008f80 	.word	0x08008f80

080029c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029c4:	f001 fdac 	bl	8004520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029c8:	f000 f80c 	bl	80029e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029cc:	f7ff fe20 	bl	8002610 <MX_GPIO_Init>
  MX_SPI1_Init();
 80029d0:	f000 ffa0 	bl	8003914 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80029d4:	f003 fc22 	bl	800621c <osKernelInitialize>
  MX_FREERTOS_Init();
 80029d8:	f7ff fdfc 	bl	80025d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80029dc:	f003 fc42 	bl	8006264 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <main+0x20>
	...

080029e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b094      	sub	sp, #80	; 0x50
 80029e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ea:	f107 0320 	add.w	r3, r7, #32
 80029ee:	2230      	movs	r2, #48	; 0x30
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f006 f98a 	bl	8008d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f8:	f107 030c 	add.w	r3, r7, #12
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <SystemClock_Config+0xb8>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	4a22      	ldr	r2, [pc, #136]	; (8002a9c <SystemClock_Config+0xb8>)
 8002a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a16:	6413      	str	r3, [r2, #64]	; 0x40
 8002a18:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <SystemClock_Config+0xb8>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a24:	2300      	movs	r3, #0
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <SystemClock_Config+0xbc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a30:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <SystemClock_Config+0xbc>)
 8002a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <SystemClock_Config+0xbc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a44:	2302      	movs	r3, #2
 8002a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a54:	f107 0320 	add.w	r3, r7, #32
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 f8cd 	bl	8004bf8 <HAL_RCC_OscConfig>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002a64:	f000 f81e 	bl	8002aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a68:	230f      	movs	r3, #15
 8002a6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fb30 	bl	80050e8 <HAL_RCC_ClockConfig>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002a8e:	f000 f809 	bl	8002aa4 <Error_Handler>
  }
}
 8002a92:	bf00      	nop
 8002a94:	3750      	adds	r7, #80	; 0x50
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40007000 	.word	0x40007000

08002aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa8:	b672      	cpsid	i
}
 8002aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002aac:	e7fe      	b.n	8002aac <Error_Handler+0x8>
	...

08002ab0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	4608      	mov	r0, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	4623      	mov	r3, r4
 8002ac0:	71fb      	strb	r3, [r7, #7]
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71bb      	strb	r3, [r7, #6]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	80bb      	strh	r3, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d902      	bls.n	8002ada <socket+0x2a>
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	e0f0      	b.n	8002cbc <socket+0x20c>
	switch(protocol)
 8002ada:	79bb      	ldrb	r3, [r7, #6]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d005      	beq.n	8002aec <socket+0x3c>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	dd11      	ble.n	8002b08 <socket+0x58>
 8002ae4:	3b02      	subs	r3, #2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d80e      	bhi.n	8002b08 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002aea:	e011      	b.n	8002b10 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002aec:	f107 030c 	add.w	r3, r7, #12
 8002af0:	2204      	movs	r2, #4
 8002af2:	4619      	mov	r1, r3
 8002af4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002af8:	f001 f898 	bl	8003c2c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d105      	bne.n	8002b0e <socket+0x5e>
 8002b02:	f06f 0302 	mvn.w	r3, #2
 8002b06:	e0d9      	b.n	8002cbc <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002b08:	f06f 0304 	mvn.w	r3, #4
 8002b0c:	e0d6      	b.n	8002cbc <socket+0x20c>
	    break;
 8002b0e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <socket+0x70>
 8002b1a:	f06f 0305 	mvn.w	r3, #5
 8002b1e:	e0cd      	b.n	8002cbc <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d028      	beq.n	8002b78 <socket+0xc8>
	{
   	switch(protocol)
 8002b26:	79bb      	ldrb	r3, [r7, #6]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d002      	beq.n	8002b32 <socket+0x82>
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d008      	beq.n	8002b42 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002b30:	e022      	b.n	8002b78 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d11a      	bne.n	8002b72 <socket+0xc2>
 8002b3c:	f06f 0305 	mvn.w	r3, #5
 8002b40:	e0bc      	b.n	8002cbc <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d006      	beq.n	8002b5a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	db02      	blt.n	8002b5a <socket+0xaa>
 8002b54:	f06f 0305 	mvn.w	r3, #5
 8002b58:	e0b0      	b.n	8002cbc <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db04      	blt.n	8002b76 <socket+0xc6>
 8002b6c:	f06f 0305 	mvn.w	r3, #5
 8002b70:	e0a4      	b.n	8002cbc <socket+0x20c>
   	      break;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <socket+0xc8>
   	      break;
 8002b76:	bf00      	nop
   	}
   }
	close(sn);
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f8ac 	bl	8002cd8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	3301      	adds	r3, #1
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b8e:	f023 030f 	bic.w	r3, r3, #15
 8002b92:	b25a      	sxtb	r2, r3
 8002b94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f000 fff6 	bl	8003b90 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d110      	bne.n	8002bcc <socket+0x11c>
	{
	   port = sock_any_port++;
 8002baa:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <socket+0x214>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	b291      	uxth	r1, r2
 8002bb2:	4a44      	ldr	r2, [pc, #272]	; (8002cc4 <socket+0x214>)
 8002bb4:	8011      	strh	r1, [r2, #0]
 8002bb6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002bb8:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <socket+0x214>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d103      	bne.n	8002bcc <socket+0x11c>
 8002bc4:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <socket+0x214>)
 8002bc6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002bca:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd8:	461a      	mov	r2, r3
 8002bda:	88bb      	ldrh	r3, [r7, #4]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	4619      	mov	r1, r3
 8002be4:	4610      	mov	r0, r2
 8002be6:	f000 ffd3 	bl	8003b90 <WIZCHIP_WRITE>
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	3301      	adds	r3, #1
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	88bb      	ldrh	r3, [r7, #4]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f000 ffc6 	bl	8003b90 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	3301      	adds	r3, #1
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c10:	2101      	movs	r1, #1
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 ffbc 	bl	8003b90 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002c18:	bf00      	nop
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	3301      	adds	r3, #1
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 ff66 	bl	8003af8 <WIZCHIP_READ>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f3      	bne.n	8002c1a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2201      	movs	r2, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	b21b      	sxth	r3, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	b21a      	sxth	r2, r3
 8002c40:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <socket+0x218>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	b21b      	sxth	r3, r3
 8002c46:	4013      	ands	r3, r2
 8002c48:	b21b      	sxth	r3, r3
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <socket+0x218>)
 8002c4e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 0201 	and.w	r2, r3, #1
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	b21a      	sxth	r2, r3
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <socket+0x218>)
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b21b      	sxth	r3, r3
 8002c64:	4313      	orrs	r3, r2
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <socket+0x218>)
 8002c6c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	2201      	movs	r2, #1
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	b21b      	sxth	r3, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	b21a      	sxth	r2, r3
 8002c7c:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <socket+0x21c>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b21b      	sxth	r3, r3
 8002c82:	4013      	ands	r3, r2
 8002c84:	b21b      	sxth	r3, r3
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <socket+0x21c>)
 8002c8a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	4a10      	ldr	r2, [pc, #64]	; (8002cd0 <socket+0x220>)
 8002c90:	2100      	movs	r1, #0
 8002c92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <socket+0x224>)
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002c9e:	bf00      	nop
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 ff23 	bl	8003af8 <WIZCHIP_READ>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f3      	beq.n	8002ca0 <socket+0x1f0>
   return (int8_t)sn;
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	2000001c 	.word	0x2000001c
 8002cc8:	20000918 	.word	0x20000918
 8002ccc:	2000091a 	.word	0x2000091a
 8002cd0:	2000091c 	.word	0x2000091c
 8002cd4:	2000092c 	.word	0x2000092c

08002cd8 <close>:

int8_t close(uint8_t sn)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d902      	bls.n	8002cee <close+0x16>
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cec:	e055      	b.n	8002d9a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002cfa:	2110      	movs	r1, #16
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 ff47 	bl	8003b90 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002d02:	bf00      	nop
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	3301      	adds	r3, #1
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fef1 	bl	8003af8 <WIZCHIP_READ>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f3      	bne.n	8002d04 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	3301      	adds	r3, #1
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d28:	211f      	movs	r1, #31
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 ff30 	bl	8003b90 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	2201      	movs	r2, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	b21b      	sxth	r3, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	b21a      	sxth	r2, r3
 8002d3e:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <close+0xcc>)
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	b21b      	sxth	r3, r3
 8002d44:	4013      	ands	r3, r2
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <close+0xcc>)
 8002d4c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	2201      	movs	r2, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	b21a      	sxth	r2, r3
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <close+0xd0>)
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b21b      	sxth	r3, r3
 8002d62:	4013      	ands	r3, r2
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <close+0xd0>)
 8002d6a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <close+0xd4>)
 8002d70:	2100      	movs	r1, #0
 8002d72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	4a0d      	ldr	r2, [pc, #52]	; (8002db0 <close+0xd8>)
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002d7e:	bf00      	nop
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	3301      	adds	r3, #1
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 feb3 	bl	8003af8 <WIZCHIP_READ>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f3      	bne.n	8002d80 <close+0xa8>
	return SOCK_OK;
 8002d98:	2301      	movs	r3, #1
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000918 	.word	0x20000918
 8002da8:	2000091a 	.word	0x2000091a
 8002dac:	2000091c 	.word	0x2000091c
 8002db0:	2000092c 	.word	0x2000092c

08002db4 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	6039      	str	r1, [r7, #0]
 8002dbe:	71fb      	strb	r3, [r7, #7]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d902      	bls.n	8002dd0 <connect+0x1c>
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	e0c6      	b.n	8002f5e <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fe8d 	bl	8003af8 <WIZCHIP_READ>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d002      	beq.n	8002dee <connect+0x3a>
 8002de8:	f06f 0304 	mvn.w	r3, #4
 8002dec:	e0b7      	b.n	8002f5e <connect+0x1aa>
   CHECK_SOCKINIT();
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	3301      	adds	r3, #1
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fe7c 	bl	8003af8 <WIZCHIP_READ>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b13      	cmp	r3, #19
 8002e04:	d002      	beq.n	8002e0c <connect+0x58>
 8002e06:	f06f 0302 	mvn.w	r3, #2
 8002e0a:	e0a8      	b.n	8002f5e <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	3201      	adds	r2, #1
 8002e1a:	7812      	ldrb	r2, [r2, #0]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	3202      	adds	r2, #2
 8002e28:	7812      	ldrb	r2, [r2, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	3203      	adds	r2, #3
 8002e36:	7812      	ldrb	r2, [r2, #0]
 8002e38:	4413      	add	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d002      	beq.n	8002e4a <connect+0x96>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <connect+0x9c>
 8002e4a:	f06f 030b 	mvn.w	r3, #11
 8002e4e:	e086      	b.n	8002f5e <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002e50:	88bb      	ldrh	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <connect+0xa8>
 8002e56:	f06f 030a 	mvn.w	r3, #10
 8002e5a:	e080      	b.n	8002f5e <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	3301      	adds	r3, #1
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002e68:	2204      	movs	r2, #4
 8002e6a:	6839      	ldr	r1, [r7, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 ff3d 	bl	8003cec <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	3301      	adds	r3, #1
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e7e:	461a      	mov	r2, r3
 8002e80:	88bb      	ldrh	r3, [r7, #4]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f000 fe80 	bl	8003b90 <WIZCHIP_WRITE>
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	3301      	adds	r3, #1
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	88bb      	ldrh	r3, [r7, #4]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f000 fe73 	bl	8003b90 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	3301      	adds	r3, #1
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fe69 	bl	8003b90 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002ebe:	bf00      	nop
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fe13 	bl	8003af8 <WIZCHIP_READ>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f3      	bne.n	8002ec0 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002ed8:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <connect+0x1b4>)
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	fa42 f303 	asr.w	r3, r2, r3
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d02b      	beq.n	8002f44 <connect+0x190>
 8002eec:	2300      	movs	r3, #0
 8002eee:	e036      	b.n	8002f5e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fdfb 	bl	8003af8 <WIZCHIP_READ>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00c      	beq.n	8002f26 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	3301      	adds	r3, #1
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f18:	2108      	movs	r1, #8
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fe38 	bl	8003b90 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8002f20:	f06f 030c 	mvn.w	r3, #12
 8002f24:	e01b      	b.n	8002f5e <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fde0 	bl	8003af8 <WIZCHIP_READ>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8002f3e:	f06f 0303 	mvn.w	r3, #3
 8002f42:	e00c      	b.n	8002f5e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	3301      	adds	r3, #1
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fdd1 	bl	8003af8 <WIZCHIP_READ>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b17      	cmp	r3, #23
 8002f5a:	d1c9      	bne.n	8002ef0 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8002f5c:	2301      	movs	r3, #1
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000918 	.word	0x20000918

08002f6c <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	6039      	str	r1, [r7, #0]
 8002f76:	71fb      	strb	r3, [r7, #7]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d902      	bls.n	8002f90 <send+0x24>
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8e:	e0de      	b.n	800314e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	3301      	adds	r3, #1
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fdad 	bl	8003af8 <WIZCHIP_READ>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d002      	beq.n	8002fae <send+0x42>
 8002fa8:	f06f 0304 	mvn.w	r3, #4
 8002fac:	e0cf      	b.n	800314e <send+0x1e2>
   CHECK_SOCKDATA();
 8002fae:	88bb      	ldrh	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d102      	bne.n	8002fba <send+0x4e>
 8002fb4:	f06f 030d 	mvn.w	r3, #13
 8002fb8:	e0c9      	b.n	800314e <send+0x1e2>
   tmp = getSn_SR(sn);
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fd96 	bl	8003af8 <WIZCHIP_READ>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	2b17      	cmp	r3, #23
 8002fd4:	d005      	beq.n	8002fe2 <send+0x76>
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b1c      	cmp	r3, #28
 8002fda:	d002      	beq.n	8002fe2 <send+0x76>
 8002fdc:	f06f 0306 	mvn.w	r3, #6
 8002fe0:	e0b5      	b.n	800314e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8002fe2:	4b5d      	ldr	r3, [pc, #372]	; (8003158 <send+0x1ec>)
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	fa42 f303 	asr.w	r3, r2, r3
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d039      	beq.n	800306a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fd78 	bl	8003af8 <WIZCHIP_READ>
 8003008:	4603      	mov	r3, r0
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	d019      	beq.n	800304e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	3301      	adds	r3, #1
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003026:	2110      	movs	r1, #16
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fdb1 	bl	8003b90 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	2201      	movs	r2, #1
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	b21b      	sxth	r3, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	b21a      	sxth	r2, r3
 800303c:	4b46      	ldr	r3, [pc, #280]	; (8003158 <send+0x1ec>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b21b      	sxth	r3, r3
 8003042:	4013      	ands	r3, r2
 8003044:	b21b      	sxth	r3, r3
 8003046:	b29a      	uxth	r2, r3
 8003048:	4b43      	ldr	r3, [pc, #268]	; (8003158 <send+0x1ec>)
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	e00d      	b.n	800306a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d006      	beq.n	8003066 <send+0xfa>
      {
         close(sn);
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fe3c 	bl	8002cd8 <close>
         return SOCKERR_TIMEOUT;
 8003060:	f06f 030c 	mvn.w	r3, #12
 8003064:	e073      	b.n	800314e <send+0x1e2>
      }
      else return SOCK_BUSY;
 8003066:	2300      	movs	r3, #0
 8003068:	e071      	b.n	800314e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	3301      	adds	r3, #1
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fd3e 	bl	8003af8 <WIZCHIP_READ>
 800307c:	4603      	mov	r3, r0
 800307e:	b29b      	uxth	r3, r3
 8003080:	029b      	lsls	r3, r3, #10
 8003082:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003084:	88ba      	ldrh	r2, [r7, #4]
 8003086:	89bb      	ldrh	r3, [r7, #12]
 8003088:	429a      	cmp	r2, r3
 800308a:	d901      	bls.n	8003090 <send+0x124>
 800308c:	89bb      	ldrh	r3, [r7, #12]
 800308e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fe8a 	bl	8003dac <getSn_TX_FSR>
 8003098:	4603      	mov	r3, r0
 800309a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	3301      	adds	r3, #1
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fd25 	bl	8003af8 <WIZCHIP_READ>
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b17      	cmp	r3, #23
 80030b6:	d009      	beq.n	80030cc <send+0x160>
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b1c      	cmp	r3, #28
 80030bc:	d006      	beq.n	80030cc <send+0x160>
      {
         close(sn);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fe09 	bl	8002cd8 <close>
         return SOCKERR_SOCKSTATUS;
 80030c6:	f06f 0306 	mvn.w	r3, #6
 80030ca:	e040      	b.n	800314e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80030cc:	4b23      	ldr	r3, [pc, #140]	; (800315c <send+0x1f0>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	fa42 f303 	asr.w	r3, r2, r3
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <send+0x180>
 80030e0:	88ba      	ldrh	r2, [r7, #4]
 80030e2:	89bb      	ldrh	r3, [r7, #12]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d901      	bls.n	80030ec <send+0x180>
 80030e8:	2300      	movs	r3, #0
 80030ea:	e030      	b.n	800314e <send+0x1e2>
      if(len <= freesize) break;
 80030ec:	88ba      	ldrh	r2, [r7, #4]
 80030ee:	89bb      	ldrh	r3, [r7, #12]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d900      	bls.n	80030f6 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80030f4:	e7cc      	b.n	8003090 <send+0x124>
      if(len <= freesize) break;
 80030f6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80030f8:	88ba      	ldrh	r2, [r7, #4]
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 feea 	bl	8003ed8 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	3301      	adds	r3, #1
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003110:	2120      	movs	r1, #32
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fd3c 	bl	8003b90 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8003118:	bf00      	nop
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	3301      	adds	r3, #1
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fce6 	bl	8003af8 <WIZCHIP_READ>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f3      	bne.n	800311a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	2201      	movs	r2, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	b21a      	sxth	r2, r3
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <send+0x1ec>)
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b21b      	sxth	r3, r3
 8003142:	4313      	orrs	r3, r2
 8003144:	b21b      	sxth	r3, r3
 8003146:	b29a      	uxth	r2, r3
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <send+0x1ec>)
 800314a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800314c:	88bb      	ldrh	r3, [r7, #4]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000091a 	.word	0x2000091a
 800315c:	20000918 	.word	0x20000918

08003160 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	6039      	str	r1, [r7, #0]
 800316a:	71fb      	strb	r3, [r7, #7]
 800316c:	4613      	mov	r3, r2
 800316e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	2b08      	cmp	r3, #8
 800317c:	d902      	bls.n	8003184 <recv+0x24>
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
 8003182:	e09c      	b.n	80032be <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	3301      	adds	r3, #1
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fcb3 	bl	8003af8 <WIZCHIP_READ>
 8003192:	4603      	mov	r3, r0
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	2b01      	cmp	r3, #1
 800319a:	d002      	beq.n	80031a2 <recv+0x42>
 800319c:	f06f 0304 	mvn.w	r3, #4
 80031a0:	e08d      	b.n	80032be <recv+0x15e>
   CHECK_SOCKDATA();
 80031a2:	88bb      	ldrh	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <recv+0x4e>
 80031a8:	f06f 030d 	mvn.w	r3, #13
 80031ac:	e087      	b.n	80032be <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	3301      	adds	r3, #1
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fc9c 	bl	8003af8 <WIZCHIP_READ>
 80031c0:	4603      	mov	r3, r0
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	029b      	lsls	r3, r3, #10
 80031c6:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80031c8:	89ba      	ldrh	r2, [r7, #12]
 80031ca:	88bb      	ldrh	r3, [r7, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d201      	bcs.n	80031d4 <recv+0x74>
 80031d0:	89bb      	ldrh	r3, [r7, #12]
 80031d2:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fe33 	bl	8003e42 <getSn_RX_RSR>
 80031dc:	4603      	mov	r3, r0
 80031de:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	3301      	adds	r3, #1
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fc83 	bl	8003af8 <WIZCHIP_READ>
 80031f2:	4603      	mov	r3, r0
 80031f4:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b17      	cmp	r3, #23
 80031fa:	d026      	beq.n	800324a <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	2b1c      	cmp	r3, #28
 8003200:	d11c      	bne.n	800323c <recv+0xdc>
            {
               if(recvsize != 0) break;
 8003202:	89bb      	ldrh	r3, [r7, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d133      	bne.n	8003270 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fdce 	bl	8003dac <getSn_TX_FSR>
 8003210:	4603      	mov	r3, r0
 8003212:	461c      	mov	r4, r3
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	3301      	adds	r3, #1
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fc69 	bl	8003af8 <WIZCHIP_READ>
 8003226:	4603      	mov	r3, r0
 8003228:	029b      	lsls	r3, r3, #10
 800322a:	429c      	cmp	r4, r3
 800322c:	d10d      	bne.n	800324a <recv+0xea>
               {
                  close(sn);
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fd51 	bl	8002cd8 <close>
                  return SOCKERR_SOCKSTATUS;
 8003236:	f06f 0306 	mvn.w	r3, #6
 800323a:	e040      	b.n	80032be <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fd4a 	bl	8002cd8 <close>
               return SOCKERR_SOCKSTATUS;
 8003244:	f06f 0306 	mvn.w	r3, #6
 8003248:	e039      	b.n	80032be <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800324a:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <recv+0x168>)
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	fa42 f303 	asr.w	r3, r2, r3
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <recv+0x108>
 800325e:	89bb      	ldrh	r3, [r7, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <recv+0x108>
 8003264:	2300      	movs	r3, #0
 8003266:	e02a      	b.n	80032be <recv+0x15e>
         if(recvsize != 0) break;
 8003268:	89bb      	ldrh	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800326e:	e7b1      	b.n	80031d4 <recv+0x74>
               if(recvsize != 0) break;
 8003270:	bf00      	nop
 8003272:	e000      	b.n	8003276 <recv+0x116>
         if(recvsize != 0) break;
 8003274:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8003276:	89ba      	ldrh	r2, [r7, #12]
 8003278:	88bb      	ldrh	r3, [r7, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	d201      	bcs.n	8003282 <recv+0x122>
 800327e:	89bb      	ldrh	r3, [r7, #12]
 8003280:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8003282:	88ba      	ldrh	r2, [r7, #4]
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	6839      	ldr	r1, [r7, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fe81 	bl	8003f90 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	3301      	adds	r3, #1
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800329a:	2140      	movs	r1, #64	; 0x40
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fc77 	bl	8003b90 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80032a2:	bf00      	nop
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	3301      	adds	r3, #1
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fc21 	bl	8003af8 <WIZCHIP_READ>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f3      	bne.n	80032a4 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80032bc:	88bb      	ldrh	r3, [r7, #4]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd90      	pop	{r4, r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000918 	.word	0x20000918

080032cc <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	4603      	mov	r3, r0
 80032d8:	73fb      	strb	r3, [r7, #15]
 80032da:	4613      	mov	r3, r2
 80032dc:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d902      	bls.n	80032f2 <sendto+0x26>
 80032ec:	f04f 33ff 	mov.w	r3, #4294967295
 80032f0:	e11b      	b.n	800352a <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	3301      	adds	r3, #1
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fbfc 	bl	8003af8 <WIZCHIP_READ>
 8003300:	4603      	mov	r3, r0
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3b02      	subs	r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d902      	bls.n	8003312 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800330c:	f06f 0304 	mvn.w	r3, #4
 8003310:	e10b      	b.n	800352a <sendto+0x25e>
         break;
 8003312:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003314:	89bb      	ldrh	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <sendto+0x54>
 800331a:	f06f 030d 	mvn.w	r3, #13
 800331e:	e104      	b.n	800352a <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	3201      	adds	r2, #1
 800332e:	7812      	ldrb	r2, [r2, #0]
 8003330:	4413      	add	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	3202      	adds	r2, #2
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	4413      	add	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	3203      	adds	r2, #3
 800334a:	7812      	ldrb	r2, [r2, #0]
 800334c:	4413      	add	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10e      	bne.n	8003374 <sendto+0xa8>
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	3301      	adds	r3, #1
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fbca 	bl	8003af8 <WIZCHIP_READ>
 8003364:	4603      	mov	r3, r0
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b04      	cmp	r3, #4
 800336c:	d002      	beq.n	8003374 <sendto+0xa8>
 800336e:	f06f 030b 	mvn.w	r3, #11
 8003372:	e0da      	b.n	800352a <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8003374:	8c3b      	ldrh	r3, [r7, #32]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10e      	bne.n	8003398 <sendto+0xcc>
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	3301      	adds	r3, #1
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fbb8 	bl	8003af8 <WIZCHIP_READ>
 8003388:	4603      	mov	r3, r0
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d002      	beq.n	8003398 <sendto+0xcc>
 8003392:	f06f 030a 	mvn.w	r3, #10
 8003396:	e0c8      	b.n	800352a <sendto+0x25e>
   tmp = getSn_SR(sn);
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	3301      	adds	r3, #1
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fba7 	bl	8003af8 <WIZCHIP_READ>
 80033aa:	4603      	mov	r3, r0
 80033ac:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
 80033b0:	2b42      	cmp	r3, #66	; 0x42
 80033b2:	d008      	beq.n	80033c6 <sendto+0xfa>
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	2b22      	cmp	r3, #34	; 0x22
 80033b8:	d005      	beq.n	80033c6 <sendto+0xfa>
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	2b32      	cmp	r3, #50	; 0x32
 80033be:	d002      	beq.n	80033c6 <sendto+0xfa>
 80033c0:	f06f 0306 	mvn.w	r3, #6
 80033c4:	e0b1      	b.n	800352a <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	3301      	adds	r3, #1
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80033d2:	2204      	movs	r2, #4
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fc88 	bl	8003cec <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	3301      	adds	r3, #1
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e8:	461a      	mov	r2, r3
 80033ea:	8c3b      	ldrh	r3, [r7, #32]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	4619      	mov	r1, r3
 80033f4:	4610      	mov	r0, r2
 80033f6:	f000 fbcb 	bl	8003b90 <WIZCHIP_WRITE>
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	3301      	adds	r3, #1
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003406:	461a      	mov	r2, r3
 8003408:	8c3b      	ldrh	r3, [r7, #32]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f000 fbbe 	bl	8003b90 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	3301      	adds	r3, #1
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fb69 	bl	8003af8 <WIZCHIP_READ>
 8003426:	4603      	mov	r3, r0
 8003428:	b29b      	uxth	r3, r3
 800342a:	029b      	lsls	r3, r3, #10
 800342c:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800342e:	89ba      	ldrh	r2, [r7, #12]
 8003430:	8abb      	ldrh	r3, [r7, #20]
 8003432:	429a      	cmp	r2, r3
 8003434:	d901      	bls.n	800343a <sendto+0x16e>
 8003436:	8abb      	ldrh	r3, [r7, #20]
 8003438:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fcb5 	bl	8003dac <getSn_TX_FSR>
 8003442:	4603      	mov	r3, r0
 8003444:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3301      	adds	r3, #1
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fb50 	bl	8003af8 <WIZCHIP_READ>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d102      	bne.n	8003464 <sendto+0x198>
 800345e:	f06f 0303 	mvn.w	r3, #3
 8003462:	e062      	b.n	800352a <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003464:	4b33      	ldr	r3, [pc, #204]	; (8003534 <sendto+0x268>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	fa42 f303 	asr.w	r3, r2, r3
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <sendto+0x1b8>
 8003478:	89ba      	ldrh	r2, [r7, #12]
 800347a:	8abb      	ldrh	r3, [r7, #20]
 800347c:	429a      	cmp	r2, r3
 800347e:	d901      	bls.n	8003484 <sendto+0x1b8>
 8003480:	2300      	movs	r3, #0
 8003482:	e052      	b.n	800352a <sendto+0x25e>
      if(len <= freesize) break;
 8003484:	89ba      	ldrh	r2, [r7, #12]
 8003486:	8abb      	ldrh	r3, [r7, #20]
 8003488:	429a      	cmp	r2, r3
 800348a:	d900      	bls.n	800348e <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 800348c:	e7d5      	b.n	800343a <sendto+0x16e>
      if(len <= freesize) break;
 800348e:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8003490:	89ba      	ldrh	r2, [r7, #12]
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fd1e 	bl	8003ed8 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	3301      	adds	r3, #1
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034a8:	2120      	movs	r1, #32
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fb70 	bl	8003b90 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80034b0:	bf00      	nop
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	3301      	adds	r3, #1
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fb1a 	bl	8003af8 <WIZCHIP_READ>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f3      	bne.n	80034b2 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	3301      	adds	r3, #1
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fb0e 	bl	8003af8 <WIZCHIP_READ>
 80034dc:	4603      	mov	r3, r0
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00c      	beq.n	8003508 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	3301      	adds	r3, #1
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80034fa:	2110      	movs	r1, #16
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fb47 	bl	8003b90 <WIZCHIP_WRITE>
         break;
 8003502:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003504:	89bb      	ldrh	r3, [r7, #12]
 8003506:	e010      	b.n	800352a <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0db      	beq.n	80034ca <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	3301      	adds	r3, #1
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800351e:	2108      	movs	r1, #8
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fb35 	bl	8003b90 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8003526:	f06f 030c 	mvn.w	r3, #12
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000918 	.word	0x20000918

08003538 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	4603      	mov	r3, r0
 8003544:	73fb      	strb	r3, [r7, #15]
 8003546:	4613      	mov	r3, r2
 8003548:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800354a:	2300      	movs	r3, #0
 800354c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d902      	bls.n	800355a <recvfrom+0x22>
 8003554:	f04f 33ff 	mov.w	r3, #4294967295
 8003558:	e1d4      	b.n	8003904 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	3301      	adds	r3, #1
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fac8 	bl	8003af8 <WIZCHIP_READ>
 8003568:	4603      	mov	r3, r0
 800356a:	777b      	strb	r3, [r7, #29]
 800356c:	7f7b      	ldrb	r3, [r7, #29]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	3b02      	subs	r3, #2
 8003574:	2b02      	cmp	r3, #2
 8003576:	d902      	bls.n	800357e <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003578:	f06f 0304 	mvn.w	r3, #4
 800357c:	e1c2      	b.n	8003904 <recvfrom+0x3cc>
         break;
 800357e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003580:	89bb      	ldrh	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <recvfrom+0x54>
 8003586:	f06f 030d 	mvn.w	r3, #13
 800358a:	e1bb      	b.n	8003904 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	4a88      	ldr	r2, [pc, #544]	; (80037b0 <recvfrom+0x278>)
 8003590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d128      	bne.n	80035ea <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fc51 	bl	8003e42 <getSn_RX_RSR>
 80035a0:	4603      	mov	r3, r0
 80035a2:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	3301      	adds	r3, #1
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 faa1 	bl	8003af8 <WIZCHIP_READ>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <recvfrom+0x8a>
 80035bc:	f06f 0303 	mvn.w	r3, #3
 80035c0:	e1a0      	b.n	8003904 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80035c2:	4b7c      	ldr	r3, [pc, #496]	; (80037b4 <recvfrom+0x27c>)
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	fa42 f303 	asr.w	r3, r2, r3
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d004      	beq.n	80035e0 <recvfrom+0xa8>
 80035d6:	8bfb      	ldrh	r3, [r7, #30]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <recvfrom+0xa8>
 80035dc:	2300      	movs	r3, #0
 80035de:	e191      	b.n	8003904 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 80035e0:	8bfb      	ldrh	r3, [r7, #30]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d100      	bne.n	80035e8 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 80035e6:	e7d7      	b.n	8003598 <recvfrom+0x60>
         if(pack_len != 0) break;
 80035e8:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80035ea:	7f7b      	ldrb	r3, [r7, #29]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d079      	beq.n	80036e8 <recvfrom+0x1b0>
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	f300 8142 	bgt.w	800387e <recvfrom+0x346>
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d003      	beq.n	8003606 <recvfrom+0xce>
 80035fe:	2b03      	cmp	r3, #3
 8003600:	f000 80dc 	beq.w	80037bc <recvfrom+0x284>
 8003604:	e13b      	b.n	800387e <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	4a69      	ldr	r2, [pc, #420]	; (80037b0 <recvfrom+0x278>)
 800360a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d152      	bne.n	80036b8 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8003612:	f107 0114 	add.w	r1, r7, #20
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	2208      	movs	r2, #8
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fcb8 	bl	8003f90 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	3301      	adds	r3, #1
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800362c:	2140      	movs	r1, #64	; 0x40
 800362e:	4618      	mov	r0, r3
 8003630:	f000 faae 	bl	8003b90 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003634:	bf00      	nop
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	3301      	adds	r3, #1
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fa58 	bl	8003af8 <WIZCHIP_READ>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f3      	bne.n	8003636 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800364e:	7d3a      	ldrb	r2, [r7, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3301      	adds	r3, #1
 8003658:	7d7a      	ldrb	r2, [r7, #21]
 800365a:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3302      	adds	r3, #2
 8003660:	7dba      	ldrb	r2, [r7, #22]
 8003662:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3303      	adds	r3, #3
 8003668:	7dfa      	ldrb	r2, [r7, #23]
 800366a:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 800366c:	7e3b      	ldrb	r3, [r7, #24]
 800366e:	b29a      	uxth	r2, r3
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	b29a      	uxth	r2, r3
 800367c:	7e7b      	ldrb	r3, [r7, #25]
 800367e:	b29b      	uxth	r3, r3
 8003680:	4413      	add	r3, r2
 8003682:	b29a      	uxth	r2, r3
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8003688:	7eba      	ldrb	r2, [r7, #26]
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	b291      	uxth	r1, r2
 800368e:	4a48      	ldr	r2, [pc, #288]	; (80037b0 <recvfrom+0x278>)
 8003690:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	4a46      	ldr	r2, [pc, #280]	; (80037b0 <recvfrom+0x278>)
 8003698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	b299      	uxth	r1, r3
 80036a0:	7efb      	ldrb	r3, [r7, #27]
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	440a      	add	r2, r1
 80036a8:	b291      	uxth	r1, r2
 80036aa:	4a41      	ldr	r2, [pc, #260]	; (80037b0 <recvfrom+0x278>)
 80036ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	4a41      	ldr	r2, [pc, #260]	; (80037b8 <recvfrom+0x280>)
 80036b4:	2180      	movs	r1, #128	; 0x80
 80036b6:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	4a3d      	ldr	r2, [pc, #244]	; (80037b0 <recvfrom+0x278>)
 80036bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036c0:	89ba      	ldrh	r2, [r7, #12]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d202      	bcs.n	80036cc <recvfrom+0x194>
 80036c6:	89bb      	ldrh	r3, [r7, #12]
 80036c8:	83fb      	strh	r3, [r7, #30]
 80036ca:	e004      	b.n	80036d6 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	4a38      	ldr	r2, [pc, #224]	; (80037b0 <recvfrom+0x278>)
 80036d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036d4:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80036d6:	8bfb      	ldrh	r3, [r7, #30]
 80036d8:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80036da:	8bfa      	ldrh	r2, [r7, #30]
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fc55 	bl	8003f90 <wiz_recv_data>
			break;
 80036e6:	e0d6      	b.n	8003896 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	4a31      	ldr	r2, [pc, #196]	; (80037b0 <recvfrom+0x278>)
 80036ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d146      	bne.n	8003782 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 80036f4:	f107 0114 	add.w	r1, r7, #20
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2202      	movs	r2, #2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fc47 	bl	8003f90 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	3301      	adds	r3, #1
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800370e:	2140      	movs	r1, #64	; 0x40
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fa3d 	bl	8003b90 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003716:	bf00      	nop
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	3301      	adds	r3, #1
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f9e7 	bl	8003af8 <WIZCHIP_READ>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f3      	bne.n	8003718 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8003730:	7d3a      	ldrb	r2, [r7, #20]
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	b291      	uxth	r1, r2
 8003736:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <recvfrom+0x278>)
 8003738:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <recvfrom+0x278>)
 8003740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	b29a      	uxth	r2, r3
 8003748:	7d7b      	ldrb	r3, [r7, #21]
 800374a:	b29b      	uxth	r3, r3
 800374c:	4413      	add	r3, r2
 800374e:	b29a      	uxth	r2, r3
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	3a02      	subs	r2, #2
 8003754:	b291      	uxth	r1, r2
 8003756:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <recvfrom+0x278>)
 8003758:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	4a14      	ldr	r2, [pc, #80]	; (80037b0 <recvfrom+0x278>)
 8003760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003764:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8003768:	4293      	cmp	r3, r2
 800376a:	d906      	bls.n	800377a <recvfrom+0x242>
   			{
   			   close(sn);
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fab2 	bl	8002cd8 <close>
   			   return SOCKFATAL_PACKLEN;
 8003774:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8003778:	e0c4      	b.n	8003904 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <recvfrom+0x280>)
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <recvfrom+0x278>)
 8003786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800378a:	89ba      	ldrh	r2, [r7, #12]
 800378c:	429a      	cmp	r2, r3
 800378e:	d202      	bcs.n	8003796 <recvfrom+0x25e>
 8003790:	89bb      	ldrh	r3, [r7, #12]
 8003792:	83fb      	strh	r3, [r7, #30]
 8003794:	e004      	b.n	80037a0 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	4a05      	ldr	r2, [pc, #20]	; (80037b0 <recvfrom+0x278>)
 800379a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800379e:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80037a0:	8bfa      	ldrh	r2, [r7, #30]
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fbf2 	bl	8003f90 <wiz_recv_data>
		   break;
 80037ac:	e073      	b.n	8003896 <recvfrom+0x35e>
 80037ae:	bf00      	nop
 80037b0:	2000091c 	.word	0x2000091c
 80037b4:	20000918 	.word	0x20000918
 80037b8:	2000092c 	.word	0x2000092c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	4a53      	ldr	r2, [pc, #332]	; (800390c <recvfrom+0x3d4>)
 80037c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d144      	bne.n	8003852 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 80037c8:	f107 0114 	add.w	r1, r7, #20
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2206      	movs	r2, #6
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fbdd 	bl	8003f90 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	3301      	adds	r3, #1
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80037e2:	2140      	movs	r1, #64	; 0x40
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f9d3 	bl	8003b90 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80037ea:	bf00      	nop
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	3301      	adds	r3, #1
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f97d 	bl	8003af8 <WIZCHIP_READ>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f3      	bne.n	80037ec <recvfrom+0x2b4>
   			addr[0] = head[0];
 8003804:	7d3a      	ldrb	r2, [r7, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3301      	adds	r3, #1
 800380e:	7d7a      	ldrb	r2, [r7, #21]
 8003810:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3302      	adds	r3, #2
 8003816:	7dba      	ldrb	r2, [r7, #22]
 8003818:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3303      	adds	r3, #3
 800381e:	7dfa      	ldrb	r2, [r7, #23]
 8003820:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8003822:	7e3a      	ldrb	r2, [r7, #24]
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	b291      	uxth	r1, r2
 8003828:	4a38      	ldr	r2, [pc, #224]	; (800390c <recvfrom+0x3d4>)
 800382a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	4a36      	ldr	r2, [pc, #216]	; (800390c <recvfrom+0x3d4>)
 8003832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	b299      	uxth	r1, r3
 800383a:	7e7b      	ldrb	r3, [r7, #25]
 800383c:	b29a      	uxth	r2, r3
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	440a      	add	r2, r1
 8003842:	b291      	uxth	r1, r2
 8003844:	4a31      	ldr	r2, [pc, #196]	; (800390c <recvfrom+0x3d4>)
 8003846:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	4a30      	ldr	r2, [pc, #192]	; (8003910 <recvfrom+0x3d8>)
 800384e:	2180      	movs	r1, #128	; 0x80
 8003850:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	4a2d      	ldr	r2, [pc, #180]	; (800390c <recvfrom+0x3d4>)
 8003856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800385a:	89ba      	ldrh	r2, [r7, #12]
 800385c:	429a      	cmp	r2, r3
 800385e:	d202      	bcs.n	8003866 <recvfrom+0x32e>
 8003860:	89bb      	ldrh	r3, [r7, #12]
 8003862:	83fb      	strh	r3, [r7, #30]
 8003864:	e004      	b.n	8003870 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	4a28      	ldr	r2, [pc, #160]	; (800390c <recvfrom+0x3d4>)
 800386a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800386e:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003870:	8bfa      	ldrh	r2, [r7, #30]
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fb8a 	bl	8003f90 <wiz_recv_data>
			break;
 800387c:	e00b      	b.n	8003896 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800387e:	8bfa      	ldrh	r2, [r7, #30]
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	4611      	mov	r1, r2
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fbdf 	bl	8004048 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	491f      	ldr	r1, [pc, #124]	; (800390c <recvfrom+0x3d4>)
 800388e:	8bfa      	ldrh	r2, [r7, #30]
 8003890:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8003894:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	3301      	adds	r3, #1
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80038a2:	2140      	movs	r1, #64	; 0x40
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f973 	bl	8003b90 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80038aa:	bf00      	nop
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	3301      	adds	r3, #1
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 f91d 	bl	8003af8 <WIZCHIP_READ>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f3      	bne.n	80038ac <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	4a11      	ldr	r2, [pc, #68]	; (800390c <recvfrom+0x3d4>)
 80038c8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	8bfa      	ldrh	r2, [r7, #30]
 80038d0:	1a8a      	subs	r2, r1, r2
 80038d2:	b291      	uxth	r1, r2
 80038d4:	4a0d      	ldr	r2, [pc, #52]	; (800390c <recvfrom+0x3d4>)
 80038d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	4a0b      	ldr	r2, [pc, #44]	; (800390c <recvfrom+0x3d4>)
 80038de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	4a09      	ldr	r2, [pc, #36]	; (8003910 <recvfrom+0x3d8>)
 80038ea:	5cd2      	ldrb	r2, [r2, r3]
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	b2d1      	uxtb	r1, r2
 80038f4:	4a06      	ldr	r2, [pc, #24]	; (8003910 <recvfrom+0x3d8>)
 80038f6:	54d1      	strb	r1, [r2, r3]
 80038f8:	e003      	b.n	8003902 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <recvfrom+0x3d8>)
 80038fe:	2100      	movs	r1, #0
 8003900:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8003902:	8bfb      	ldrh	r3, [r7, #30]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	2000091c 	.word	0x2000091c
 8003910:	2000092c 	.word	0x2000092c

08003914 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003918:	4b17      	ldr	r3, [pc, #92]	; (8003978 <MX_SPI1_Init+0x64>)
 800391a:	4a18      	ldr	r2, [pc, #96]	; (800397c <MX_SPI1_Init+0x68>)
 800391c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800391e:	4b16      	ldr	r3, [pc, #88]	; (8003978 <MX_SPI1_Init+0x64>)
 8003920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003926:	4b14      	ldr	r3, [pc, #80]	; (8003978 <MX_SPI1_Init+0x64>)
 8003928:	2200      	movs	r2, #0
 800392a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800392c:	4b12      	ldr	r3, [pc, #72]	; (8003978 <MX_SPI1_Init+0x64>)
 800392e:	2200      	movs	r2, #0
 8003930:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003932:	4b11      	ldr	r3, [pc, #68]	; (8003978 <MX_SPI1_Init+0x64>)
 8003934:	2200      	movs	r2, #0
 8003936:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <MX_SPI1_Init+0x64>)
 800393a:	2200      	movs	r2, #0
 800393c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800393e:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <MX_SPI1_Init+0x64>)
 8003940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003944:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <MX_SPI1_Init+0x64>)
 8003948:	2200      	movs	r2, #0
 800394a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <MX_SPI1_Init+0x64>)
 800394e:	2200      	movs	r2, #0
 8003950:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <MX_SPI1_Init+0x64>)
 8003954:	2200      	movs	r2, #0
 8003956:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003958:	4b07      	ldr	r3, [pc, #28]	; (8003978 <MX_SPI1_Init+0x64>)
 800395a:	2200      	movs	r2, #0
 800395c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <MX_SPI1_Init+0x64>)
 8003960:	220a      	movs	r2, #10
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003964:	4804      	ldr	r0, [pc, #16]	; (8003978 <MX_SPI1_Init+0x64>)
 8003966:	f001 fd6b 	bl	8005440 <HAL_SPI_Init>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003970:	f7ff f898 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000934 	.word	0x20000934
 800397c:	40013000 	.word	0x40013000

08003980 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	; 0x28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	60da      	str	r2, [r3, #12]
 8003996:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <HAL_SPI_MspInit+0x94>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d133      	bne.n	8003a0a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <HAL_SPI_MspInit+0x98>)
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	4a1b      	ldr	r2, [pc, #108]	; (8003a18 <HAL_SPI_MspInit+0x98>)
 80039ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039b0:	6453      	str	r3, [r2, #68]	; 0x44
 80039b2:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_SPI_MspInit+0x98>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <HAL_SPI_MspInit+0x98>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <HAL_SPI_MspInit+0x98>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6313      	str	r3, [r2, #48]	; 0x30
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_SPI_MspInit+0x98>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Eth_SCK_Pin|Eth_MISO_Pin|Eth_MOSI_Pin;
 80039da:	23e0      	movs	r3, #224	; 0xe0
 80039dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039de:	2302      	movs	r3, #2
 80039e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e6:	2303      	movs	r3, #3
 80039e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039ea:	2305      	movs	r3, #5
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ee:	f107 0314 	add.w	r3, r7, #20
 80039f2:	4619      	mov	r1, r3
 80039f4:	4809      	ldr	r0, [pc, #36]	; (8003a1c <HAL_SPI_MspInit+0x9c>)
 80039f6:	f000 ff39 	bl	800486c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2105      	movs	r1, #5
 80039fe:	2023      	movs	r0, #35	; 0x23
 8003a00:	f000 fedb 	bl	80047ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003a04:	2023      	movs	r0, #35	; 0x23
 8003a06:	f000 fef4 	bl	80047f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	3728      	adds	r7, #40	; 0x28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40013000 	.word	0x40013000
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40020000 	.word	0x40020000

08003a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_MspInit+0x54>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <HAL_MspInit+0x54>)
 8003a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a34:	6453      	str	r3, [r2, #68]	; 0x44
 8003a36:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <HAL_MspInit+0x54>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3e:	607b      	str	r3, [r7, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	603b      	str	r3, [r7, #0]
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_MspInit+0x54>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <HAL_MspInit+0x54>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a50:	6413      	str	r3, [r2, #64]	; 0x40
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <HAL_MspInit+0x54>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	210f      	movs	r1, #15
 8003a62:	f06f 0001 	mvn.w	r0, #1
 8003a66:	f000 fea8 	bl	80047ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800

08003a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <NMI_Handler+0x4>

08003a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a82:	e7fe      	b.n	8003a82 <HardFault_Handler+0x4>

08003a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a88:	e7fe      	b.n	8003a88 <MemManage_Handler+0x4>

08003a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a8e:	e7fe      	b.n	8003a8e <BusFault_Handler+0x4>

08003a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a94:	e7fe      	b.n	8003a94 <UsageFault_Handler+0x4>

08003a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aa8:	f000 fd8c 	bl	80045c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003aac:	f004 f8ca 	bl	8007c44 <xTaskGetSchedulerState>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d001      	beq.n	8003aba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003ab6:	f004 feaf 	bl	8008818 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <SPI1_IRQHandler+0x10>)
 8003ac6:	f002 f933 	bl	8005d30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000934 	.word	0x20000934

08003ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <SystemInit+0x20>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <SystemInit+0x20>)
 8003ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003b00:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <WIZCHIP_READ+0x94>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003b06:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <WIZCHIP_READ+0x94>)
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003b0c:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <WIZCHIP_READ+0x94>)
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <WIZCHIP_READ+0x24>
 8003b14:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <WIZCHIP_READ+0x94>)
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d114      	bne.n	8003b46 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <WIZCHIP_READ+0x94>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	0c12      	lsrs	r2, r2, #16
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	4610      	mov	r0, r2
 8003b28:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <WIZCHIP_READ+0x94>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	0a12      	lsrs	r2, r2, #8
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	4610      	mov	r0, r2
 8003b36:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003b38:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <WIZCHIP_READ+0x94>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	4610      	mov	r0, r2
 8003b42:	4798      	blx	r3
 8003b44:	e011      	b.n	8003b6a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <WIZCHIP_READ+0x94>)
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	f107 020c 	add.w	r2, r7, #12
 8003b64:	2103      	movs	r1, #3
 8003b66:	4610      	mov	r0, r2
 8003b68:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <WIZCHIP_READ+0x94>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	4798      	blx	r3
 8003b70:	4603      	mov	r3, r0
 8003b72:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <WIZCHIP_READ+0x94>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003b7a:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <WIZCHIP_READ+0x94>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	4798      	blx	r3
   return ret;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000024 	.word	0x20000024

08003b90 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003b9c:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <WIZCHIP_WRITE+0x98>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003ba2:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <WIZCHIP_WRITE+0x98>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <WIZCHIP_WRITE+0x98>)
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d119      	bne.n	8003bec <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <WIZCHIP_WRITE+0x98>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	0c12      	lsrs	r2, r2, #16
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003bc6:	4b18      	ldr	r3, [pc, #96]	; (8003c28 <WIZCHIP_WRITE+0x98>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	0a12      	lsrs	r2, r2, #8
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003bd4:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <WIZCHIP_WRITE+0x98>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003be0:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <WIZCHIP_WRITE+0x98>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	4610      	mov	r0, r2
 8003be8:	4798      	blx	r3
 8003bea:	e013      	b.n	8003c14 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	0a1b      	lsrs	r3, r3, #8
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8003c06:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <WIZCHIP_WRITE+0x98>)
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	f107 020c 	add.w	r2, r7, #12
 8003c0e:	2104      	movs	r1, #4
 8003c10:	4610      	mov	r0, r2
 8003c12:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <WIZCHIP_WRITE+0x98>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003c1a:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <WIZCHIP_WRITE+0x98>)
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	4798      	blx	r3
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000024 	.word	0x20000024

08003c2c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003c3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <WIZCHIP_READ_BUF+0xbc>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003c40:	4b29      	ldr	r3, [pc, #164]	; (8003ce8 <WIZCHIP_READ_BUF+0xbc>)
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003c46:	4b28      	ldr	r3, [pc, #160]	; (8003ce8 <WIZCHIP_READ_BUF+0xbc>)
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <WIZCHIP_READ_BUF+0x2a>
 8003c4e:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <WIZCHIP_READ_BUF+0xbc>)
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d126      	bne.n	8003ca4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003c56:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <WIZCHIP_READ_BUF+0xbc>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	0c12      	lsrs	r2, r2, #16
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	4610      	mov	r0, r2
 8003c62:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003c64:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <WIZCHIP_READ_BUF+0xbc>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	0a12      	lsrs	r2, r2, #8
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <WIZCHIP_READ_BUF+0xbc>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	82fb      	strh	r3, [r7, #22]
 8003c82:	e00a      	b.n	8003c9a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003c84:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <WIZCHIP_READ_BUF+0xbc>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	8afa      	ldrh	r2, [r7, #22]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	188c      	adds	r4, r1, r2
 8003c8e:	4798      	blx	r3
 8003c90:	4603      	mov	r3, r0
 8003c92:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003c94:	8afb      	ldrh	r3, [r7, #22]
 8003c96:	3301      	adds	r3, #1
 8003c98:	82fb      	strh	r3, [r7, #22]
 8003c9a:	8afa      	ldrh	r2, [r7, #22]
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d3f0      	bcc.n	8003c84 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003ca2:	e017      	b.n	8003cd4 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	0c1b      	lsrs	r3, r3, #16
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <WIZCHIP_READ_BUF+0xbc>)
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	f107 0210 	add.w	r2, r7, #16
 8003cc2:	2103      	movs	r1, #3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <WIZCHIP_READ_BUF+0xbc>)
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	88fa      	ldrh	r2, [r7, #6]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	68b8      	ldr	r0, [r7, #8]
 8003cd2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <WIZCHIP_READ_BUF+0xbc>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003cda:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <WIZCHIP_READ_BUF+0xbc>)
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	4798      	blx	r3
}
 8003ce0:	bf00      	nop
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd90      	pop	{r4, r7, pc}
 8003ce8:	20000024 	.word	0x20000024

08003cec <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003cfa:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003d00:	4b29      	ldr	r3, [pc, #164]	; (8003da8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003d0e:	4b26      	ldr	r3, [pc, #152]	; (8003da8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d126      	bne.n	8003d64 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003d16:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	0c12      	lsrs	r2, r2, #16
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	4610      	mov	r0, r2
 8003d22:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003d24:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	0a12      	lsrs	r2, r2, #8
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003d32:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003d3e:	2300      	movs	r3, #0
 8003d40:	82fb      	strh	r3, [r7, #22]
 8003d42:	e00a      	b.n	8003d5a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003d44:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	8afa      	ldrh	r2, [r7, #22]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	7812      	ldrb	r2, [r2, #0]
 8003d50:	4610      	mov	r0, r2
 8003d52:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003d54:	8afb      	ldrh	r3, [r7, #22]
 8003d56:	3301      	adds	r3, #1
 8003d58:	82fb      	strh	r3, [r7, #22]
 8003d5a:	8afa      	ldrh	r2, [r7, #22]
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d3f0      	bcc.n	8003d44 <WIZCHIP_WRITE_BUF+0x58>
 8003d62:	e017      	b.n	8003d94 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	0c1b      	lsrs	r3, r3, #16
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	f107 0210 	add.w	r2, r7, #16
 8003d82:	2103      	movs	r1, #3
 8003d84:	4610      	mov	r0, r2
 8003d86:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003d88:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	88fa      	ldrh	r2, [r7, #6]
 8003d8e:	4611      	mov	r1, r2
 8003d90:	68b8      	ldr	r0, [r7, #8]
 8003d92:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003d9a:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	4798      	blx	r3
}
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000024 	.word	0x20000024

08003dac <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	81fb      	strh	r3, [r7, #14]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fe94 	bl	8003af8 <WIZCHIP_READ>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003dd4:	89bb      	ldrh	r3, [r7, #12]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	b29c      	uxth	r4, r3
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	3301      	adds	r3, #1
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fe86 	bl	8003af8 <WIZCHIP_READ>
 8003dec:	4603      	mov	r3, r0
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	4423      	add	r3, r4
 8003df2:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003df4:	89bb      	ldrh	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01a      	beq.n	8003e30 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	3301      	adds	r3, #1
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fe76 	bl	8003af8 <WIZCHIP_READ>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003e10:	89fb      	ldrh	r3, [r7, #14]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	b29c      	uxth	r4, r3
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fe68 	bl	8003af8 <WIZCHIP_READ>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	4423      	add	r3, r4
 8003e2e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003e30:	89fa      	ldrh	r2, [r7, #14]
 8003e32:	89bb      	ldrh	r3, [r7, #12]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1c2      	bne.n	8003dbe <getSn_TX_FSR+0x12>
   return val;
 8003e38:	89fb      	ldrh	r3, [r7, #14]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd90      	pop	{r4, r7, pc}

08003e42 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003e42:	b590      	push	{r4, r7, lr}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	81fb      	strh	r3, [r7, #14]
 8003e50:	2300      	movs	r3, #0
 8003e52:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	3301      	adds	r3, #1
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fe49 	bl	8003af8 <WIZCHIP_READ>
 8003e66:	4603      	mov	r3, r0
 8003e68:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003e6a:	89bb      	ldrh	r3, [r7, #12]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	b29c      	uxth	r4, r3
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	3301      	adds	r3, #1
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fe3b 	bl	8003af8 <WIZCHIP_READ>
 8003e82:	4603      	mov	r3, r0
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	4423      	add	r3, r4
 8003e88:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003e8a:	89bb      	ldrh	r3, [r7, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01a      	beq.n	8003ec6 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	3301      	adds	r3, #1
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fe2b 	bl	8003af8 <WIZCHIP_READ>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003ea6:	89fb      	ldrh	r3, [r7, #14]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	b29c      	uxth	r4, r3
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fe1d 	bl	8003af8 <WIZCHIP_READ>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	4423      	add	r3, r4
 8003ec4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003ec6:	89fa      	ldrh	r2, [r7, #14]
 8003ec8:	89bb      	ldrh	r3, [r7, #12]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d1c2      	bne.n	8003e54 <getSn_RX_RSR+0x12>
   return val;
 8003ece:	89fb      	ldrh	r3, [r7, #14]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd90      	pop	{r4, r7, pc}

08003ed8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	6039      	str	r1, [r7, #0]
 8003ee2:	71fb      	strb	r3, [r7, #7]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003ef0:	88bb      	ldrh	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d048      	beq.n	8003f88 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	3301      	adds	r3, #1
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fdf8 	bl	8003af8 <WIZCHIP_READ>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	b29c      	uxth	r4, r3
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	3301      	adds	r3, #1
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fdeb 	bl	8003af8 <WIZCHIP_READ>
 8003f22:	4603      	mov	r3, r0
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	4423      	add	r3, r4
 8003f28:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003f2a:	89fb      	ldrh	r3, [r7, #14]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	79fa      	ldrb	r2, [r7, #7]
 8003f30:	0092      	lsls	r2, r2, #2
 8003f32:	3202      	adds	r2, #2
 8003f34:	00d2      	lsls	r2, r2, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003f3a:	88bb      	ldrh	r3, [r7, #4]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6839      	ldr	r1, [r7, #0]
 8003f40:	68b8      	ldr	r0, [r7, #8]
 8003f42:	f7ff fed3 	bl	8003cec <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003f46:	89fa      	ldrh	r2, [r7, #14]
 8003f48:	88bb      	ldrh	r3, [r7, #4]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	3301      	adds	r3, #1
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	89fb      	ldrh	r3, [r7, #14]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f7ff fe12 	bl	8003b90 <WIZCHIP_WRITE>
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	3301      	adds	r3, #1
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003f78:	461a      	mov	r2, r3
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f7ff fe05 	bl	8003b90 <WIZCHIP_WRITE>
 8003f86:	e000      	b.n	8003f8a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8003f88:	bf00      	nop
}
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd90      	pop	{r4, r7, pc}

08003f90 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	6039      	str	r1, [r7, #0]
 8003f9a:	71fb      	strb	r3, [r7, #7]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003fa8:	88bb      	ldrh	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d048      	beq.n	8004040 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fd9c 	bl	8003af8 <WIZCHIP_READ>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	b29c      	uxth	r4, r3
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	3301      	adds	r3, #1
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fd8f 	bl	8003af8 <WIZCHIP_READ>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	4423      	add	r3, r4
 8003fe0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003fe2:	89fb      	ldrh	r3, [r7, #14]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	79fa      	ldrb	r2, [r7, #7]
 8003fe8:	0092      	lsls	r2, r2, #2
 8003fea:	3203      	adds	r2, #3
 8003fec:	00d2      	lsls	r2, r2, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003ff2:	88bb      	ldrh	r3, [r7, #4]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6839      	ldr	r1, [r7, #0]
 8003ff8:	68b8      	ldr	r0, [r7, #8]
 8003ffa:	f7ff fe17 	bl	8003c2c <WIZCHIP_READ_BUF>
   ptr += len;
 8003ffe:	89fa      	ldrh	r2, [r7, #14]
 8004000:	88bb      	ldrh	r3, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	3301      	adds	r3, #1
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004012:	461a      	mov	r2, r3
 8004014:	89fb      	ldrh	r3, [r7, #14]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	b29b      	uxth	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	4619      	mov	r1, r3
 800401e:	4610      	mov	r0, r2
 8004020:	f7ff fdb6 	bl	8003b90 <WIZCHIP_WRITE>
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	3301      	adds	r3, #1
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004030:	461a      	mov	r2, r3
 8004032:	89fb      	ldrh	r3, [r7, #14]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f7ff fda9 	bl	8003b90 <WIZCHIP_WRITE>
 800403e:	e000      	b.n	8004042 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8004040:	bf00      	nop
}
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	bd90      	pop	{r4, r7, pc}

08004048 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	460a      	mov	r2, r1
 8004052:	71fb      	strb	r3, [r7, #7]
 8004054:	4613      	mov	r3, r2
 8004056:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	3301      	adds	r3, #1
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fd45 	bl	8003af8 <WIZCHIP_READ>
 800406e:	4603      	mov	r3, r0
 8004070:	b29b      	uxth	r3, r3
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	b29c      	uxth	r4, r3
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	3301      	adds	r3, #1
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fd38 	bl	8003af8 <WIZCHIP_READ>
 8004088:	4603      	mov	r3, r0
 800408a:	b29b      	uxth	r3, r3
 800408c:	4423      	add	r3, r4
 800408e:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8004090:	89fa      	ldrh	r2, [r7, #14]
 8004092:	88bb      	ldrh	r3, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	3301      	adds	r3, #1
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80040a4:	461a      	mov	r2, r3
 80040a6:	89fb      	ldrh	r3, [r7, #14]
 80040a8:	0a1b      	lsrs	r3, r3, #8
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f7ff fd6d 	bl	8003b90 <WIZCHIP_WRITE>
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	3301      	adds	r3, #1
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80040c2:	461a      	mov	r2, r3
 80040c4:	89fb      	ldrh	r3, [r7, #14]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f7ff fd60 	bl	8003b90 <WIZCHIP_WRITE>
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd90      	pop	{r4, r7, pc}

080040d8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	bf00      	nop
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8004102:	b480      	push	{r7}
 8004104:	af00      	add	r7, sp, #0
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	70fb      	strb	r3, [r7, #3]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	701a      	strb	r2, [r3, #0]
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
 800414c:	2300      	movs	r3, #0
 800414e:	4618      	mov	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	71fb      	strb	r3, [r7, #7]
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	460b      	mov	r3, r1
 8004178:	807b      	strh	r3, [r7, #2]
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	460b      	mov	r3, r1
 8004190:	807b      	strh	r3, [r7, #2]
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <reg_wizchip_cs_cbfunc+0x16>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80041b6:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <reg_wizchip_cs_cbfunc+0x40>)
 80041b8:	4a0a      	ldr	r2, [pc, #40]	; (80041e4 <reg_wizchip_cs_cbfunc+0x44>)
 80041ba:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <reg_wizchip_cs_cbfunc+0x40>)
 80041be:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <reg_wizchip_cs_cbfunc+0x48>)
 80041c0:	619a      	str	r2, [r3, #24]
 80041c2:	e006      	b.n	80041d2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80041c4:	4a06      	ldr	r2, [pc, #24]	; (80041e0 <reg_wizchip_cs_cbfunc+0x40>)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80041ca:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <reg_wizchip_cs_cbfunc+0x40>)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6193      	str	r3, [r2, #24]
   }
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000024 	.word	0x20000024
 80041e4:	080040f5 	.word	0x080040f5
 80041e8:	08004103 	.word	0x08004103

080041ec <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80041f6:	bf00      	nop
 80041f8:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <reg_wizchip_spi_cbfunc+0x4c>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f9      	beq.n	80041f8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <reg_wizchip_spi_cbfunc+0x24>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d106      	bne.n	800421e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <reg_wizchip_spi_cbfunc+0x4c>)
 8004212:	4a0a      	ldr	r2, [pc, #40]	; (800423c <reg_wizchip_spi_cbfunc+0x50>)
 8004214:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <reg_wizchip_spi_cbfunc+0x4c>)
 8004218:	4a09      	ldr	r2, [pc, #36]	; (8004240 <reg_wizchip_spi_cbfunc+0x54>)
 800421a:	621a      	str	r2, [r3, #32]
 800421c:	e006      	b.n	800422c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800421e:	4a06      	ldr	r2, [pc, #24]	; (8004238 <reg_wizchip_spi_cbfunc+0x4c>)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004224:	4a04      	ldr	r2, [pc, #16]	; (8004238 <reg_wizchip_spi_cbfunc+0x4c>)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6213      	str	r3, [r2, #32]
   }
}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	20000024 	.word	0x20000024
 800423c:	08004149 	.word	0x08004149
 8004240:	08004159 	.word	0x08004159

08004244 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800424e:	bf00      	nop
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f9      	beq.n	8004250 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <reg_wizchip_spiburst_cbfunc+0x24>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004268:	4b09      	ldr	r3, [pc, #36]	; (8004290 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800426a:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <reg_wizchip_spiburst_cbfunc+0x50>)
 800426c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800426e:	4b08      	ldr	r3, [pc, #32]	; (8004290 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004270:	4a09      	ldr	r2, [pc, #36]	; (8004298 <reg_wizchip_spiburst_cbfunc+0x54>)
 8004272:	629a      	str	r2, [r3, #40]	; 0x28
 8004274:	e006      	b.n	8004284 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8004276:	4a06      	ldr	r2, [pc, #24]	; (8004290 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	20000024 	.word	0x20000024
 8004294:	0800416f 	.word	0x0800416f
 8004298:	08004187 	.word	0x08004187

0800429c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80042a2:	1d3b      	adds	r3, r7, #4
 80042a4:	2206      	movs	r2, #6
 80042a6:	4619      	mov	r1, r3
 80042a8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80042ac:	f7ff fcbe 	bl	8003c2c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	2204      	movs	r2, #4
 80042b6:	4619      	mov	r1, r3
 80042b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80042bc:	f7ff fcb6 	bl	8003c2c <WIZCHIP_READ_BUF>
 80042c0:	f107 0310 	add.w	r3, r7, #16
 80042c4:	2204      	movs	r2, #4
 80042c6:	4619      	mov	r1, r3
 80042c8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80042cc:	f7ff fcae 	bl	8003c2c <WIZCHIP_READ_BUF>
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	2204      	movs	r2, #4
 80042d6:	4619      	mov	r1, r3
 80042d8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80042dc:	f7ff fca6 	bl	8003c2c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80042e0:	2180      	movs	r1, #128	; 0x80
 80042e2:	2000      	movs	r0, #0
 80042e4:	f7ff fc54 	bl	8003b90 <WIZCHIP_WRITE>
   getMR(); // for delay
 80042e8:	2000      	movs	r0, #0
 80042ea:	f7ff fc05 	bl	8003af8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80042ee:	1d3b      	adds	r3, r7, #4
 80042f0:	2206      	movs	r2, #6
 80042f2:	4619      	mov	r1, r3
 80042f4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80042f8:	f7ff fcf8 	bl	8003cec <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80042fc:	f107 0314 	add.w	r3, r7, #20
 8004300:	2204      	movs	r2, #4
 8004302:	4619      	mov	r1, r3
 8004304:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004308:	f7ff fcf0 	bl	8003cec <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800430c:	f107 0310 	add.w	r3, r7, #16
 8004310:	2204      	movs	r2, #4
 8004312:	4619      	mov	r1, r3
 8004314:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004318:	f7ff fce8 	bl	8003cec <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800431c:	f107 030c 	add.w	r3, r7, #12
 8004320:	2204      	movs	r2, #4
 8004322:	4619      	mov	r1, r3
 8004324:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004328:	f7ff fce0 	bl	8003cec <WIZCHIP_WRITE_BUF>
}
 800432c:	bf00      	nop
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004342:	f7ff ffab 	bl	800429c <wizchip_sw_reset>
   if(txsize)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d03b      	beq.n	80043c4 <wizchip_init+0x90>
   {
      tmp = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]
 8004354:	e015      	b.n	8004382 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8004356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	781a      	ldrb	r2, [r3, #0]
 8004360:	7bbb      	ldrb	r3, [r7, #14]
 8004362:	4413      	add	r3, r2
 8004364:	b2db      	uxtb	r3, r3
 8004366:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004368:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800436c:	2b10      	cmp	r3, #16
 800436e:	dd02      	ble.n	8004376 <wizchip_init+0x42>
 8004370:	f04f 33ff 	mov.w	r3, #4294967295
 8004374:	e066      	b.n	8004444 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	3301      	adds	r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	73fb      	strb	r3, [r7, #15]
 8004382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004386:	2b07      	cmp	r3, #7
 8004388:	dde5      	ble.n	8004356 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
 800438e:	e015      	b.n	80043bc <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	3301      	adds	r3, #1
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800439e:	4618      	mov	r0, r3
 80043a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4413      	add	r3, r2
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	4619      	mov	r1, r3
 80043ac:	f7ff fbf0 	bl	8003b90 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80043b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	3301      	adds	r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	73fb      	strb	r3, [r7, #15]
 80043bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c0:	2b07      	cmp	r3, #7
 80043c2:	dde5      	ble.n	8004390 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d03b      	beq.n	8004442 <wizchip_init+0x10e>
   {
      tmp = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
 80043d2:	e015      	b.n	8004400 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80043d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	4413      	add	r3, r2
 80043dc:	781a      	ldrb	r2, [r3, #0]
 80043de:	7bbb      	ldrb	r3, [r7, #14]
 80043e0:	4413      	add	r3, r2
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80043e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	dd02      	ble.n	80043f4 <wizchip_init+0xc0>
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	e027      	b.n	8004444 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80043f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	3301      	adds	r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	73fb      	strb	r3, [r7, #15]
 8004400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004404:	2b07      	cmp	r3, #7
 8004406:	dde5      	ble.n	80043d4 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004408:	2300      	movs	r3, #0
 800440a:	73fb      	strb	r3, [r7, #15]
 800440c:	e015      	b.n	800443a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800440e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	3301      	adds	r3, #1
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800441c:	4618      	mov	r0, r3
 800441e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	4413      	add	r3, r2
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	4619      	mov	r1, r3
 800442a:	f7ff fbb1 	bl	8003b90 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800442e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	3301      	adds	r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800443e:	2b07      	cmp	r3, #7
 8004440:	dde5      	ble.n	800440e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2206      	movs	r2, #6
 8004458:	4619      	mov	r1, r3
 800445a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800445e:	f7ff fc45 	bl	8003cec <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	330e      	adds	r3, #14
 8004466:	2204      	movs	r2, #4
 8004468:	4619      	mov	r1, r3
 800446a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800446e:	f7ff fc3d 	bl	8003cec <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	330a      	adds	r3, #10
 8004476:	2204      	movs	r2, #4
 8004478:	4619      	mov	r1, r3
 800447a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800447e:	f7ff fc35 	bl	8003cec <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3306      	adds	r3, #6
 8004486:	2204      	movs	r2, #4
 8004488:	4619      	mov	r1, r3
 800448a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800448e:	f7ff fc2d 	bl	8003cec <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	7c9a      	ldrb	r2, [r3, #18]
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <wizchip_setnetinfo+0x78>)
 8004498:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	7cda      	ldrb	r2, [r3, #19]
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <wizchip_setnetinfo+0x78>)
 80044a0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	7d1a      	ldrb	r2, [r3, #20]
 80044a6:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <wizchip_setnetinfo+0x78>)
 80044a8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	7d5a      	ldrb	r2, [r3, #21]
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <wizchip_setnetinfo+0x78>)
 80044b0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	7d9a      	ldrb	r2, [r3, #22]
 80044b6:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <wizchip_setnetinfo+0x7c>)
 80044b8:	701a      	strb	r2, [r3, #0]
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	2000098c 	.word	0x2000098c
 80044c8:	20000990 	.word	0x20000990

080044cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80044cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004504 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044d0:	480d      	ldr	r0, [pc, #52]	; (8004508 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044d2:	490e      	ldr	r1, [pc, #56]	; (800450c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044d4:	4a0e      	ldr	r2, [pc, #56]	; (8004510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044d8:	e002      	b.n	80044e0 <LoopCopyDataInit>

080044da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044de:	3304      	adds	r3, #4

080044e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044e4:	d3f9      	bcc.n	80044da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044e6:	4a0b      	ldr	r2, [pc, #44]	; (8004514 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044e8:	4c0b      	ldr	r4, [pc, #44]	; (8004518 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044ec:	e001      	b.n	80044f2 <LoopFillZerobss>

080044ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044f0:	3204      	adds	r2, #4

080044f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044f4:	d3fb      	bcc.n	80044ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044f6:	f7ff faed 	bl	8003ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044fa:	f004 fc85 	bl	8008e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044fe:	f7fe fa5f 	bl	80029c0 <main>
  bx  lr    
 8004502:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004504:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800450c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8004510:	08009000 	.word	0x08009000
  ldr r2, =_sbss
 8004514:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8004518:	200054c0 	.word	0x200054c0

0800451c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800451c:	e7fe      	b.n	800451c <ADC_IRQHandler>
	...

08004520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <HAL_Init+0x40>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <HAL_Init+0x40>)
 800452a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800452e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_Init+0x40>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <HAL_Init+0x40>)
 8004536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800453a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800453c:	4b08      	ldr	r3, [pc, #32]	; (8004560 <HAL_Init+0x40>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a07      	ldr	r2, [pc, #28]	; (8004560 <HAL_Init+0x40>)
 8004542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004546:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004548:	2003      	movs	r0, #3
 800454a:	f000 f92b 	bl	80047a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800454e:	200f      	movs	r0, #15
 8004550:	f000 f808 	bl	8004564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004554:	f7ff fa64 	bl	8003a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40023c00 	.word	0x40023c00

08004564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800456c:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <HAL_InitTick+0x54>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4b12      	ldr	r3, [pc, #72]	; (80045bc <HAL_InitTick+0x58>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	4619      	mov	r1, r3
 8004576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800457a:	fbb3 f3f1 	udiv	r3, r3, r1
 800457e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004582:	4618      	mov	r0, r3
 8004584:	f000 f943 	bl	800480e <HAL_SYSTICK_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e00e      	b.n	80045b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b0f      	cmp	r3, #15
 8004596:	d80a      	bhi.n	80045ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004598:	2200      	movs	r2, #0
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	f04f 30ff 	mov.w	r0, #4294967295
 80045a0:	f000 f90b 	bl	80047ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045a4:	4a06      	ldr	r2, [pc, #24]	; (80045c0 <HAL_InitTick+0x5c>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	e000      	b.n	80045b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000020 	.word	0x20000020
 80045bc:	20000054 	.word	0x20000054
 80045c0:	20000050 	.word	0x20000050

080045c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_IncTick+0x20>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <HAL_IncTick+0x24>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4413      	add	r3, r2
 80045d4:	4a04      	ldr	r2, [pc, #16]	; (80045e8 <HAL_IncTick+0x24>)
 80045d6:	6013      	str	r3, [r2, #0]
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000054 	.word	0x20000054
 80045e8:	20000994 	.word	0x20000994

080045ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return uwTick;
 80045f0:	4b03      	ldr	r3, [pc, #12]	; (8004600 <HAL_GetTick+0x14>)
 80045f2:	681b      	ldr	r3, [r3, #0]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20000994 	.word	0x20000994

08004604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <__NVIC_SetPriorityGrouping+0x44>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004620:	4013      	ands	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800462c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004636:	4a04      	ldr	r2, [pc, #16]	; (8004648 <__NVIC_SetPriorityGrouping+0x44>)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	60d3      	str	r3, [r2, #12]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	e000ed00 	.word	0xe000ed00

0800464c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <__NVIC_GetPriorityGrouping+0x18>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	0a1b      	lsrs	r3, r3, #8
 8004656:	f003 0307 	and.w	r3, r3, #7
}
 800465a:	4618      	mov	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004676:	2b00      	cmp	r3, #0
 8004678:	db0b      	blt.n	8004692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	f003 021f 	and.w	r2, r3, #31
 8004680:	4907      	ldr	r1, [pc, #28]	; (80046a0 <__NVIC_EnableIRQ+0x38>)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2001      	movs	r0, #1
 800468a:	fa00 f202 	lsl.w	r2, r0, r2
 800468e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	e000e100 	.word	0xe000e100

080046a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	6039      	str	r1, [r7, #0]
 80046ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	db0a      	blt.n	80046ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	490c      	ldr	r1, [pc, #48]	; (80046f0 <__NVIC_SetPriority+0x4c>)
 80046be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c2:	0112      	lsls	r2, r2, #4
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	440b      	add	r3, r1
 80046c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046cc:	e00a      	b.n	80046e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	4908      	ldr	r1, [pc, #32]	; (80046f4 <__NVIC_SetPriority+0x50>)
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	3b04      	subs	r3, #4
 80046dc:	0112      	lsls	r2, r2, #4
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	440b      	add	r3, r1
 80046e2:	761a      	strb	r2, [r3, #24]
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	e000e100 	.word	0xe000e100
 80046f4:	e000ed00 	.word	0xe000ed00

080046f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	; 0x24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f1c3 0307 	rsb	r3, r3, #7
 8004712:	2b04      	cmp	r3, #4
 8004714:	bf28      	it	cs
 8004716:	2304      	movcs	r3, #4
 8004718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	3304      	adds	r3, #4
 800471e:	2b06      	cmp	r3, #6
 8004720:	d902      	bls.n	8004728 <NVIC_EncodePriority+0x30>
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3b03      	subs	r3, #3
 8004726:	e000      	b.n	800472a <NVIC_EncodePriority+0x32>
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800472c:	f04f 32ff 	mov.w	r2, #4294967295
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	43da      	mvns	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	401a      	ands	r2, r3
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004740:	f04f 31ff 	mov.w	r1, #4294967295
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	43d9      	mvns	r1, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004750:	4313      	orrs	r3, r2
         );
}
 8004752:	4618      	mov	r0, r3
 8004754:	3724      	adds	r7, #36	; 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3b01      	subs	r3, #1
 800476c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004770:	d301      	bcc.n	8004776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004772:	2301      	movs	r3, #1
 8004774:	e00f      	b.n	8004796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004776:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <SysTick_Config+0x40>)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3b01      	subs	r3, #1
 800477c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800477e:	210f      	movs	r1, #15
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	f7ff ff8e 	bl	80046a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <SysTick_Config+0x40>)
 800478a:	2200      	movs	r2, #0
 800478c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800478e:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <SysTick_Config+0x40>)
 8004790:	2207      	movs	r2, #7
 8004792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	e000e010 	.word	0xe000e010

080047a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ff29 	bl	8004604 <__NVIC_SetPriorityGrouping>
}
 80047b2:	bf00      	nop
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b086      	sub	sp, #24
 80047be:	af00      	add	r7, sp, #0
 80047c0:	4603      	mov	r3, r0
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047cc:	f7ff ff3e 	bl	800464c <__NVIC_GetPriorityGrouping>
 80047d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	6978      	ldr	r0, [r7, #20]
 80047d8:	f7ff ff8e 	bl	80046f8 <NVIC_EncodePriority>
 80047dc:	4602      	mov	r2, r0
 80047de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff ff5d 	bl	80046a4 <__NVIC_SetPriority>
}
 80047ea:	bf00      	nop
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	4603      	mov	r3, r0
 80047fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff31 	bl	8004668 <__NVIC_EnableIRQ>
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff ffa2 	bl	8004760 <SysTick_Config>
 800481c:	4603      	mov	r3, r0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d004      	beq.n	8004844 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e00c      	b.n	800485e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2205      	movs	r2, #5
 8004848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800486c:	b480      	push	{r7}
 800486e:	b089      	sub	sp, #36	; 0x24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800487e:	2300      	movs	r3, #0
 8004880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	e177      	b.n	8004b78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004888:	2201      	movs	r2, #1
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4013      	ands	r3, r2
 800489a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	f040 8166 	bne.w	8004b72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d005      	beq.n	80048be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d130      	bne.n	8004920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	2203      	movs	r2, #3
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4013      	ands	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048f4:	2201      	movs	r2, #1
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 0201 	and.w	r2, r3, #1
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	2b03      	cmp	r3, #3
 800492a:	d017      	beq.n	800495c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	2203      	movs	r2, #3
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d123      	bne.n	80049b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	08da      	lsrs	r2, r3, #3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3208      	adds	r2, #8
 8004970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	220f      	movs	r2, #15
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	43db      	mvns	r3, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	08da      	lsrs	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3208      	adds	r2, #8
 80049aa:	69b9      	ldr	r1, [r7, #24]
 80049ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	2203      	movs	r2, #3
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 0203 	and.w	r2, r3, #3
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80c0 	beq.w	8004b72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	4b66      	ldr	r3, [pc, #408]	; (8004b90 <HAL_GPIO_Init+0x324>)
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	4a65      	ldr	r2, [pc, #404]	; (8004b90 <HAL_GPIO_Init+0x324>)
 80049fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a00:	6453      	str	r3, [r2, #68]	; 0x44
 8004a02:	4b63      	ldr	r3, [pc, #396]	; (8004b90 <HAL_GPIO_Init+0x324>)
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a0e:	4a61      	ldr	r2, [pc, #388]	; (8004b94 <HAL_GPIO_Init+0x328>)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	089b      	lsrs	r3, r3, #2
 8004a14:	3302      	adds	r3, #2
 8004a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	220f      	movs	r2, #15
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a58      	ldr	r2, [pc, #352]	; (8004b98 <HAL_GPIO_Init+0x32c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d037      	beq.n	8004aaa <HAL_GPIO_Init+0x23e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a57      	ldr	r2, [pc, #348]	; (8004b9c <HAL_GPIO_Init+0x330>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d031      	beq.n	8004aa6 <HAL_GPIO_Init+0x23a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a56      	ldr	r2, [pc, #344]	; (8004ba0 <HAL_GPIO_Init+0x334>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d02b      	beq.n	8004aa2 <HAL_GPIO_Init+0x236>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a55      	ldr	r2, [pc, #340]	; (8004ba4 <HAL_GPIO_Init+0x338>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d025      	beq.n	8004a9e <HAL_GPIO_Init+0x232>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a54      	ldr	r2, [pc, #336]	; (8004ba8 <HAL_GPIO_Init+0x33c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01f      	beq.n	8004a9a <HAL_GPIO_Init+0x22e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a53      	ldr	r2, [pc, #332]	; (8004bac <HAL_GPIO_Init+0x340>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d019      	beq.n	8004a96 <HAL_GPIO_Init+0x22a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a52      	ldr	r2, [pc, #328]	; (8004bb0 <HAL_GPIO_Init+0x344>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <HAL_GPIO_Init+0x226>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a51      	ldr	r2, [pc, #324]	; (8004bb4 <HAL_GPIO_Init+0x348>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00d      	beq.n	8004a8e <HAL_GPIO_Init+0x222>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a50      	ldr	r2, [pc, #320]	; (8004bb8 <HAL_GPIO_Init+0x34c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <HAL_GPIO_Init+0x21e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a4f      	ldr	r2, [pc, #316]	; (8004bbc <HAL_GPIO_Init+0x350>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d101      	bne.n	8004a86 <HAL_GPIO_Init+0x21a>
 8004a82:	2309      	movs	r3, #9
 8004a84:	e012      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a86:	230a      	movs	r3, #10
 8004a88:	e010      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	e00e      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a8e:	2307      	movs	r3, #7
 8004a90:	e00c      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a92:	2306      	movs	r3, #6
 8004a94:	e00a      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a96:	2305      	movs	r3, #5
 8004a98:	e008      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a9a:	2304      	movs	r3, #4
 8004a9c:	e006      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e004      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e002      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	f002 0203 	and.w	r2, r2, #3
 8004ab2:	0092      	lsls	r2, r2, #2
 8004ab4:	4093      	lsls	r3, r2
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004abc:	4935      	ldr	r1, [pc, #212]	; (8004b94 <HAL_GPIO_Init+0x328>)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	089b      	lsrs	r3, r3, #2
 8004ac2:	3302      	adds	r3, #2
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aca:	4b3d      	ldr	r3, [pc, #244]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aee:	4a34      	ldr	r2, [pc, #208]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004af4:	4b32      	ldr	r3, [pc, #200]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	43db      	mvns	r3, r3
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4013      	ands	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b18:	4a29      	ldr	r2, [pc, #164]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b1e:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	43db      	mvns	r3, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b42:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b48:	4b1d      	ldr	r3, [pc, #116]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b6c:	4a14      	ldr	r2, [pc, #80]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3301      	adds	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	2b0f      	cmp	r3, #15
 8004b7c:	f67f ae84 	bls.w	8004888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	3724      	adds	r7, #36	; 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40013800 	.word	0x40013800
 8004b98:	40020000 	.word	0x40020000
 8004b9c:	40020400 	.word	0x40020400
 8004ba0:	40020800 	.word	0x40020800
 8004ba4:	40020c00 	.word	0x40020c00
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40021400 	.word	0x40021400
 8004bb0:	40021800 	.word	0x40021800
 8004bb4:	40021c00 	.word	0x40021c00
 8004bb8:	40022000 	.word	0x40022000
 8004bbc:	40022400 	.word	0x40022400
 8004bc0:	40013c00 	.word	0x40013c00

08004bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	807b      	strh	r3, [r7, #2]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bd4:	787b      	ldrb	r3, [r7, #1]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bda:	887a      	ldrh	r2, [r7, #2]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004be0:	e003      	b.n	8004bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	041a      	lsls	r2, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	619a      	str	r2, [r3, #24]
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
	...

08004bf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e267      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d075      	beq.n	8004d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c16:	4b88      	ldr	r3, [pc, #544]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d00c      	beq.n	8004c3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c22:	4b85      	ldr	r3, [pc, #532]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d112      	bne.n	8004c54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2e:	4b82      	ldr	r3, [pc, #520]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3a:	d10b      	bne.n	8004c54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3c:	4b7e      	ldr	r3, [pc, #504]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d05b      	beq.n	8004d00 <HAL_RCC_OscConfig+0x108>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d157      	bne.n	8004d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e242      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5c:	d106      	bne.n	8004c6c <HAL_RCC_OscConfig+0x74>
 8004c5e:	4b76      	ldr	r3, [pc, #472]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a75      	ldr	r2, [pc, #468]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e01d      	b.n	8004ca8 <HAL_RCC_OscConfig+0xb0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x98>
 8004c76:	4b70      	ldr	r3, [pc, #448]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6f      	ldr	r2, [pc, #444]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	4b6d      	ldr	r3, [pc, #436]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6c      	ldr	r2, [pc, #432]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e00b      	b.n	8004ca8 <HAL_RCC_OscConfig+0xb0>
 8004c90:	4b69      	ldr	r3, [pc, #420]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a68      	ldr	r2, [pc, #416]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	4b66      	ldr	r3, [pc, #408]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a65      	ldr	r2, [pc, #404]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d013      	beq.n	8004cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb0:	f7ff fc9c 	bl	80045ec <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb8:	f7ff fc98 	bl	80045ec <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b64      	cmp	r3, #100	; 0x64
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e207      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b5b      	ldr	r3, [pc, #364]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0xc0>
 8004cd6:	e014      	b.n	8004d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd8:	f7ff fc88 	bl	80045ec <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ce0:	f7ff fc84 	bl	80045ec <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b64      	cmp	r3, #100	; 0x64
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e1f3      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf2:	4b51      	ldr	r3, [pc, #324]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0xe8>
 8004cfe:	e000      	b.n	8004d02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d063      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d0e:	4b4a      	ldr	r3, [pc, #296]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1a:	4b47      	ldr	r3, [pc, #284]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d11c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d26:	4b44      	ldr	r3, [pc, #272]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d116      	bne.n	8004d60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d32:	4b41      	ldr	r3, [pc, #260]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_RCC_OscConfig+0x152>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d001      	beq.n	8004d4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e1c7      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4a:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	4937      	ldr	r1, [pc, #220]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5e:	e03a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d020      	beq.n	8004daa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d68:	4b34      	ldr	r3, [pc, #208]	; (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6e:	f7ff fc3d 	bl	80045ec <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d76:	f7ff fc39 	bl	80045ec <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e1a8      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d88:	4b2b      	ldr	r3, [pc, #172]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d94:	4b28      	ldr	r3, [pc, #160]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	4925      	ldr	r1, [pc, #148]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	600b      	str	r3, [r1, #0]
 8004da8:	e015      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7ff fc1c 	bl	80045ec <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db8:	f7ff fc18 	bl	80045ec <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e187      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d036      	beq.n	8004e50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d016      	beq.n	8004e18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dea:	4b15      	ldr	r3, [pc, #84]	; (8004e40 <HAL_RCC_OscConfig+0x248>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7ff fbfc 	bl	80045ec <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df8:	f7ff fbf8 	bl	80045ec <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e167      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x200>
 8004e16:	e01b      	b.n	8004e50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_OscConfig+0x248>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1e:	f7ff fbe5 	bl	80045ec <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e24:	e00e      	b.n	8004e44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e26:	f7ff fbe1 	bl	80045ec <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d907      	bls.n	8004e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e150      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	42470000 	.word	0x42470000
 8004e40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e44:	4b88      	ldr	r3, [pc, #544]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ea      	bne.n	8004e26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8097 	beq.w	8004f8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e62:	4b81      	ldr	r3, [pc, #516]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	4b7d      	ldr	r3, [pc, #500]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	4a7c      	ldr	r2, [pc, #496]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7e:	4b7a      	ldr	r3, [pc, #488]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8e:	4b77      	ldr	r3, [pc, #476]	; (800506c <HAL_RCC_OscConfig+0x474>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d118      	bne.n	8004ecc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e9a:	4b74      	ldr	r3, [pc, #464]	; (800506c <HAL_RCC_OscConfig+0x474>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a73      	ldr	r2, [pc, #460]	; (800506c <HAL_RCC_OscConfig+0x474>)
 8004ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea6:	f7ff fba1 	bl	80045ec <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eae:	f7ff fb9d 	bl	80045ec <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e10c      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec0:	4b6a      	ldr	r3, [pc, #424]	; (800506c <HAL_RCC_OscConfig+0x474>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d106      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x2ea>
 8004ed4:	4b64      	ldr	r3, [pc, #400]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a63      	ldr	r2, [pc, #396]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee0:	e01c      	b.n	8004f1c <HAL_RCC_OscConfig+0x324>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b05      	cmp	r3, #5
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCC_OscConfig+0x30c>
 8004eea:	4b5f      	ldr	r3, [pc, #380]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	4a5e      	ldr	r2, [pc, #376]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004ef0:	f043 0304 	orr.w	r3, r3, #4
 8004ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef6:	4b5c      	ldr	r3, [pc, #368]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	4a5b      	ldr	r2, [pc, #364]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	6713      	str	r3, [r2, #112]	; 0x70
 8004f02:	e00b      	b.n	8004f1c <HAL_RCC_OscConfig+0x324>
 8004f04:	4b58      	ldr	r3, [pc, #352]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f08:	4a57      	ldr	r2, [pc, #348]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f0a:	f023 0301 	bic.w	r3, r3, #1
 8004f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f10:	4b55      	ldr	r3, [pc, #340]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f14:	4a54      	ldr	r2, [pc, #336]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f16:	f023 0304 	bic.w	r3, r3, #4
 8004f1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d015      	beq.n	8004f50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f24:	f7ff fb62 	bl	80045ec <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2a:	e00a      	b.n	8004f42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f2c:	f7ff fb5e 	bl	80045ec <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e0cb      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f42:	4b49      	ldr	r3, [pc, #292]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0ee      	beq.n	8004f2c <HAL_RCC_OscConfig+0x334>
 8004f4e:	e014      	b.n	8004f7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f50:	f7ff fb4c 	bl	80045ec <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f56:	e00a      	b.n	8004f6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f58:	f7ff fb48 	bl	80045ec <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e0b5      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f6e:	4b3e      	ldr	r3, [pc, #248]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1ee      	bne.n	8004f58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f80:	4b39      	ldr	r3, [pc, #228]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	4a38      	ldr	r2, [pc, #224]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80a1 	beq.w	80050d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f96:	4b34      	ldr	r3, [pc, #208]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d05c      	beq.n	800505c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d141      	bne.n	800502e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004faa:	4b31      	ldr	r3, [pc, #196]	; (8005070 <HAL_RCC_OscConfig+0x478>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb0:	f7ff fb1c 	bl	80045ec <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7ff fb18 	bl	80045ec <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e087      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fca:	4b27      	ldr	r3, [pc, #156]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	019b      	lsls	r3, r3, #6
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	041b      	lsls	r3, r3, #16
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	061b      	lsls	r3, r3, #24
 8004ffa:	491b      	ldr	r1, [pc, #108]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005000:	4b1b      	ldr	r3, [pc, #108]	; (8005070 <HAL_RCC_OscConfig+0x478>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005006:	f7ff faf1 	bl	80045ec <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800500e:	f7ff faed 	bl	80045ec <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e05c      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005020:	4b11      	ldr	r3, [pc, #68]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x416>
 800502c:	e054      	b.n	80050d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <HAL_RCC_OscConfig+0x478>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005034:	f7ff fada 	bl	80045ec <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503c:	f7ff fad6 	bl	80045ec <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e045      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	4b06      	ldr	r3, [pc, #24]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x444>
 800505a:	e03d      	b.n	80050d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d107      	bne.n	8005074 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e038      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
 8005068:	40023800 	.word	0x40023800
 800506c:	40007000 	.word	0x40007000
 8005070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005074:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <HAL_RCC_OscConfig+0x4ec>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d028      	beq.n	80050d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d121      	bne.n	80050d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509a:	429a      	cmp	r2, r3
 800509c:	d11a      	bne.n	80050d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050a4:	4013      	ands	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d111      	bne.n	80050d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	3b01      	subs	r3, #1
 80050be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d107      	bne.n	80050d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40023800 	.word	0x40023800

080050e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0cc      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050fc:	4b68      	ldr	r3, [pc, #416]	; (80052a0 <HAL_RCC_ClockConfig+0x1b8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d90c      	bls.n	8005124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510a:	4b65      	ldr	r3, [pc, #404]	; (80052a0 <HAL_RCC_ClockConfig+0x1b8>)
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005112:	4b63      	ldr	r3, [pc, #396]	; (80052a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e0b8      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d020      	beq.n	8005172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800513c:	4b59      	ldr	r3, [pc, #356]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4a58      	ldr	r2, [pc, #352]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005154:	4b53      	ldr	r3, [pc, #332]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	4a52      	ldr	r2, [pc, #328]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800515e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005160:	4b50      	ldr	r3, [pc, #320]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	494d      	ldr	r1, [pc, #308]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d044      	beq.n	8005208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d107      	bne.n	8005196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005186:	4b47      	ldr	r3, [pc, #284]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d119      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e07f      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d003      	beq.n	80051a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d107      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a6:	4b3f      	ldr	r3, [pc, #252]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e06f      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b6:	4b3b      	ldr	r3, [pc, #236]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e067      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051c6:	4b37      	ldr	r3, [pc, #220]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f023 0203 	bic.w	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4934      	ldr	r1, [pc, #208]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051d8:	f7ff fa08 	bl	80045ec <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e0:	f7ff fa04 	bl	80045ec <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e04f      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f6:	4b2b      	ldr	r3, [pc, #172]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 020c 	and.w	r2, r3, #12
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	429a      	cmp	r2, r3
 8005206:	d1eb      	bne.n	80051e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005208:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <HAL_RCC_ClockConfig+0x1b8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d20c      	bcs.n	8005230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005216:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800521e:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d001      	beq.n	8005230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e032      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800523c:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	4916      	ldr	r1, [pc, #88]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d009      	beq.n	800526e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800525a:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	490e      	ldr	r1, [pc, #56]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800526e:	f000 f821 	bl	80052b4 <HAL_RCC_GetSysClockFreq>
 8005272:	4602      	mov	r2, r0
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	490a      	ldr	r1, [pc, #40]	; (80052a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005280:	5ccb      	ldrb	r3, [r1, r3]
 8005282:	fa22 f303 	lsr.w	r3, r2, r3
 8005286:	4a09      	ldr	r2, [pc, #36]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 8005288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800528a:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_RCC_ClockConfig+0x1c8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff f968 	bl	8004564 <HAL_InitTick>

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40023c00 	.word	0x40023c00
 80052a4:	40023800 	.word	0x40023800
 80052a8:	08008fe0 	.word	0x08008fe0
 80052ac:	20000020 	.word	0x20000020
 80052b0:	20000050 	.word	0x20000050

080052b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b8:	b090      	sub	sp, #64	; 0x40
 80052ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
 80052c0:	2300      	movs	r3, #0
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c4:	2300      	movs	r3, #0
 80052c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052cc:	4b59      	ldr	r3, [pc, #356]	; (8005434 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 030c 	and.w	r3, r3, #12
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d00d      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0x40>
 80052d8:	2b08      	cmp	r3, #8
 80052da:	f200 80a1 	bhi.w	8005420 <HAL_RCC_GetSysClockFreq+0x16c>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0x34>
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d003      	beq.n	80052ee <HAL_RCC_GetSysClockFreq+0x3a>
 80052e6:	e09b      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052e8:	4b53      	ldr	r3, [pc, #332]	; (8005438 <HAL_RCC_GetSysClockFreq+0x184>)
 80052ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80052ec:	e09b      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052ee:	4b53      	ldr	r3, [pc, #332]	; (800543c <HAL_RCC_GetSysClockFreq+0x188>)
 80052f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052f2:	e098      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052f4:	4b4f      	ldr	r3, [pc, #316]	; (8005434 <HAL_RCC_GetSysClockFreq+0x180>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052fe:	4b4d      	ldr	r3, [pc, #308]	; (8005434 <HAL_RCC_GetSysClockFreq+0x180>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d028      	beq.n	800535c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800530a:	4b4a      	ldr	r3, [pc, #296]	; (8005434 <HAL_RCC_GetSysClockFreq+0x180>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	099b      	lsrs	r3, r3, #6
 8005310:	2200      	movs	r2, #0
 8005312:	623b      	str	r3, [r7, #32]
 8005314:	627a      	str	r2, [r7, #36]	; 0x24
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800531c:	2100      	movs	r1, #0
 800531e:	4b47      	ldr	r3, [pc, #284]	; (800543c <HAL_RCC_GetSysClockFreq+0x188>)
 8005320:	fb03 f201 	mul.w	r2, r3, r1
 8005324:	2300      	movs	r3, #0
 8005326:	fb00 f303 	mul.w	r3, r0, r3
 800532a:	4413      	add	r3, r2
 800532c:	4a43      	ldr	r2, [pc, #268]	; (800543c <HAL_RCC_GetSysClockFreq+0x188>)
 800532e:	fba0 1202 	umull	r1, r2, r0, r2
 8005332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005334:	460a      	mov	r2, r1
 8005336:	62ba      	str	r2, [r7, #40]	; 0x28
 8005338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800533a:	4413      	add	r3, r2
 800533c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800533e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005340:	2200      	movs	r2, #0
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	61fa      	str	r2, [r7, #28]
 8005346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800534a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800534e:	f7fa ff57 	bl	8000200 <__aeabi_uldivmod>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4613      	mov	r3, r2
 8005358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800535a:	e053      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535c:	4b35      	ldr	r3, [pc, #212]	; (8005434 <HAL_RCC_GetSysClockFreq+0x180>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	099b      	lsrs	r3, r3, #6
 8005362:	2200      	movs	r2, #0
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	617a      	str	r2, [r7, #20]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800536e:	f04f 0b00 	mov.w	fp, #0
 8005372:	4652      	mov	r2, sl
 8005374:	465b      	mov	r3, fp
 8005376:	f04f 0000 	mov.w	r0, #0
 800537a:	f04f 0100 	mov.w	r1, #0
 800537e:	0159      	lsls	r1, r3, #5
 8005380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005384:	0150      	lsls	r0, r2, #5
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	ebb2 080a 	subs.w	r8, r2, sl
 800538e:	eb63 090b 	sbc.w	r9, r3, fp
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800539e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80053a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80053a6:	ebb2 0408 	subs.w	r4, r2, r8
 80053aa:	eb63 0509 	sbc.w	r5, r3, r9
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	00eb      	lsls	r3, r5, #3
 80053b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053bc:	00e2      	lsls	r2, r4, #3
 80053be:	4614      	mov	r4, r2
 80053c0:	461d      	mov	r5, r3
 80053c2:	eb14 030a 	adds.w	r3, r4, sl
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	eb45 030b 	adc.w	r3, r5, fp
 80053cc:	607b      	str	r3, [r7, #4]
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053da:	4629      	mov	r1, r5
 80053dc:	028b      	lsls	r3, r1, #10
 80053de:	4621      	mov	r1, r4
 80053e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053e4:	4621      	mov	r1, r4
 80053e6:	028a      	lsls	r2, r1, #10
 80053e8:	4610      	mov	r0, r2
 80053ea:	4619      	mov	r1, r3
 80053ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ee:	2200      	movs	r2, #0
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	60fa      	str	r2, [r7, #12]
 80053f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053f8:	f7fa ff02 	bl	8000200 <__aeabi_uldivmod>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4613      	mov	r3, r2
 8005402:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <HAL_RCC_GetSysClockFreq+0x180>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	0c1b      	lsrs	r3, r3, #16
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	3301      	adds	r3, #1
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800541e:	e002      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005420:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_RCC_GetSysClockFreq+0x184>)
 8005422:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005428:	4618      	mov	r0, r3
 800542a:	3740      	adds	r7, #64	; 0x40
 800542c:	46bd      	mov	sp, r7
 800542e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005432:	bf00      	nop
 8005434:	40023800 	.word	0x40023800
 8005438:	00f42400 	.word	0x00f42400
 800543c:	017d7840 	.word	0x017d7840

08005440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e07b      	b.n	800554a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b00      	cmp	r3, #0
 8005458:	d108      	bne.n	800546c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005462:	d009      	beq.n	8005478 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	61da      	str	r2, [r3, #28]
 800546a:	e005      	b.n	8005478 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fe fa74 	bl	8003980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fc:	ea42 0103 	orr.w	r1, r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	0c1b      	lsrs	r3, r3, #16
 8005516:	f003 0104 	and.w	r1, r3, #4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	f003 0210 	and.w	r2, r3, #16
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005538:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b088      	sub	sp, #32
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	603b      	str	r3, [r7, #0]
 800555e:	4613      	mov	r3, r2
 8005560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_SPI_Transmit+0x22>
 8005570:	2302      	movs	r3, #2
 8005572:	e126      	b.n	80057c2 <HAL_SPI_Transmit+0x270>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800557c:	f7ff f836 	bl	80045ec <HAL_GetTick>
 8005580:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b01      	cmp	r3, #1
 8005590:	d002      	beq.n	8005598 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005592:	2302      	movs	r3, #2
 8005594:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005596:	e10b      	b.n	80057b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_Transmit+0x52>
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d102      	bne.n	80055aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055a8:	e102      	b.n	80057b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2203      	movs	r2, #3
 80055ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	88fa      	ldrh	r2, [r7, #6]
 80055c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	88fa      	ldrh	r2, [r7, #6]
 80055c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f0:	d10f      	bne.n	8005612 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005600:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005610:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b40      	cmp	r3, #64	; 0x40
 800561e:	d007      	beq.n	8005630 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800562e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005638:	d14b      	bne.n	80056d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_SPI_Transmit+0xf6>
 8005642:	8afb      	ldrh	r3, [r7, #22]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d13e      	bne.n	80056c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	881a      	ldrh	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	1c9a      	adds	r2, r3, #2
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800566c:	e02b      	b.n	80056c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	d112      	bne.n	80056a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	881a      	ldrh	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	1c9a      	adds	r2, r3, #2
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005696:	b29b      	uxth	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	86da      	strh	r2, [r3, #54]	; 0x36
 80056a0:	e011      	b.n	80056c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a2:	f7fe ffa3 	bl	80045ec <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d803      	bhi.n	80056ba <HAL_SPI_Transmit+0x168>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d102      	bne.n	80056c0 <HAL_SPI_Transmit+0x16e>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056c4:	e074      	b.n	80057b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1ce      	bne.n	800566e <HAL_SPI_Transmit+0x11c>
 80056d0:	e04c      	b.n	800576c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <HAL_SPI_Transmit+0x18e>
 80056da:	8afb      	ldrh	r3, [r7, #22]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d140      	bne.n	8005762 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	7812      	ldrb	r2, [r2, #0]
 80056ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005706:	e02c      	b.n	8005762 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b02      	cmp	r3, #2
 8005714:	d113      	bne.n	800573e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	330c      	adds	r3, #12
 8005720:	7812      	ldrb	r2, [r2, #0]
 8005722:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	86da      	strh	r2, [r3, #54]	; 0x36
 800573c:	e011      	b.n	8005762 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800573e:	f7fe ff55 	bl	80045ec <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d803      	bhi.n	8005756 <HAL_SPI_Transmit+0x204>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d102      	bne.n	800575c <HAL_SPI_Transmit+0x20a>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005760:	e026      	b.n	80057b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1cd      	bne.n	8005708 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fcdd 	bl	8006130 <SPI_EndRxTxTransaction>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800578a:	2300      	movs	r3, #0
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	77fb      	strb	r3, [r7, #31]
 80057ac:	e000      	b.n	80057b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80057ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b088      	sub	sp, #32
 80057ce:	af02      	add	r7, sp, #8
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e6:	d112      	bne.n	800580e <HAL_SPI_Receive+0x44>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10e      	bne.n	800580e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2204      	movs	r2, #4
 80057f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057f8:	88fa      	ldrh	r2, [r7, #6]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	4613      	mov	r3, r2
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f8f1 	bl	80059ec <HAL_SPI_TransmitReceive>
 800580a:	4603      	mov	r3, r0
 800580c:	e0ea      	b.n	80059e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_SPI_Receive+0x52>
 8005818:	2302      	movs	r3, #2
 800581a:	e0e3      	b.n	80059e4 <HAL_SPI_Receive+0x21a>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005824:	f7fe fee2 	bl	80045ec <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b01      	cmp	r3, #1
 8005834:	d002      	beq.n	800583c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005836:	2302      	movs	r3, #2
 8005838:	75fb      	strb	r3, [r7, #23]
    goto error;
 800583a:	e0ca      	b.n	80059d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <HAL_SPI_Receive+0x7e>
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800584c:	e0c1      	b.n	80059d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2204      	movs	r2, #4
 8005852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	88fa      	ldrh	r2, [r7, #6]
 8005866:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	88fa      	ldrh	r2, [r7, #6]
 800586c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005894:	d10f      	bne.n	80058b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d007      	beq.n	80058d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d162      	bne.n	80059a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058dc:	e02e      	b.n	800593c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d115      	bne.n	8005918 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f103 020c 	add.w	r2, r3, #12
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	7812      	ldrb	r2, [r2, #0]
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005916:	e011      	b.n	800593c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005918:	f7fe fe68 	bl	80045ec <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d803      	bhi.n	8005930 <HAL_SPI_Receive+0x166>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592e:	d102      	bne.n	8005936 <HAL_SPI_Receive+0x16c>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d102      	bne.n	800593c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	75fb      	strb	r3, [r7, #23]
          goto error;
 800593a:	e04a      	b.n	80059d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1cb      	bne.n	80058de <HAL_SPI_Receive+0x114>
 8005946:	e031      	b.n	80059ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b01      	cmp	r3, #1
 8005954:	d113      	bne.n	800597e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	b292      	uxth	r2, r2
 8005962:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	1c9a      	adds	r2, r3, #2
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800597c:	e011      	b.n	80059a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800597e:	f7fe fe35 	bl	80045ec <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d803      	bhi.n	8005996 <HAL_SPI_Receive+0x1cc>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005994:	d102      	bne.n	800599c <HAL_SPI_Receive+0x1d2>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059a0:	e017      	b.n	80059d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1cd      	bne.n	8005948 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 fb57 	bl	8006064 <SPI_EndRxTransaction>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
 80059ce:	e000      	b.n	80059d2 <HAL_SPI_Receive+0x208>
  }

error :
 80059d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08c      	sub	sp, #48	; 0x30
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059fa:	2301      	movs	r3, #1
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x26>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e18a      	b.n	8005d28 <HAL_SPI_TransmitReceive+0x33c>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a1a:	f7fe fde7 	bl	80045ec <HAL_GetTick>
 8005a1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a30:	887b      	ldrh	r3, [r7, #2]
 8005a32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d00f      	beq.n	8005a5c <HAL_SPI_TransmitReceive+0x70>
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a42:	d107      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x68>
 8005a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d003      	beq.n	8005a5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a54:	2302      	movs	r3, #2
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a5a:	e15b      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <HAL_SPI_TransmitReceive+0x82>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_SPI_TransmitReceive+0x82>
 8005a68:	887b      	ldrh	r3, [r7, #2]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d103      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a74:	e14e      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d003      	beq.n	8005a8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2205      	movs	r2, #5
 8005a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	887a      	ldrh	r2, [r7, #2]
 8005a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	887a      	ldrh	r2, [r7, #2]
 8005aa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	887a      	ldrh	r2, [r7, #2]
 8005aac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	887a      	ldrh	r2, [r7, #2]
 8005ab2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d007      	beq.n	8005ade <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005adc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae6:	d178      	bne.n	8005bda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <HAL_SPI_TransmitReceive+0x10a>
 8005af0:	8b7b      	ldrh	r3, [r7, #26]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d166      	bne.n	8005bc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	881a      	ldrh	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	1c9a      	adds	r2, r3, #2
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b1a:	e053      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d11b      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x176>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d016      	beq.n	8005b62 <HAL_SPI_TransmitReceive+0x176>
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d113      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	881a      	ldrh	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	1c9a      	adds	r2, r3, #2
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d119      	bne.n	8005ba4 <HAL_SPI_TransmitReceive+0x1b8>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d014      	beq.n	8005ba4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	b292      	uxth	r2, r2
 8005b86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	1c9a      	adds	r2, r3, #2
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ba4:	f7fe fd22 	bl	80045ec <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d807      	bhi.n	8005bc4 <HAL_SPI_TransmitReceive+0x1d8>
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bba:	d003      	beq.n	8005bc4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bc2:	e0a7      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1a6      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x130>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1a1      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x130>
 8005bd8:	e07c      	b.n	8005cd4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_SPI_TransmitReceive+0x1fc>
 8005be2:	8b7b      	ldrh	r3, [r7, #26]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d16b      	bne.n	8005cc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	7812      	ldrb	r2, [r2, #0]
 8005bf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c0e:	e057      	b.n	8005cc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d11c      	bne.n	8005c58 <HAL_SPI_TransmitReceive+0x26c>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d017      	beq.n	8005c58 <HAL_SPI_TransmitReceive+0x26c>
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d114      	bne.n	8005c58 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	7812      	ldrb	r2, [r2, #0]
 8005c3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d119      	bne.n	8005c9a <HAL_SPI_TransmitReceive+0x2ae>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d014      	beq.n	8005c9a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c96:	2301      	movs	r3, #1
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c9a:	f7fe fca7 	bl	80045ec <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d803      	bhi.n	8005cb2 <HAL_SPI_TransmitReceive+0x2c6>
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d102      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x2cc>
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d103      	bne.n	8005cc0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005cbe:	e029      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1a2      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x224>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d19d      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 fa29 	bl	8006130 <SPI_EndRxTxTransaction>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d006      	beq.n	8005cf2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005cf0:	e010      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10b      	bne.n	8005d12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	e000      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3730      	adds	r7, #48	; 0x30
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10e      	bne.n	8005d70 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	4798      	blx	r3
    return;
 8005d6e:	e0ce      	b.n	8005f0e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <HAL_SPI_IRQHandler+0x5e>
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d004      	beq.n	8005d8e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
    return;
 8005d8c:	e0bf      	b.n	8005f0e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10a      	bne.n	8005dae <HAL_SPI_IRQHandler+0x7e>
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d105      	bne.n	8005dae <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 80b0 	beq.w	8005f0e <HAL_SPI_IRQHandler+0x1de>
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 80aa 	beq.w	8005f0e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d023      	beq.n	8005e0c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d011      	beq.n	8005df4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd4:	f043 0204 	orr.w	r2, r3, #4
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	e00b      	b.n	8005e0c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	693b      	ldr	r3, [r7, #16]
        return;
 8005e0a:	e080      	b.n	8005f0e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d014      	beq.n	8005e40 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1a:	f043 0201 	orr.w	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00c      	beq.n	8005e64 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	f043 0208 	orr.w	r2, r3, #8
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e56:	2300      	movs	r3, #0
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60bb      	str	r3, [r7, #8]
 8005e62:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d04f      	beq.n	8005f0c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e7a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d104      	bne.n	8005e98 <HAL_SPI_IRQHandler+0x168>
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d034      	beq.n	8005f02 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0203 	bic.w	r2, r2, #3
 8005ea6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d011      	beq.n	8005ed4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb4:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <HAL_SPI_IRQHandler+0x1e4>)
 8005eb6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fe fcb2 	bl	8004826 <HAL_DMA_Abort_IT>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ecc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d016      	beq.n	8005f0a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee0:	4a0c      	ldr	r2, [pc, #48]	; (8005f14 <HAL_SPI_IRQHandler+0x1e4>)
 8005ee2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe fc9c 	bl	8004826 <HAL_DMA_Abort_IT>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005f00:	e003      	b.n	8005f0a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f808 	bl	8005f18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f08:	e000      	b.n	8005f0c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005f0a:	bf00      	nop
    return;
 8005f0c:	bf00      	nop
  }
}
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	08005f2d 	.word	0x08005f2d

08005f18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7ff ffe6 	bl	8005f18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f64:	f7fe fb42 	bl	80045ec <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	1a9b      	subs	r3, r3, r2
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	4413      	add	r3, r2
 8005f72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f74:	f7fe fb3a 	bl	80045ec <HAL_GetTick>
 8005f78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f7a:	4b39      	ldr	r3, [pc, #228]	; (8006060 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	015b      	lsls	r3, r3, #5
 8005f80:	0d1b      	lsrs	r3, r3, #20
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f8a:	e054      	b.n	8006036 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f92:	d050      	beq.n	8006036 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f94:	f7fe fb2a 	bl	80045ec <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d902      	bls.n	8005faa <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d13d      	bne.n	8006026 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fc2:	d111      	bne.n	8005fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fcc:	d004      	beq.n	8005fd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd6:	d107      	bne.n	8005fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff0:	d10f      	bne.n	8006012 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006010:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e017      	b.n	8006056 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	3b01      	subs	r3, #1
 8006034:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4013      	ands	r3, r2
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	429a      	cmp	r2, r3
 8006044:	bf0c      	ite	eq
 8006046:	2301      	moveq	r3, #1
 8006048:	2300      	movne	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	429a      	cmp	r2, r3
 8006052:	d19b      	bne.n	8005f8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3720      	adds	r7, #32
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000020 	.word	0x20000020

08006064 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006078:	d111      	bne.n	800609e <SPI_EndRxTransaction+0x3a>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006082:	d004      	beq.n	800608e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608c:	d107      	bne.n	800609e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060a6:	d12a      	bne.n	80060fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b0:	d012      	beq.n	80060d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	2180      	movs	r1, #128	; 0x80
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff ff49 	bl	8005f54 <SPI_WaitFlagStateUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d02d      	beq.n	8006124 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	f043 0220 	orr.w	r2, r3, #32
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e026      	b.n	8006126 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2200      	movs	r2, #0
 80060e0:	2101      	movs	r1, #1
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff ff36 	bl	8005f54 <SPI_WaitFlagStateUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01a      	beq.n	8006124 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e013      	b.n	8006126 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2200      	movs	r2, #0
 8006106:	2101      	movs	r1, #1
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff ff23 	bl	8005f54 <SPI_WaitFlagStateUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d007      	beq.n	8006124 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006118:	f043 0220 	orr.w	r2, r3, #32
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e000      	b.n	8006126 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800613c:	4b1b      	ldr	r3, [pc, #108]	; (80061ac <SPI_EndRxTxTransaction+0x7c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1b      	ldr	r2, [pc, #108]	; (80061b0 <SPI_EndRxTxTransaction+0x80>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	0d5b      	lsrs	r3, r3, #21
 8006148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800614c:	fb02 f303 	mul.w	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800615a:	d112      	bne.n	8006182 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2200      	movs	r2, #0
 8006164:	2180      	movs	r1, #128	; 0x80
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fef4 	bl	8005f54 <SPI_WaitFlagStateUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d016      	beq.n	80061a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e00f      	b.n	80061a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	3b01      	subs	r3, #1
 800618c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006198:	2b80      	cmp	r3, #128	; 0x80
 800619a:	d0f2      	beq.n	8006182 <SPI_EndRxTxTransaction+0x52>
 800619c:	e000      	b.n	80061a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800619e:	bf00      	nop
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000020 	.word	0x20000020
 80061b0:	165e9f81 	.word	0x165e9f81

080061b4 <__NVIC_SetPriority>:
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	6039      	str	r1, [r7, #0]
 80061be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	db0a      	blt.n	80061de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	490c      	ldr	r1, [pc, #48]	; (8006200 <__NVIC_SetPriority+0x4c>)
 80061ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061d2:	0112      	lsls	r2, r2, #4
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	440b      	add	r3, r1
 80061d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061dc:	e00a      	b.n	80061f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	4908      	ldr	r1, [pc, #32]	; (8006204 <__NVIC_SetPriority+0x50>)
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	3b04      	subs	r3, #4
 80061ec:	0112      	lsls	r2, r2, #4
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	440b      	add	r3, r1
 80061f2:	761a      	strb	r2, [r3, #24]
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	e000e100 	.word	0xe000e100
 8006204:	e000ed00 	.word	0xe000ed00

08006208 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800620c:	2100      	movs	r1, #0
 800620e:	f06f 0004 	mvn.w	r0, #4
 8006212:	f7ff ffcf 	bl	80061b4 <__NVIC_SetPriority>
#endif
}
 8006216:	bf00      	nop
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006222:	f3ef 8305 	mrs	r3, IPSR
 8006226:	603b      	str	r3, [r7, #0]
  return(result);
 8006228:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800622e:	f06f 0305 	mvn.w	r3, #5
 8006232:	607b      	str	r3, [r7, #4]
 8006234:	e00c      	b.n	8006250 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006236:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <osKernelInitialize+0x44>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d105      	bne.n	800624a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800623e:	4b08      	ldr	r3, [pc, #32]	; (8006260 <osKernelInitialize+0x44>)
 8006240:	2201      	movs	r2, #1
 8006242:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006244:	2300      	movs	r3, #0
 8006246:	607b      	str	r3, [r7, #4]
 8006248:	e002      	b.n	8006250 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800624a:	f04f 33ff 	mov.w	r3, #4294967295
 800624e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006250:	687b      	ldr	r3, [r7, #4]
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	20000998 	.word	0x20000998

08006264 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800626a:	f3ef 8305 	mrs	r3, IPSR
 800626e:	603b      	str	r3, [r7, #0]
  return(result);
 8006270:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006276:	f06f 0305 	mvn.w	r3, #5
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	e010      	b.n	80062a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800627e:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <osKernelStart+0x48>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d109      	bne.n	800629a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006286:	f7ff ffbf 	bl	8006208 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800628a:	4b08      	ldr	r3, [pc, #32]	; (80062ac <osKernelStart+0x48>)
 800628c:	2202      	movs	r2, #2
 800628e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006290:	f001 f87c 	bl	800738c <vTaskStartScheduler>
      stat = osOK;
 8006294:	2300      	movs	r3, #0
 8006296:	607b      	str	r3, [r7, #4]
 8006298:	e002      	b.n	80062a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800629a:	f04f 33ff 	mov.w	r3, #4294967295
 800629e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062a0:	687b      	ldr	r3, [r7, #4]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000998 	.word	0x20000998

080062b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08e      	sub	sp, #56	; 0x38
 80062b4:	af04      	add	r7, sp, #16
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c0:	f3ef 8305 	mrs	r3, IPSR
 80062c4:	617b      	str	r3, [r7, #20]
  return(result);
 80062c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d17e      	bne.n	80063ca <osThreadNew+0x11a>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d07b      	beq.n	80063ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062d2:	2380      	movs	r3, #128	; 0x80
 80062d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062d6:	2318      	movs	r3, #24
 80062d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80062de:	f04f 33ff 	mov.w	r3, #4294967295
 80062e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d045      	beq.n	8006376 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <osThreadNew+0x48>
        name = attr->name;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <osThreadNew+0x6e>
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	2b38      	cmp	r3, #56	; 0x38
 8006310:	d805      	bhi.n	800631e <osThreadNew+0x6e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <osThreadNew+0x72>
        return (NULL);
 800631e:	2300      	movs	r3, #0
 8006320:	e054      	b.n	80063cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	089b      	lsrs	r3, r3, #2
 8006330:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00e      	beq.n	8006358 <osThreadNew+0xa8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	2ba7      	cmp	r3, #167	; 0xa7
 8006340:	d90a      	bls.n	8006358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006346:	2b00      	cmp	r3, #0
 8006348:	d006      	beq.n	8006358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <osThreadNew+0xa8>
        mem = 1;
 8006352:	2301      	movs	r3, #1
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	e010      	b.n	800637a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10c      	bne.n	800637a <osThreadNew+0xca>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d108      	bne.n	800637a <osThreadNew+0xca>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <osThreadNew+0xca>
          mem = 0;
 8006370:	2300      	movs	r3, #0
 8006372:	61bb      	str	r3, [r7, #24]
 8006374:	e001      	b.n	800637a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d110      	bne.n	80063a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006388:	9202      	str	r2, [sp, #8]
 800638a:	9301      	str	r3, [sp, #4]
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	6a3a      	ldr	r2, [r7, #32]
 8006394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fe0c 	bl	8006fb4 <xTaskCreateStatic>
 800639c:	4603      	mov	r3, r0
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	e013      	b.n	80063ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d110      	bne.n	80063ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	f107 0310 	add.w	r3, r7, #16
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fe57 	bl	800706e <xTaskCreate>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d001      	beq.n	80063ca <osThreadNew+0x11a>
            hTask = NULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063ca:	693b      	ldr	r3, [r7, #16]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3728      	adds	r7, #40	; 0x28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063dc:	f3ef 8305 	mrs	r3, IPSR
 80063e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80063e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <osDelay+0x1c>
    stat = osErrorISR;
 80063e8:	f06f 0305 	mvn.w	r3, #5
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	e007      	b.n	8006400 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <osDelay+0x2c>
      vTaskDelay(ticks);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 ff92 	bl	8007324 <vTaskDelay>
    }
  }

  return (stat);
 8006400:	68fb      	ldr	r3, [r7, #12]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4a07      	ldr	r2, [pc, #28]	; (8006438 <vApplicationGetIdleTaskMemory+0x2c>)
 800641c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	4a06      	ldr	r2, [pc, #24]	; (800643c <vApplicationGetIdleTaskMemory+0x30>)
 8006422:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2280      	movs	r2, #128	; 0x80
 8006428:	601a      	str	r2, [r3, #0]
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	2000099c 	.word	0x2000099c
 800643c:	20000a44 	.word	0x20000a44

08006440 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4a07      	ldr	r2, [pc, #28]	; (800646c <vApplicationGetTimerTaskMemory+0x2c>)
 8006450:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4a06      	ldr	r2, [pc, #24]	; (8006470 <vApplicationGetTimerTaskMemory+0x30>)
 8006456:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800645e:	601a      	str	r2, [r3, #0]
}
 8006460:	bf00      	nop
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	20000c44 	.word	0x20000c44
 8006470:	20000cec 	.word	0x20000cec

08006474 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f103 0208 	add.w	r2, r3, #8
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f04f 32ff 	mov.w	r2, #4294967295
 800648c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f103 0208 	add.w	r2, r3, #8
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f103 0208 	add.w	r2, r3, #8
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	601a      	str	r2, [r3, #0]
}
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d103      	bne.n	8006536 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	e00c      	b.n	8006550 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3308      	adds	r3, #8
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e002      	b.n	8006544 <vListInsert+0x2e>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	429a      	cmp	r2, r3
 800654e:	d2f6      	bcs.n	800653e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	601a      	str	r2, [r3, #0]
}
 800657c:	bf00      	nop
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6892      	ldr	r2, [r2, #8]
 800659e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6852      	ldr	r2, [r2, #4]
 80065a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d103      	bne.n	80065bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	1e5a      	subs	r2, r3, #1
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006606:	f002 f875 	bl	80086f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006612:	68f9      	ldr	r1, [r7, #12]
 8006614:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006616:	fb01 f303 	mul.w	r3, r1, r3
 800661a:	441a      	add	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	3b01      	subs	r3, #1
 8006638:	68f9      	ldr	r1, [r7, #12]
 800663a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	441a      	add	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	22ff      	movs	r2, #255	; 0xff
 800664a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	22ff      	movs	r2, #255	; 0xff
 8006652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d114      	bne.n	8006686 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01a      	beq.n	800669a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3310      	adds	r3, #16
 8006668:	4618      	mov	r0, r3
 800666a:	f001 f929 	bl	80078c0 <xTaskRemoveFromEventList>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d012      	beq.n	800669a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006674:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <xQueueGenericReset+0xcc>)
 8006676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	e009      	b.n	800669a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3310      	adds	r3, #16
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff fef2 	bl	8006474 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3324      	adds	r3, #36	; 0x24
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff feed 	bl	8006474 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800669a:	f002 f85b 	bl	8008754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800669e:	2301      	movs	r3, #1
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08e      	sub	sp, #56	; 0x38
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10a      	bne.n	80066f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <xQueueGenericCreateStatic+0x52>
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <xQueueGenericCreateStatic+0x56>
 80066fe:	2301      	movs	r3, #1
 8006700:	e000      	b.n	8006704 <xQueueGenericCreateStatic+0x58>
 8006702:	2300      	movs	r3, #0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	623b      	str	r3, [r7, #32]
}
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d102      	bne.n	800672a <xQueueGenericCreateStatic+0x7e>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <xQueueGenericCreateStatic+0x82>
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <xQueueGenericCreateStatic+0x84>
 800672e:	2300      	movs	r3, #0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	61fb      	str	r3, [r7, #28]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800674a:	2350      	movs	r3, #80	; 0x50
 800674c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b50      	cmp	r3, #80	; 0x50
 8006752:	d00a      	beq.n	800676a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	61bb      	str	r3, [r7, #24]
}
 8006766:	bf00      	nop
 8006768:	e7fe      	b.n	8006768 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800676a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00d      	beq.n	8006792 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800677e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	4613      	mov	r3, r2
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 f805 	bl	800679c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006794:	4618      	mov	r0, r3
 8006796:	3730      	adds	r7, #48	; 0x30
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d103      	bne.n	80067b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	e002      	b.n	80067be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067ca:	2101      	movs	r1, #1
 80067cc:	69b8      	ldr	r0, [r7, #24]
 80067ce:	f7ff ff05 	bl	80065dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08e      	sub	sp, #56	; 0x38
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067f2:	2300      	movs	r3, #0
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10a      	bne.n	8006816 <xQueueGenericSend+0x32>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d103      	bne.n	8006824 <xQueueGenericSend+0x40>
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <xQueueGenericSend+0x44>
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <xQueueGenericSend+0x46>
 8006828:	2300      	movs	r3, #0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <xQueueGenericSend+0x60>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d103      	bne.n	8006852 <xQueueGenericSend+0x6e>
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <xQueueGenericSend+0x72>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <xQueueGenericSend+0x74>
 8006856:	2300      	movs	r3, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <xQueueGenericSend+0x8e>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	623b      	str	r3, [r7, #32]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006872:	f001 f9e7 	bl	8007c44 <xTaskGetSchedulerState>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d102      	bne.n	8006882 <xQueueGenericSend+0x9e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <xQueueGenericSend+0xa2>
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <xQueueGenericSend+0xa4>
 8006886:	2300      	movs	r3, #0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	61fb      	str	r3, [r7, #28]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068a2:	f001 ff27 	bl	80086f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d302      	bcc.n	80068b8 <xQueueGenericSend+0xd4>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d129      	bne.n	800690c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068be:	f000 fa0b 	bl	8006cd8 <prvCopyDataToQueue>
 80068c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d010      	beq.n	80068ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	3324      	adds	r3, #36	; 0x24
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fff5 	bl	80078c0 <xTaskRemoveFromEventList>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d013      	beq.n	8006904 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068dc:	4b3f      	ldr	r3, [pc, #252]	; (80069dc <xQueueGenericSend+0x1f8>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	e00a      	b.n	8006904 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068f4:	4b39      	ldr	r3, [pc, #228]	; (80069dc <xQueueGenericSend+0x1f8>)
 80068f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006904:	f001 ff26 	bl	8008754 <vPortExitCritical>
				return pdPASS;
 8006908:	2301      	movs	r3, #1
 800690a:	e063      	b.n	80069d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d103      	bne.n	800691a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006912:	f001 ff1f 	bl	8008754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006916:	2300      	movs	r3, #0
 8006918:	e05c      	b.n	80069d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800691a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691c:	2b00      	cmp	r3, #0
 800691e:	d106      	bne.n	800692e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006920:	f107 0314 	add.w	r3, r7, #20
 8006924:	4618      	mov	r0, r3
 8006926:	f001 f82f 	bl	8007988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800692a:	2301      	movs	r3, #1
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800692e:	f001 ff11 	bl	8008754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006932:	f000 fd9b 	bl	800746c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006936:	f001 fedd 	bl	80086f4 <vPortEnterCritical>
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006940:	b25b      	sxtb	r3, r3
 8006942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006946:	d103      	bne.n	8006950 <xQueueGenericSend+0x16c>
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006956:	b25b      	sxtb	r3, r3
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d103      	bne.n	8006966 <xQueueGenericSend+0x182>
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006966:	f001 fef5 	bl	8008754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800696a:	1d3a      	adds	r2, r7, #4
 800696c:	f107 0314 	add.w	r3, r7, #20
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f001 f81e 	bl	80079b4 <xTaskCheckForTimeOut>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d124      	bne.n	80069c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800697e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006980:	f000 faa2 	bl	8006ec8 <prvIsQueueFull>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d018      	beq.n	80069bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	3310      	adds	r3, #16
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4611      	mov	r1, r2
 8006992:	4618      	mov	r0, r3
 8006994:	f000 ff44 	bl	8007820 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800699a:	f000 fa2d 	bl	8006df8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800699e:	f000 fd73 	bl	8007488 <xTaskResumeAll>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f47f af7c 	bne.w	80068a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80069aa:	4b0c      	ldr	r3, [pc, #48]	; (80069dc <xQueueGenericSend+0x1f8>)
 80069ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	e772      	b.n	80068a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069be:	f000 fa1b 	bl	8006df8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069c2:	f000 fd61 	bl	8007488 <xTaskResumeAll>
 80069c6:	e76c      	b.n	80068a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ca:	f000 fa15 	bl	8006df8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069ce:	f000 fd5b 	bl	8007488 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3738      	adds	r7, #56	; 0x38
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b090      	sub	sp, #64	; 0x40
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d103      	bne.n	8006a1c <xQueueGenericSendFromISR+0x3c>
 8006a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <xQueueGenericSendFromISR+0x40>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <xQueueGenericSendFromISR+0x42>
 8006a20:	2300      	movs	r3, #0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a38:	bf00      	nop
 8006a3a:	e7fe      	b.n	8006a3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d103      	bne.n	8006a4a <xQueueGenericSendFromISR+0x6a>
 8006a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <xQueueGenericSendFromISR+0x6e>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <xQueueGenericSendFromISR+0x70>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	623b      	str	r3, [r7, #32]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a6a:	f001 ff25 	bl	80088b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	61fa      	str	r2, [r7, #28]
 8006a84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d302      	bcc.n	8006a9c <xQueueGenericSendFromISR+0xbc>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d12f      	bne.n	8006afc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ab2:	f000 f911 	bl	8006cd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ab6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d112      	bne.n	8006ae6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d016      	beq.n	8006af6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	3324      	adds	r3, #36	; 0x24
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fef7 	bl	80078c0 <xTaskRemoveFromEventList>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00e      	beq.n	8006af6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	e007      	b.n	8006af6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ae6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006aea:	3301      	adds	r3, #1
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	b25a      	sxtb	r2, r3
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006af6:	2301      	movs	r3, #1
 8006af8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006afa:	e001      	b.n	8006b00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3740      	adds	r7, #64	; 0x40
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08c      	sub	sp, #48	; 0x30
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b24:	2300      	movs	r3, #0
 8006b26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <xQueueReceive+0x30>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	623b      	str	r3, [r7, #32]
}
 8006b44:	bf00      	nop
 8006b46:	e7fe      	b.n	8006b46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d103      	bne.n	8006b56 <xQueueReceive+0x3e>
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <xQueueReceive+0x42>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <xQueueReceive+0x44>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10a      	bne.n	8006b76 <xQueueReceive+0x5e>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	61fb      	str	r3, [r7, #28]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b76:	f001 f865 	bl	8007c44 <xTaskGetSchedulerState>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <xQueueReceive+0x6e>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <xQueueReceive+0x72>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <xQueueReceive+0x74>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <xQueueReceive+0x8e>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	61bb      	str	r3, [r7, #24]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ba6:	f001 fda5 	bl	80086f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01f      	beq.n	8006bf6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bba:	f000 f8f7 	bl	8006dac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	1e5a      	subs	r2, r3, #1
 8006bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00f      	beq.n	8006bee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	3310      	adds	r3, #16
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fe74 	bl	80078c0 <xTaskRemoveFromEventList>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bde:	4b3d      	ldr	r3, [pc, #244]	; (8006cd4 <xQueueReceive+0x1bc>)
 8006be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bee:	f001 fdb1 	bl	8008754 <vPortExitCritical>
				return pdPASS;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e069      	b.n	8006cca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bfc:	f001 fdaa 	bl	8008754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e062      	b.n	8006cca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c0a:	f107 0310 	add.w	r3, r7, #16
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 feba 	bl	8007988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c14:	2301      	movs	r3, #1
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c18:	f001 fd9c 	bl	8008754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c1c:	f000 fc26 	bl	800746c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c20:	f001 fd68 	bl	80086f4 <vPortEnterCritical>
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c2a:	b25b      	sxtb	r3, r3
 8006c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c30:	d103      	bne.n	8006c3a <xQueueReceive+0x122>
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c40:	b25b      	sxtb	r3, r3
 8006c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c46:	d103      	bne.n	8006c50 <xQueueReceive+0x138>
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c50:	f001 fd80 	bl	8008754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c54:	1d3a      	adds	r2, r7, #4
 8006c56:	f107 0310 	add.w	r3, r7, #16
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fea9 	bl	80079b4 <xTaskCheckForTimeOut>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d123      	bne.n	8006cb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c6a:	f000 f917 	bl	8006e9c <prvIsQueueEmpty>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d017      	beq.n	8006ca4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	3324      	adds	r3, #36	; 0x24
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fdcf 	bl	8007820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c84:	f000 f8b8 	bl	8006df8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c88:	f000 fbfe 	bl	8007488 <xTaskResumeAll>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d189      	bne.n	8006ba6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c92:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <xQueueReceive+0x1bc>)
 8006c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	e780      	b.n	8006ba6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca6:	f000 f8a7 	bl	8006df8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006caa:	f000 fbed 	bl	8007488 <xTaskResumeAll>
 8006cae:	e77a      	b.n	8006ba6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb2:	f000 f8a1 	bl	8006df8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cb6:	f000 fbe7 	bl	8007488 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cbc:	f000 f8ee 	bl	8006e9c <prvIsQueueEmpty>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f43f af6f 	beq.w	8006ba6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3730      	adds	r7, #48	; 0x30
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10d      	bne.n	8006d12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d14d      	bne.n	8006d9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 ffbc 	bl	8007c80 <xTaskPriorityDisinherit>
 8006d08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	609a      	str	r2, [r3, #8]
 8006d10:	e043      	b.n	8006d9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d119      	bne.n	8006d4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6858      	ldr	r0, [r3, #4]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	461a      	mov	r2, r3
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	f002 f89e 	bl	8008e64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	441a      	add	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d32b      	bcc.n	8006d9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	e026      	b.n	8006d9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68d8      	ldr	r0, [r3, #12]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	461a      	mov	r2, r3
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	f002 f884 	bl	8008e64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	425b      	negs	r3, r3
 8006d66:	441a      	add	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d207      	bcs.n	8006d88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	425b      	negs	r3, r3
 8006d82:	441a      	add	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d105      	bne.n	8006d9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006da2:	697b      	ldr	r3, [r7, #20]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d018      	beq.n	8006df0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc6:	441a      	add	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d303      	bcc.n	8006de0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68d9      	ldr	r1, [r3, #12]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	461a      	mov	r2, r3
 8006dea:	6838      	ldr	r0, [r7, #0]
 8006dec:	f002 f83a 	bl	8008e64 <memcpy>
	}
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e00:	f001 fc78 	bl	80086f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e0c:	e011      	b.n	8006e32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d012      	beq.n	8006e3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3324      	adds	r3, #36	; 0x24
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fd50 	bl	80078c0 <xTaskRemoveFromEventList>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e26:	f000 fe27 	bl	8007a78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	dce9      	bgt.n	8006e0e <prvUnlockQueue+0x16>
 8006e3a:	e000      	b.n	8006e3e <prvUnlockQueue+0x46>
					break;
 8006e3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	22ff      	movs	r2, #255	; 0xff
 8006e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e46:	f001 fc85 	bl	8008754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e4a:	f001 fc53 	bl	80086f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e56:	e011      	b.n	8006e7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d012      	beq.n	8006e86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3310      	adds	r3, #16
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fd2b 	bl	80078c0 <xTaskRemoveFromEventList>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e70:	f000 fe02 	bl	8007a78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	dce9      	bgt.n	8006e58 <prvUnlockQueue+0x60>
 8006e84:	e000      	b.n	8006e88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	22ff      	movs	r2, #255	; 0xff
 8006e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e90:	f001 fc60 	bl	8008754 <vPortExitCritical>
}
 8006e94:	bf00      	nop
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ea4:	f001 fc26 	bl	80086f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	e001      	b.n	8006eba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eba:	f001 fc4b 	bl	8008754 <vPortExitCritical>

	return xReturn;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ed0:	f001 fc10 	bl	80086f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d102      	bne.n	8006ee6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e001      	b.n	8006eea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eea:	f001 fc33 	bl	8008754 <vPortExitCritical>

	return xReturn;
 8006eee:	68fb      	ldr	r3, [r7, #12]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	e014      	b.n	8006f32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f08:	4a0f      	ldr	r2, [pc, #60]	; (8006f48 <vQueueAddToRegistry+0x50>)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10b      	bne.n	8006f2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f14:	490c      	ldr	r1, [pc, #48]	; (8006f48 <vQueueAddToRegistry+0x50>)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f1e:	4a0a      	ldr	r2, [pc, #40]	; (8006f48 <vQueueAddToRegistry+0x50>)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	4413      	add	r3, r2
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f2a:	e006      	b.n	8006f3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b07      	cmp	r3, #7
 8006f36:	d9e7      	bls.n	8006f08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f38:	bf00      	nop
 8006f3a:	bf00      	nop
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	200010ec 	.word	0x200010ec

08006f4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f5c:	f001 fbca 	bl	80086f4 <vPortEnterCritical>
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f66:	b25b      	sxtb	r3, r3
 8006f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6c:	d103      	bne.n	8006f76 <vQueueWaitForMessageRestricted+0x2a>
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f7c:	b25b      	sxtb	r3, r3
 8006f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f82:	d103      	bne.n	8006f8c <vQueueWaitForMessageRestricted+0x40>
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f8c:	f001 fbe2 	bl	8008754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d106      	bne.n	8006fa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	3324      	adds	r3, #36	; 0x24
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fc61 	bl	8007868 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fa6:	6978      	ldr	r0, [r7, #20]
 8006fa8:	f7ff ff26 	bl	8006df8 <prvUnlockQueue>
	}
 8006fac:	bf00      	nop
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08e      	sub	sp, #56	; 0x38
 8006fb8:	af04      	add	r7, sp, #16
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <xTaskCreateStatic+0x2a>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	623b      	str	r3, [r7, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10a      	bne.n	8006ffa <xTaskCreateStatic+0x46>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	61fb      	str	r3, [r7, #28]
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ffa:	23a8      	movs	r3, #168	; 0xa8
 8006ffc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	2ba8      	cmp	r3, #168	; 0xa8
 8007002:	d00a      	beq.n	800701a <xTaskCreateStatic+0x66>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	61bb      	str	r3, [r7, #24]
}
 8007016:	bf00      	nop
 8007018:	e7fe      	b.n	8007018 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800701a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	2b00      	cmp	r3, #0
 8007020:	d01e      	beq.n	8007060 <xTaskCreateStatic+0xac>
 8007022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01b      	beq.n	8007060 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007030:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	2202      	movs	r2, #2
 8007036:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800703a:	2300      	movs	r3, #0
 800703c:	9303      	str	r3, [sp, #12]
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	9302      	str	r3, [sp, #8]
 8007042:	f107 0314 	add.w	r3, r7, #20
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 f850 	bl	80070f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800705a:	f000 f8f3 	bl	8007244 <prvAddNewTaskToReadyList>
 800705e:	e001      	b.n	8007064 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007060:	2300      	movs	r3, #0
 8007062:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007064:	697b      	ldr	r3, [r7, #20]
	}
 8007066:	4618      	mov	r0, r3
 8007068:	3728      	adds	r7, #40	; 0x28
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800706e:	b580      	push	{r7, lr}
 8007070:	b08c      	sub	sp, #48	; 0x30
 8007072:	af04      	add	r7, sp, #16
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	603b      	str	r3, [r7, #0]
 800707a:	4613      	mov	r3, r2
 800707c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800707e:	88fb      	ldrh	r3, [r7, #6]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4618      	mov	r0, r3
 8007084:	f001 fc58 	bl	8008938 <pvPortMalloc>
 8007088:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00e      	beq.n	80070ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007090:	20a8      	movs	r0, #168	; 0xa8
 8007092:	f001 fc51 	bl	8008938 <pvPortMalloc>
 8007096:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30
 80070a4:	e005      	b.n	80070b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070a6:	6978      	ldr	r0, [r7, #20]
 80070a8:	f001 fd12 	bl	8008ad0 <vPortFree>
 80070ac:	e001      	b.n	80070b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d017      	beq.n	80070e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070c0:	88fa      	ldrh	r2, [r7, #6]
 80070c2:	2300      	movs	r3, #0
 80070c4:	9303      	str	r3, [sp, #12]
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	9302      	str	r3, [sp, #8]
 80070ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68b9      	ldr	r1, [r7, #8]
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f80e 	bl	80070f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070dc:	69f8      	ldr	r0, [r7, #28]
 80070de:	f000 f8b1 	bl	8007244 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070e2:	2301      	movs	r3, #1
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	e002      	b.n	80070ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070e8:	f04f 33ff 	mov.w	r3, #4294967295
 80070ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070ee:	69bb      	ldr	r3, [r7, #24]
	}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3720      	adds	r7, #32
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007108:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	461a      	mov	r2, r3
 8007110:	21a5      	movs	r1, #165	; 0xa5
 8007112:	f001 fdfb 	bl	8008d0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007120:	3b01      	subs	r3, #1
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	f023 0307 	bic.w	r3, r3, #7
 800712e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <prvInitialiseNewTask+0x58>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	617b      	str	r3, [r7, #20]
}
 800714c:	bf00      	nop
 800714e:	e7fe      	b.n	800714e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d01f      	beq.n	8007196 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007156:	2300      	movs	r3, #0
 8007158:	61fb      	str	r3, [r7, #28]
 800715a:	e012      	b.n	8007182 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	7819      	ldrb	r1, [r3, #0]
 8007164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	3334      	adds	r3, #52	; 0x34
 800716c:	460a      	mov	r2, r1
 800716e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	4413      	add	r3, r2
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d006      	beq.n	800718a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	3301      	adds	r3, #1
 8007180:	61fb      	str	r3, [r7, #28]
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	2b0f      	cmp	r3, #15
 8007186:	d9e9      	bls.n	800715c <prvInitialiseNewTask+0x64>
 8007188:	e000      	b.n	800718c <prvInitialiseNewTask+0x94>
			{
				break;
 800718a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007194:	e003      	b.n	800719e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	2b37      	cmp	r3, #55	; 0x37
 80071a2:	d901      	bls.n	80071a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071a4:	2337      	movs	r3, #55	; 0x37
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	2200      	movs	r2, #0
 80071b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	3304      	adds	r3, #4
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff f978 	bl	80064b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	3318      	adds	r3, #24
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff f973 	bl	80064b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	3354      	adds	r3, #84	; 0x54
 80071f8:	224c      	movs	r2, #76	; 0x4c
 80071fa:	2100      	movs	r1, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 fd85 	bl	8008d0c <memset>
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	4a0c      	ldr	r2, [pc, #48]	; (8007238 <prvInitialiseNewTask+0x140>)
 8007206:	659a      	str	r2, [r3, #88]	; 0x58
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	4a0c      	ldr	r2, [pc, #48]	; (800723c <prvInitialiseNewTask+0x144>)
 800720c:	65da      	str	r2, [r3, #92]	; 0x5c
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	4a0b      	ldr	r2, [pc, #44]	; (8007240 <prvInitialiseNewTask+0x148>)
 8007212:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	69b8      	ldr	r0, [r7, #24]
 800721a:	f001 f941 	bl	80084a0 <pxPortInitialiseStack>
 800721e:	4602      	mov	r2, r0
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800722e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007230:	bf00      	nop
 8007232:	3720      	adds	r7, #32
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20005380 	.word	0x20005380
 800723c:	200053e8 	.word	0x200053e8
 8007240:	20005450 	.word	0x20005450

08007244 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800724c:	f001 fa52 	bl	80086f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007250:	4b2d      	ldr	r3, [pc, #180]	; (8007308 <prvAddNewTaskToReadyList+0xc4>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3301      	adds	r3, #1
 8007256:	4a2c      	ldr	r2, [pc, #176]	; (8007308 <prvAddNewTaskToReadyList+0xc4>)
 8007258:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800725a:	4b2c      	ldr	r3, [pc, #176]	; (800730c <prvAddNewTaskToReadyList+0xc8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d109      	bne.n	8007276 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007262:	4a2a      	ldr	r2, [pc, #168]	; (800730c <prvAddNewTaskToReadyList+0xc8>)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007268:	4b27      	ldr	r3, [pc, #156]	; (8007308 <prvAddNewTaskToReadyList+0xc4>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d110      	bne.n	8007292 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007270:	f000 fc26 	bl	8007ac0 <prvInitialiseTaskLists>
 8007274:	e00d      	b.n	8007292 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007276:	4b26      	ldr	r3, [pc, #152]	; (8007310 <prvAddNewTaskToReadyList+0xcc>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d109      	bne.n	8007292 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800727e:	4b23      	ldr	r3, [pc, #140]	; (800730c <prvAddNewTaskToReadyList+0xc8>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	429a      	cmp	r2, r3
 800728a:	d802      	bhi.n	8007292 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800728c:	4a1f      	ldr	r2, [pc, #124]	; (800730c <prvAddNewTaskToReadyList+0xc8>)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007292:	4b20      	ldr	r3, [pc, #128]	; (8007314 <prvAddNewTaskToReadyList+0xd0>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3301      	adds	r3, #1
 8007298:	4a1e      	ldr	r2, [pc, #120]	; (8007314 <prvAddNewTaskToReadyList+0xd0>)
 800729a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800729c:	4b1d      	ldr	r3, [pc, #116]	; (8007314 <prvAddNewTaskToReadyList+0xd0>)
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	4b1b      	ldr	r3, [pc, #108]	; (8007318 <prvAddNewTaskToReadyList+0xd4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d903      	bls.n	80072b8 <prvAddNewTaskToReadyList+0x74>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	4a18      	ldr	r2, [pc, #96]	; (8007318 <prvAddNewTaskToReadyList+0xd4>)
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4a15      	ldr	r2, [pc, #84]	; (800731c <prvAddNewTaskToReadyList+0xd8>)
 80072c6:	441a      	add	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f7ff f8fd 	bl	80064ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072d4:	f001 fa3e 	bl	8008754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072d8:	4b0d      	ldr	r3, [pc, #52]	; (8007310 <prvAddNewTaskToReadyList+0xcc>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00e      	beq.n	80072fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <prvAddNewTaskToReadyList+0xc8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d207      	bcs.n	80072fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072ee:	4b0c      	ldr	r3, [pc, #48]	; (8007320 <prvAddNewTaskToReadyList+0xdc>)
 80072f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072fe:	bf00      	nop
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20001600 	.word	0x20001600
 800730c:	2000112c 	.word	0x2000112c
 8007310:	2000160c 	.word	0x2000160c
 8007314:	2000161c 	.word	0x2000161c
 8007318:	20001608 	.word	0x20001608
 800731c:	20001130 	.word	0x20001130
 8007320:	e000ed04 	.word	0xe000ed04

08007324 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d017      	beq.n	8007366 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007336:	4b13      	ldr	r3, [pc, #76]	; (8007384 <vTaskDelay+0x60>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <vTaskDelay+0x30>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	60bb      	str	r3, [r7, #8]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007354:	f000 f88a 	bl	800746c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007358:	2100      	movs	r1, #0
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fcfe 	bl	8007d5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007360:	f000 f892 	bl	8007488 <xTaskResumeAll>
 8007364:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d107      	bne.n	800737c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800736c:	4b06      	ldr	r3, [pc, #24]	; (8007388 <vTaskDelay+0x64>)
 800736e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20001628 	.word	0x20001628
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08a      	sub	sp, #40	; 0x28
 8007390:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007396:	2300      	movs	r3, #0
 8007398:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800739a:	463a      	mov	r2, r7
 800739c:	1d39      	adds	r1, r7, #4
 800739e:	f107 0308 	add.w	r3, r7, #8
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff f832 	bl	800640c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	9202      	str	r2, [sp, #8]
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	2300      	movs	r3, #0
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	2300      	movs	r3, #0
 80073b8:	460a      	mov	r2, r1
 80073ba:	4924      	ldr	r1, [pc, #144]	; (800744c <vTaskStartScheduler+0xc0>)
 80073bc:	4824      	ldr	r0, [pc, #144]	; (8007450 <vTaskStartScheduler+0xc4>)
 80073be:	f7ff fdf9 	bl	8006fb4 <xTaskCreateStatic>
 80073c2:	4603      	mov	r3, r0
 80073c4:	4a23      	ldr	r2, [pc, #140]	; (8007454 <vTaskStartScheduler+0xc8>)
 80073c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073c8:	4b22      	ldr	r3, [pc, #136]	; (8007454 <vTaskStartScheduler+0xc8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073d0:	2301      	movs	r3, #1
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e001      	b.n	80073da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d102      	bne.n	80073e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073e0:	f000 fd10 	bl	8007e04 <xTimerCreateTimerTask>
 80073e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d11b      	bne.n	8007424 <vTaskStartScheduler+0x98>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	613b      	str	r3, [r7, #16]
}
 80073fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007400:	4b15      	ldr	r3, [pc, #84]	; (8007458 <vTaskStartScheduler+0xcc>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3354      	adds	r3, #84	; 0x54
 8007406:	4a15      	ldr	r2, [pc, #84]	; (800745c <vTaskStartScheduler+0xd0>)
 8007408:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800740a:	4b15      	ldr	r3, [pc, #84]	; (8007460 <vTaskStartScheduler+0xd4>)
 800740c:	f04f 32ff 	mov.w	r2, #4294967295
 8007410:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007412:	4b14      	ldr	r3, [pc, #80]	; (8007464 <vTaskStartScheduler+0xd8>)
 8007414:	2201      	movs	r2, #1
 8007416:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007418:	4b13      	ldr	r3, [pc, #76]	; (8007468 <vTaskStartScheduler+0xdc>)
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800741e:	f001 f8c7 	bl	80085b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007422:	e00e      	b.n	8007442 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742a:	d10a      	bne.n	8007442 <vTaskStartScheduler+0xb6>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	60fb      	str	r3, [r7, #12]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <vTaskStartScheduler+0xb4>
}
 8007442:	bf00      	nop
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	08008fa4 	.word	0x08008fa4
 8007450:	08007a91 	.word	0x08007a91
 8007454:	20001624 	.word	0x20001624
 8007458:	2000112c 	.word	0x2000112c
 800745c:	200000a8 	.word	0x200000a8
 8007460:	20001620 	.word	0x20001620
 8007464:	2000160c 	.word	0x2000160c
 8007468:	20001604 	.word	0x20001604

0800746c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <vTaskSuspendAll+0x18>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3301      	adds	r3, #1
 8007476:	4a03      	ldr	r2, [pc, #12]	; (8007484 <vTaskSuspendAll+0x18>)
 8007478:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800747a:	bf00      	nop
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	20001628 	.word	0x20001628

08007488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007492:	2300      	movs	r3, #0
 8007494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007496:	4b42      	ldr	r3, [pc, #264]	; (80075a0 <xTaskResumeAll+0x118>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	603b      	str	r3, [r7, #0]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074b4:	f001 f91e 	bl	80086f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074b8:	4b39      	ldr	r3, [pc, #228]	; (80075a0 <xTaskResumeAll+0x118>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3b01      	subs	r3, #1
 80074be:	4a38      	ldr	r2, [pc, #224]	; (80075a0 <xTaskResumeAll+0x118>)
 80074c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c2:	4b37      	ldr	r3, [pc, #220]	; (80075a0 <xTaskResumeAll+0x118>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d162      	bne.n	8007590 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074ca:	4b36      	ldr	r3, [pc, #216]	; (80075a4 <xTaskResumeAll+0x11c>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d05e      	beq.n	8007590 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074d2:	e02f      	b.n	8007534 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d4:	4b34      	ldr	r3, [pc, #208]	; (80075a8 <xTaskResumeAll+0x120>)
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3318      	adds	r3, #24
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff f851 	bl	8006588 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3304      	adds	r3, #4
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff f84c 	bl	8006588 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f4:	4b2d      	ldr	r3, [pc, #180]	; (80075ac <xTaskResumeAll+0x124>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d903      	bls.n	8007504 <xTaskResumeAll+0x7c>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <xTaskResumeAll+0x124>)
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4a27      	ldr	r2, [pc, #156]	; (80075b0 <xTaskResumeAll+0x128>)
 8007512:	441a      	add	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3304      	adds	r3, #4
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f7fe ffd7 	bl	80064ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007524:	4b23      	ldr	r3, [pc, #140]	; (80075b4 <xTaskResumeAll+0x12c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752a:	429a      	cmp	r2, r3
 800752c:	d302      	bcc.n	8007534 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800752e:	4b22      	ldr	r3, [pc, #136]	; (80075b8 <xTaskResumeAll+0x130>)
 8007530:	2201      	movs	r2, #1
 8007532:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007534:	4b1c      	ldr	r3, [pc, #112]	; (80075a8 <xTaskResumeAll+0x120>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1cb      	bne.n	80074d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007542:	f000 fb5f 	bl	8007c04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007546:	4b1d      	ldr	r3, [pc, #116]	; (80075bc <xTaskResumeAll+0x134>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d010      	beq.n	8007574 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007552:	f000 f847 	bl	80075e4 <xTaskIncrementTick>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800755c:	4b16      	ldr	r3, [pc, #88]	; (80075b8 <xTaskResumeAll+0x130>)
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3b01      	subs	r3, #1
 8007566:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f1      	bne.n	8007552 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800756e:	4b13      	ldr	r3, [pc, #76]	; (80075bc <xTaskResumeAll+0x134>)
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007574:	4b10      	ldr	r3, [pc, #64]	; (80075b8 <xTaskResumeAll+0x130>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d009      	beq.n	8007590 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800757c:	2301      	movs	r3, #1
 800757e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007580:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <xTaskResumeAll+0x138>)
 8007582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007590:	f001 f8e0 	bl	8008754 <vPortExitCritical>

	return xAlreadyYielded;
 8007594:	68bb      	ldr	r3, [r7, #8]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20001628 	.word	0x20001628
 80075a4:	20001600 	.word	0x20001600
 80075a8:	200015c0 	.word	0x200015c0
 80075ac:	20001608 	.word	0x20001608
 80075b0:	20001130 	.word	0x20001130
 80075b4:	2000112c 	.word	0x2000112c
 80075b8:	20001614 	.word	0x20001614
 80075bc:	20001610 	.word	0x20001610
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <xTaskGetTickCount+0x1c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075d0:	687b      	ldr	r3, [r7, #4]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20001604 	.word	0x20001604

080075e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ee:	4b4f      	ldr	r3, [pc, #316]	; (800772c <xTaskIncrementTick+0x148>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f040 808f 	bne.w	8007716 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075f8:	4b4d      	ldr	r3, [pc, #308]	; (8007730 <xTaskIncrementTick+0x14c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3301      	adds	r3, #1
 80075fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007600:	4a4b      	ldr	r2, [pc, #300]	; (8007730 <xTaskIncrementTick+0x14c>)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d120      	bne.n	800764e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800760c:	4b49      	ldr	r3, [pc, #292]	; (8007734 <xTaskIncrementTick+0x150>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <xTaskIncrementTick+0x48>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	603b      	str	r3, [r7, #0]
}
 8007628:	bf00      	nop
 800762a:	e7fe      	b.n	800762a <xTaskIncrementTick+0x46>
 800762c:	4b41      	ldr	r3, [pc, #260]	; (8007734 <xTaskIncrementTick+0x150>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	4b41      	ldr	r3, [pc, #260]	; (8007738 <xTaskIncrementTick+0x154>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a3f      	ldr	r2, [pc, #252]	; (8007734 <xTaskIncrementTick+0x150>)
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	4a3f      	ldr	r2, [pc, #252]	; (8007738 <xTaskIncrementTick+0x154>)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	4b3e      	ldr	r3, [pc, #248]	; (800773c <xTaskIncrementTick+0x158>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	4a3d      	ldr	r2, [pc, #244]	; (800773c <xTaskIncrementTick+0x158>)
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	f000 fadb 	bl	8007c04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800764e:	4b3c      	ldr	r3, [pc, #240]	; (8007740 <xTaskIncrementTick+0x15c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	429a      	cmp	r2, r3
 8007656:	d349      	bcc.n	80076ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007658:	4b36      	ldr	r3, [pc, #216]	; (8007734 <xTaskIncrementTick+0x150>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d104      	bne.n	800766c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007662:	4b37      	ldr	r3, [pc, #220]	; (8007740 <xTaskIncrementTick+0x15c>)
 8007664:	f04f 32ff 	mov.w	r2, #4294967295
 8007668:	601a      	str	r2, [r3, #0]
					break;
 800766a:	e03f      	b.n	80076ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766c:	4b31      	ldr	r3, [pc, #196]	; (8007734 <xTaskIncrementTick+0x150>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	429a      	cmp	r2, r3
 8007682:	d203      	bcs.n	800768c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007684:	4a2e      	ldr	r2, [pc, #184]	; (8007740 <xTaskIncrementTick+0x15c>)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800768a:	e02f      	b.n	80076ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	3304      	adds	r3, #4
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe ff79 	bl	8006588 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	3318      	adds	r3, #24
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe ff70 	bl	8006588 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ac:	4b25      	ldr	r3, [pc, #148]	; (8007744 <xTaskIncrementTick+0x160>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d903      	bls.n	80076bc <xTaskIncrementTick+0xd8>
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	4a22      	ldr	r2, [pc, #136]	; (8007744 <xTaskIncrementTick+0x160>)
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4a1f      	ldr	r2, [pc, #124]	; (8007748 <xTaskIncrementTick+0x164>)
 80076ca:	441a      	add	r2, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4619      	mov	r1, r3
 80076d2:	4610      	mov	r0, r2
 80076d4:	f7fe fefb 	bl	80064ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076dc:	4b1b      	ldr	r3, [pc, #108]	; (800774c <xTaskIncrementTick+0x168>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d3b8      	bcc.n	8007658 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80076e6:	2301      	movs	r3, #1
 80076e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ea:	e7b5      	b.n	8007658 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076ec:	4b17      	ldr	r3, [pc, #92]	; (800774c <xTaskIncrementTick+0x168>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f2:	4915      	ldr	r1, [pc, #84]	; (8007748 <xTaskIncrementTick+0x164>)
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d901      	bls.n	8007708 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007704:	2301      	movs	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007708:	4b11      	ldr	r3, [pc, #68]	; (8007750 <xTaskIncrementTick+0x16c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007710:	2301      	movs	r3, #1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	e004      	b.n	8007720 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <xTaskIncrementTick+0x170>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3301      	adds	r3, #1
 800771c:	4a0d      	ldr	r2, [pc, #52]	; (8007754 <xTaskIncrementTick+0x170>)
 800771e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007720:	697b      	ldr	r3, [r7, #20]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20001628 	.word	0x20001628
 8007730:	20001604 	.word	0x20001604
 8007734:	200015b8 	.word	0x200015b8
 8007738:	200015bc 	.word	0x200015bc
 800773c:	20001618 	.word	0x20001618
 8007740:	20001620 	.word	0x20001620
 8007744:	20001608 	.word	0x20001608
 8007748:	20001130 	.word	0x20001130
 800774c:	2000112c 	.word	0x2000112c
 8007750:	20001614 	.word	0x20001614
 8007754:	20001610 	.word	0x20001610

08007758 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800775e:	4b2a      	ldr	r3, [pc, #168]	; (8007808 <vTaskSwitchContext+0xb0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007766:	4b29      	ldr	r3, [pc, #164]	; (800780c <vTaskSwitchContext+0xb4>)
 8007768:	2201      	movs	r2, #1
 800776a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800776c:	e046      	b.n	80077fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800776e:	4b27      	ldr	r3, [pc, #156]	; (800780c <vTaskSwitchContext+0xb4>)
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007774:	4b26      	ldr	r3, [pc, #152]	; (8007810 <vTaskSwitchContext+0xb8>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	e010      	b.n	800779e <vTaskSwitchContext+0x46>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10a      	bne.n	8007798 <vTaskSwitchContext+0x40>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	607b      	str	r3, [r7, #4]
}
 8007794:	bf00      	nop
 8007796:	e7fe      	b.n	8007796 <vTaskSwitchContext+0x3e>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3b01      	subs	r3, #1
 800779c:	60fb      	str	r3, [r7, #12]
 800779e:	491d      	ldr	r1, [pc, #116]	; (8007814 <vTaskSwitchContext+0xbc>)
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	440b      	add	r3, r1
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0e4      	beq.n	800777c <vTaskSwitchContext+0x24>
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4a15      	ldr	r2, [pc, #84]	; (8007814 <vTaskSwitchContext+0xbc>)
 80077be:	4413      	add	r3, r2
 80077c0:	60bb      	str	r3, [r7, #8]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	605a      	str	r2, [r3, #4]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	3308      	adds	r3, #8
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d104      	bne.n	80077e2 <vTaskSwitchContext+0x8a>
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	605a      	str	r2, [r3, #4]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	4a0b      	ldr	r2, [pc, #44]	; (8007818 <vTaskSwitchContext+0xc0>)
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	4a08      	ldr	r2, [pc, #32]	; (8007810 <vTaskSwitchContext+0xb8>)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077f2:	4b09      	ldr	r3, [pc, #36]	; (8007818 <vTaskSwitchContext+0xc0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3354      	adds	r3, #84	; 0x54
 80077f8:	4a08      	ldr	r2, [pc, #32]	; (800781c <vTaskSwitchContext+0xc4>)
 80077fa:	6013      	str	r3, [r2, #0]
}
 80077fc:	bf00      	nop
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	20001628 	.word	0x20001628
 800780c:	20001614 	.word	0x20001614
 8007810:	20001608 	.word	0x20001608
 8007814:	20001130 	.word	0x20001130
 8007818:	2000112c 	.word	0x2000112c
 800781c:	200000a8 	.word	0x200000a8

08007820 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	60fb      	str	r3, [r7, #12]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007846:	4b07      	ldr	r3, [pc, #28]	; (8007864 <vTaskPlaceOnEventList+0x44>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3318      	adds	r3, #24
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fe fe61 	bl	8006516 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007854:	2101      	movs	r1, #1
 8007856:	6838      	ldr	r0, [r7, #0]
 8007858:	f000 fa80 	bl	8007d5c <prvAddCurrentTaskToDelayedList>
}
 800785c:	bf00      	nop
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	2000112c 	.word	0x2000112c

08007868 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	617b      	str	r3, [r7, #20]
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007890:	4b0a      	ldr	r3, [pc, #40]	; (80078bc <vTaskPlaceOnEventListRestricted+0x54>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3318      	adds	r3, #24
 8007896:	4619      	mov	r1, r3
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f7fe fe18 	bl	80064ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80078a4:	f04f 33ff 	mov.w	r3, #4294967295
 80078a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	68b8      	ldr	r0, [r7, #8]
 80078ae:	f000 fa55 	bl	8007d5c <prvAddCurrentTaskToDelayedList>
	}
 80078b2:	bf00      	nop
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	2000112c 	.word	0x2000112c

080078c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	60fb      	str	r3, [r7, #12]
}
 80078e8:	bf00      	nop
 80078ea:	e7fe      	b.n	80078ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	3318      	adds	r3, #24
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe fe49 	bl	8006588 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f6:	4b1e      	ldr	r3, [pc, #120]	; (8007970 <xTaskRemoveFromEventList+0xb0>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d11d      	bne.n	800793a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	3304      	adds	r3, #4
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fe40 	bl	8006588 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790c:	4b19      	ldr	r3, [pc, #100]	; (8007974 <xTaskRemoveFromEventList+0xb4>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d903      	bls.n	800791c <xTaskRemoveFromEventList+0x5c>
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	4a16      	ldr	r2, [pc, #88]	; (8007974 <xTaskRemoveFromEventList+0xb4>)
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	4613      	mov	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4a13      	ldr	r2, [pc, #76]	; (8007978 <xTaskRemoveFromEventList+0xb8>)
 800792a:	441a      	add	r2, r3
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	3304      	adds	r3, #4
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f7fe fdcb 	bl	80064ce <vListInsertEnd>
 8007938:	e005      	b.n	8007946 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	3318      	adds	r3, #24
 800793e:	4619      	mov	r1, r3
 8007940:	480e      	ldr	r0, [pc, #56]	; (800797c <xTaskRemoveFromEventList+0xbc>)
 8007942:	f7fe fdc4 	bl	80064ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	4b0d      	ldr	r3, [pc, #52]	; (8007980 <xTaskRemoveFromEventList+0xc0>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	429a      	cmp	r2, r3
 8007952:	d905      	bls.n	8007960 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007954:	2301      	movs	r3, #1
 8007956:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <xTaskRemoveFromEventList+0xc4>)
 800795a:	2201      	movs	r2, #1
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	e001      	b.n	8007964 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007964:	697b      	ldr	r3, [r7, #20]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20001628 	.word	0x20001628
 8007974:	20001608 	.word	0x20001608
 8007978:	20001130 	.word	0x20001130
 800797c:	200015c0 	.word	0x200015c0
 8007980:	2000112c 	.word	0x2000112c
 8007984:	20001614 	.word	0x20001614

08007988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007990:	4b06      	ldr	r3, [pc, #24]	; (80079ac <vTaskInternalSetTimeOutState+0x24>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007998:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <vTaskInternalSetTimeOutState+0x28>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	605a      	str	r2, [r3, #4]
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	20001618 	.word	0x20001618
 80079b0:	20001604 	.word	0x20001604

080079b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b088      	sub	sp, #32
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10a      	bne.n	80079da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	613b      	str	r3, [r7, #16]
}
 80079d6:	bf00      	nop
 80079d8:	e7fe      	b.n	80079d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	60fb      	str	r3, [r7, #12]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80079f6:	f000 fe7d 	bl	80086f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079fa:	4b1d      	ldr	r3, [pc, #116]	; (8007a70 <xTaskCheckForTimeOut+0xbc>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a12:	d102      	bne.n	8007a1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61fb      	str	r3, [r7, #28]
 8007a18:	e023      	b.n	8007a62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b15      	ldr	r3, [pc, #84]	; (8007a74 <xTaskCheckForTimeOut+0xc0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d007      	beq.n	8007a36 <xTaskCheckForTimeOut+0x82>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d302      	bcc.n	8007a36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	e015      	b.n	8007a62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d20b      	bcs.n	8007a58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	1ad2      	subs	r2, r2, r3
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff ff9b 	bl	8007988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	e004      	b.n	8007a62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a62:	f000 fe77 	bl	8008754 <vPortExitCritical>

	return xReturn;
 8007a66:	69fb      	ldr	r3, [r7, #28]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20001604 	.word	0x20001604
 8007a74:	20001618 	.word	0x20001618

08007a78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a7c:	4b03      	ldr	r3, [pc, #12]	; (8007a8c <vTaskMissedYield+0x14>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	601a      	str	r2, [r3, #0]
}
 8007a82:	bf00      	nop
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	20001614 	.word	0x20001614

08007a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a98:	f000 f852 	bl	8007b40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a9c:	4b06      	ldr	r3, [pc, #24]	; (8007ab8 <prvIdleTask+0x28>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d9f9      	bls.n	8007a98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007aa4:	4b05      	ldr	r3, [pc, #20]	; (8007abc <prvIdleTask+0x2c>)
 8007aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ab4:	e7f0      	b.n	8007a98 <prvIdleTask+0x8>
 8007ab6:	bf00      	nop
 8007ab8:	20001130 	.word	0x20001130
 8007abc:	e000ed04 	.word	0xe000ed04

08007ac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	607b      	str	r3, [r7, #4]
 8007aca:	e00c      	b.n	8007ae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4a12      	ldr	r2, [pc, #72]	; (8007b20 <prvInitialiseTaskLists+0x60>)
 8007ad8:	4413      	add	r3, r2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fcca 	bl	8006474 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b37      	cmp	r3, #55	; 0x37
 8007aea:	d9ef      	bls.n	8007acc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aec:	480d      	ldr	r0, [pc, #52]	; (8007b24 <prvInitialiseTaskLists+0x64>)
 8007aee:	f7fe fcc1 	bl	8006474 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007af2:	480d      	ldr	r0, [pc, #52]	; (8007b28 <prvInitialiseTaskLists+0x68>)
 8007af4:	f7fe fcbe 	bl	8006474 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007af8:	480c      	ldr	r0, [pc, #48]	; (8007b2c <prvInitialiseTaskLists+0x6c>)
 8007afa:	f7fe fcbb 	bl	8006474 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007afe:	480c      	ldr	r0, [pc, #48]	; (8007b30 <prvInitialiseTaskLists+0x70>)
 8007b00:	f7fe fcb8 	bl	8006474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b04:	480b      	ldr	r0, [pc, #44]	; (8007b34 <prvInitialiseTaskLists+0x74>)
 8007b06:	f7fe fcb5 	bl	8006474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b0a:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <prvInitialiseTaskLists+0x78>)
 8007b0c:	4a05      	ldr	r2, [pc, #20]	; (8007b24 <prvInitialiseTaskLists+0x64>)
 8007b0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <prvInitialiseTaskLists+0x7c>)
 8007b12:	4a05      	ldr	r2, [pc, #20]	; (8007b28 <prvInitialiseTaskLists+0x68>)
 8007b14:	601a      	str	r2, [r3, #0]
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20001130 	.word	0x20001130
 8007b24:	20001590 	.word	0x20001590
 8007b28:	200015a4 	.word	0x200015a4
 8007b2c:	200015c0 	.word	0x200015c0
 8007b30:	200015d4 	.word	0x200015d4
 8007b34:	200015ec 	.word	0x200015ec
 8007b38:	200015b8 	.word	0x200015b8
 8007b3c:	200015bc 	.word	0x200015bc

08007b40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b46:	e019      	b.n	8007b7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b48:	f000 fdd4 	bl	80086f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4c:	4b10      	ldr	r3, [pc, #64]	; (8007b90 <prvCheckTasksWaitingTermination+0x50>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe fd15 	bl	8006588 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <prvCheckTasksWaitingTermination+0x54>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	4a0b      	ldr	r2, [pc, #44]	; (8007b94 <prvCheckTasksWaitingTermination+0x54>)
 8007b66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b68:	4b0b      	ldr	r3, [pc, #44]	; (8007b98 <prvCheckTasksWaitingTermination+0x58>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	4a0a      	ldr	r2, [pc, #40]	; (8007b98 <prvCheckTasksWaitingTermination+0x58>)
 8007b70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b72:	f000 fdef 	bl	8008754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f810 	bl	8007b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <prvCheckTasksWaitingTermination+0x58>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e1      	bne.n	8007b48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	200015d4 	.word	0x200015d4
 8007b94:	20001600 	.word	0x20001600
 8007b98:	200015e8 	.word	0x200015e8

08007b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3354      	adds	r3, #84	; 0x54
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 f8d7 	bl	8008d5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d108      	bne.n	8007bca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 ff87 	bl	8008ad0 <vPortFree>
				vPortFree( pxTCB );
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 ff84 	bl	8008ad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bc8:	e018      	b.n	8007bfc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d103      	bne.n	8007bdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 ff7b 	bl	8008ad0 <vPortFree>
	}
 8007bda:	e00f      	b.n	8007bfc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d00a      	beq.n	8007bfc <prvDeleteTCB+0x60>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	60fb      	str	r3, [r7, #12]
}
 8007bf8:	bf00      	nop
 8007bfa:	e7fe      	b.n	8007bfa <prvDeleteTCB+0x5e>
	}
 8007bfc:	bf00      	nop
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <prvResetNextTaskUnblockTime+0x38>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c14:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <prvResetNextTaskUnblockTime+0x3c>)
 8007c16:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c1c:	e008      	b.n	8007c30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c1e:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <prvResetNextTaskUnblockTime+0x38>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4a04      	ldr	r2, [pc, #16]	; (8007c40 <prvResetNextTaskUnblockTime+0x3c>)
 8007c2e:	6013      	str	r3, [r2, #0]
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	200015b8 	.word	0x200015b8
 8007c40:	20001620 	.word	0x20001620

08007c44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c4a:	4b0b      	ldr	r3, [pc, #44]	; (8007c78 <xTaskGetSchedulerState+0x34>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d102      	bne.n	8007c58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c52:	2301      	movs	r3, #1
 8007c54:	607b      	str	r3, [r7, #4]
 8007c56:	e008      	b.n	8007c6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c58:	4b08      	ldr	r3, [pc, #32]	; (8007c7c <xTaskGetSchedulerState+0x38>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d102      	bne.n	8007c66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c60:	2302      	movs	r3, #2
 8007c62:	607b      	str	r3, [r7, #4]
 8007c64:	e001      	b.n	8007c6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c66:	2300      	movs	r3, #0
 8007c68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c6a:	687b      	ldr	r3, [r7, #4]
	}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	2000160c 	.word	0x2000160c
 8007c7c:	20001628 	.word	0x20001628

08007c80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d056      	beq.n	8007d44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c96:	4b2e      	ldr	r3, [pc, #184]	; (8007d50 <xTaskPriorityDisinherit+0xd0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d00a      	beq.n	8007cb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	60fb      	str	r3, [r7, #12]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10a      	bne.n	8007cd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	60bb      	str	r3, [r7, #8]
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd8:	1e5a      	subs	r2, r3, #1
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d02c      	beq.n	8007d44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d128      	bne.n	8007d44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fc46 	bl	8006588 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d14:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <xTaskPriorityDisinherit+0xd4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d903      	bls.n	8007d24 <xTaskPriorityDisinherit+0xa4>
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	4a0c      	ldr	r2, [pc, #48]	; (8007d54 <xTaskPriorityDisinherit+0xd4>)
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d28:	4613      	mov	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <xTaskPriorityDisinherit+0xd8>)
 8007d32:	441a      	add	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	3304      	adds	r3, #4
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	f7fe fbc7 	bl	80064ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d40:	2301      	movs	r3, #1
 8007d42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d44:	697b      	ldr	r3, [r7, #20]
	}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	2000112c 	.word	0x2000112c
 8007d54:	20001608 	.word	0x20001608
 8007d58:	20001130 	.word	0x20001130

08007d5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d66:	4b21      	ldr	r3, [pc, #132]	; (8007dec <prvAddCurrentTaskToDelayedList+0x90>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d6c:	4b20      	ldr	r3, [pc, #128]	; (8007df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3304      	adds	r3, #4
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fc08 	bl	8006588 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7e:	d10a      	bne.n	8007d96 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d007      	beq.n	8007d96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d86:	4b1a      	ldr	r3, [pc, #104]	; (8007df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4819      	ldr	r0, [pc, #100]	; (8007df4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d90:	f7fe fb9d 	bl	80064ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d94:	e026      	b.n	8007de4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d9e:	4b14      	ldr	r3, [pc, #80]	; (8007df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d209      	bcs.n	8007dc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dae:	4b12      	ldr	r3, [pc, #72]	; (8007df8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b0f      	ldr	r3, [pc, #60]	; (8007df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3304      	adds	r3, #4
 8007db8:	4619      	mov	r1, r3
 8007dba:	4610      	mov	r0, r2
 8007dbc:	f7fe fbab 	bl	8006516 <vListInsert>
}
 8007dc0:	e010      	b.n	8007de4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dc2:	4b0e      	ldr	r3, [pc, #56]	; (8007dfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	4b0a      	ldr	r3, [pc, #40]	; (8007df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f7fe fba1 	bl	8006516 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dd4:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d202      	bcs.n	8007de4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007dde:	4a08      	ldr	r2, [pc, #32]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	6013      	str	r3, [r2, #0]
}
 8007de4:	bf00      	nop
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20001604 	.word	0x20001604
 8007df0:	2000112c 	.word	0x2000112c
 8007df4:	200015ec 	.word	0x200015ec
 8007df8:	200015bc 	.word	0x200015bc
 8007dfc:	200015b8 	.word	0x200015b8
 8007e00:	20001620 	.word	0x20001620

08007e04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	; 0x28
 8007e08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e0e:	f000 fb07 	bl	8008420 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e12:	4b1c      	ldr	r3, [pc, #112]	; (8007e84 <xTimerCreateTimerTask+0x80>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d021      	beq.n	8007e5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e22:	1d3a      	adds	r2, r7, #4
 8007e24:	f107 0108 	add.w	r1, r7, #8
 8007e28:	f107 030c 	add.w	r3, r7, #12
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fe fb07 	bl	8006440 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	9202      	str	r2, [sp, #8]
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	2300      	movs	r3, #0
 8007e42:	460a      	mov	r2, r1
 8007e44:	4910      	ldr	r1, [pc, #64]	; (8007e88 <xTimerCreateTimerTask+0x84>)
 8007e46:	4811      	ldr	r0, [pc, #68]	; (8007e8c <xTimerCreateTimerTask+0x88>)
 8007e48:	f7ff f8b4 	bl	8006fb4 <xTaskCreateStatic>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	4a10      	ldr	r2, [pc, #64]	; (8007e90 <xTimerCreateTimerTask+0x8c>)
 8007e50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e52:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <xTimerCreateTimerTask+0x8c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	613b      	str	r3, [r7, #16]
}
 8007e76:	bf00      	nop
 8007e78:	e7fe      	b.n	8007e78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e7a:	697b      	ldr	r3, [r7, #20]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	2000165c 	.word	0x2000165c
 8007e88:	08008fac 	.word	0x08008fac
 8007e8c:	08007fc9 	.word	0x08007fc9
 8007e90:	20001660 	.word	0x20001660

08007e94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	; 0x28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	623b      	str	r3, [r7, #32]
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ec2:	4b1a      	ldr	r3, [pc, #104]	; (8007f2c <xTimerGenericCommand+0x98>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d02a      	beq.n	8007f20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b05      	cmp	r3, #5
 8007eda:	dc18      	bgt.n	8007f0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007edc:	f7ff feb2 	bl	8007c44 <xTaskGetSchedulerState>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d109      	bne.n	8007efa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ee6:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <xTimerGenericCommand+0x98>)
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	f107 0110 	add.w	r1, r7, #16
 8007eee:	2300      	movs	r3, #0
 8007ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef2:	f7fe fc77 	bl	80067e4 <xQueueGenericSend>
 8007ef6:	6278      	str	r0, [r7, #36]	; 0x24
 8007ef8:	e012      	b.n	8007f20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007efa:	4b0c      	ldr	r3, [pc, #48]	; (8007f2c <xTimerGenericCommand+0x98>)
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	f107 0110 	add.w	r1, r7, #16
 8007f02:	2300      	movs	r3, #0
 8007f04:	2200      	movs	r2, #0
 8007f06:	f7fe fc6d 	bl	80067e4 <xQueueGenericSend>
 8007f0a:	6278      	str	r0, [r7, #36]	; 0x24
 8007f0c:	e008      	b.n	8007f20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <xTimerGenericCommand+0x98>)
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	f107 0110 	add.w	r1, r7, #16
 8007f16:	2300      	movs	r3, #0
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	f7fe fd61 	bl	80069e0 <xQueueGenericSendFromISR>
 8007f1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3728      	adds	r7, #40	; 0x28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	2000165c 	.word	0x2000165c

08007f30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f3a:	4b22      	ldr	r3, [pc, #136]	; (8007fc4 <prvProcessExpiredTimer+0x94>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	3304      	adds	r3, #4
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe fb1d 	bl	8006588 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d022      	beq.n	8007fa2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	699a      	ldr	r2, [r3, #24]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	18d1      	adds	r1, r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	6978      	ldr	r0, [r7, #20]
 8007f6a:	f000 f8d1 	bl	8008110 <prvInsertTimerInActiveList>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d01f      	beq.n	8007fb4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f74:	2300      	movs	r3, #0
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	6978      	ldr	r0, [r7, #20]
 8007f80:	f7ff ff88 	bl	8007e94 <xTimerGenericCommand>
 8007f84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d113      	bne.n	8007fb4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	60fb      	str	r3, [r7, #12]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fa8:	f023 0301 	bic.w	r3, r3, #1
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	6978      	ldr	r0, [r7, #20]
 8007fba:	4798      	blx	r3
}
 8007fbc:	bf00      	nop
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20001654 	.word	0x20001654

08007fc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fd0:	f107 0308 	add.w	r3, r7, #8
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 f857 	bl	8008088 <prvGetNextExpireTime>
 8007fda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 f803 	bl	8007fec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007fe6:	f000 f8d5 	bl	8008194 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fea:	e7f1      	b.n	8007fd0 <prvTimerTask+0x8>

08007fec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ff6:	f7ff fa39 	bl	800746c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ffa:	f107 0308 	add.w	r3, r7, #8
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 f866 	bl	80080d0 <prvSampleTimeNow>
 8008004:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d130      	bne.n	800806e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10a      	bne.n	8008028 <prvProcessTimerOrBlockTask+0x3c>
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	429a      	cmp	r2, r3
 8008018:	d806      	bhi.n	8008028 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800801a:	f7ff fa35 	bl	8007488 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800801e:	68f9      	ldr	r1, [r7, #12]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff ff85 	bl	8007f30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008026:	e024      	b.n	8008072 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d008      	beq.n	8008040 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800802e:	4b13      	ldr	r3, [pc, #76]	; (800807c <prvProcessTimerOrBlockTask+0x90>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <prvProcessTimerOrBlockTask+0x50>
 8008038:	2301      	movs	r3, #1
 800803a:	e000      	b.n	800803e <prvProcessTimerOrBlockTask+0x52>
 800803c:	2300      	movs	r3, #0
 800803e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008040:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <prvProcessTimerOrBlockTask+0x94>)
 8008042:	6818      	ldr	r0, [r3, #0]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	4619      	mov	r1, r3
 800804e:	f7fe ff7d 	bl	8006f4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008052:	f7ff fa19 	bl	8007488 <xTaskResumeAll>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800805c:	4b09      	ldr	r3, [pc, #36]	; (8008084 <prvProcessTimerOrBlockTask+0x98>)
 800805e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	f3bf 8f6f 	isb	sy
}
 800806c:	e001      	b.n	8008072 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800806e:	f7ff fa0b 	bl	8007488 <xTaskResumeAll>
}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20001658 	.word	0x20001658
 8008080:	2000165c 	.word	0x2000165c
 8008084:	e000ed04 	.word	0xe000ed04

08008088 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008090:	4b0e      	ldr	r3, [pc, #56]	; (80080cc <prvGetNextExpireTime+0x44>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <prvGetNextExpireTime+0x16>
 800809a:	2201      	movs	r2, #1
 800809c:	e000      	b.n	80080a0 <prvGetNextExpireTime+0x18>
 800809e:	2200      	movs	r2, #0
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d105      	bne.n	80080b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080ac:	4b07      	ldr	r3, [pc, #28]	; (80080cc <prvGetNextExpireTime+0x44>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	e001      	b.n	80080bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080bc:	68fb      	ldr	r3, [r7, #12]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20001654 	.word	0x20001654

080080d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080d8:	f7ff fa74 	bl	80075c4 <xTaskGetTickCount>
 80080dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080de:	4b0b      	ldr	r3, [pc, #44]	; (800810c <prvSampleTimeNow+0x3c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d205      	bcs.n	80080f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080e8:	f000 f936 	bl	8008358 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	e002      	b.n	80080fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080fa:	4a04      	ldr	r2, [pc, #16]	; (800810c <prvSampleTimeNow+0x3c>)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008100:	68fb      	ldr	r3, [r7, #12]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20001664 	.word	0x20001664

08008110 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	429a      	cmp	r2, r3
 8008134:	d812      	bhi.n	800815c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	1ad2      	subs	r2, r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	429a      	cmp	r2, r3
 8008142:	d302      	bcc.n	800814a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008144:	2301      	movs	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	e01b      	b.n	8008182 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800814a:	4b10      	ldr	r3, [pc, #64]	; (800818c <prvInsertTimerInActiveList+0x7c>)
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3304      	adds	r3, #4
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f7fe f9de 	bl	8006516 <vListInsert>
 800815a:	e012      	b.n	8008182 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	429a      	cmp	r2, r3
 8008162:	d206      	bcs.n	8008172 <prvInsertTimerInActiveList+0x62>
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	429a      	cmp	r2, r3
 800816a:	d302      	bcc.n	8008172 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800816c:	2301      	movs	r3, #1
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	e007      	b.n	8008182 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008172:	4b07      	ldr	r3, [pc, #28]	; (8008190 <prvInsertTimerInActiveList+0x80>)
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3304      	adds	r3, #4
 800817a:	4619      	mov	r1, r3
 800817c:	4610      	mov	r0, r2
 800817e:	f7fe f9ca 	bl	8006516 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008182:	697b      	ldr	r3, [r7, #20]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	20001658 	.word	0x20001658
 8008190:	20001654 	.word	0x20001654

08008194 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08e      	sub	sp, #56	; 0x38
 8008198:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800819a:	e0ca      	b.n	8008332 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	da18      	bge.n	80081d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081a2:	1d3b      	adds	r3, r7, #4
 80081a4:	3304      	adds	r3, #4
 80081a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	61fb      	str	r3, [r7, #28]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80081c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ca:	6850      	ldr	r0, [r2, #4]
 80081cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ce:	6892      	ldr	r2, [r2, #8]
 80081d0:	4611      	mov	r1, r2
 80081d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f2c0 80ab 	blt.w	8008332 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d004      	beq.n	80081f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	3304      	adds	r3, #4
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe f9cb 	bl	8006588 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081f2:	463b      	mov	r3, r7
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff ff6b 	bl	80080d0 <prvSampleTimeNow>
 80081fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b09      	cmp	r3, #9
 8008200:	f200 8096 	bhi.w	8008330 <prvProcessReceivedCommands+0x19c>
 8008204:	a201      	add	r2, pc, #4	; (adr r2, 800820c <prvProcessReceivedCommands+0x78>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	08008235 	.word	0x08008235
 8008210:	08008235 	.word	0x08008235
 8008214:	08008235 	.word	0x08008235
 8008218:	080082a9 	.word	0x080082a9
 800821c:	080082bd 	.word	0x080082bd
 8008220:	08008307 	.word	0x08008307
 8008224:	08008235 	.word	0x08008235
 8008228:	08008235 	.word	0x08008235
 800822c:	080082a9 	.word	0x080082a9
 8008230:	080082bd 	.word	0x080082bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800823a:	f043 0301 	orr.w	r3, r3, #1
 800823e:	b2da      	uxtb	r2, r3
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	18d1      	adds	r1, r2, r3
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008254:	f7ff ff5c 	bl	8008110 <prvInsertTimerInActiveList>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d069      	beq.n	8008332 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008264:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b00      	cmp	r3, #0
 8008272:	d05e      	beq.n	8008332 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	441a      	add	r2, r3
 800827c:	2300      	movs	r3, #0
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	2300      	movs	r3, #0
 8008282:	2100      	movs	r1, #0
 8008284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008286:	f7ff fe05 	bl	8007e94 <xTimerGenericCommand>
 800828a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d14f      	bne.n	8008332 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	61bb      	str	r3, [r7, #24]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082ae:	f023 0301 	bic.w	r3, r3, #1
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80082ba:	e03a      	b.n	8008332 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082c2:	f043 0301 	orr.w	r3, r3, #1
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10a      	bne.n	80082f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	617b      	str	r3, [r7, #20]
}
 80082ee:	bf00      	nop
 80082f0:	e7fe      	b.n	80082f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f4:	699a      	ldr	r2, [r3, #24]
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	18d1      	adds	r1, r2, r3
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008300:	f7ff ff06 	bl	8008110 <prvInsertTimerInActiveList>
					break;
 8008304:	e015      	b.n	8008332 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800830c:	f003 0302 	and.w	r3, r3, #2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d103      	bne.n	800831c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008316:	f000 fbdb 	bl	8008ad0 <vPortFree>
 800831a:	e00a      	b.n	8008332 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008322:	f023 0301 	bic.w	r3, r3, #1
 8008326:	b2da      	uxtb	r2, r3
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800832e:	e000      	b.n	8008332 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008330:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008332:	4b08      	ldr	r3, [pc, #32]	; (8008354 <prvProcessReceivedCommands+0x1c0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	1d39      	adds	r1, r7, #4
 8008338:	2200      	movs	r2, #0
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe fbec 	bl	8006b18 <xQueueReceive>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	f47f af2a 	bne.w	800819c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008348:	bf00      	nop
 800834a:	bf00      	nop
 800834c:	3730      	adds	r7, #48	; 0x30
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	2000165c 	.word	0x2000165c

08008358 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b088      	sub	sp, #32
 800835c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800835e:	e048      	b.n	80083f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008360:	4b2d      	ldr	r3, [pc, #180]	; (8008418 <prvSwitchTimerLists+0xc0>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800836a:	4b2b      	ldr	r3, [pc, #172]	; (8008418 <prvSwitchTimerLists+0xc0>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3304      	adds	r3, #4
 8008378:	4618      	mov	r0, r3
 800837a:	f7fe f905 	bl	8006588 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d02e      	beq.n	80083f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	4413      	add	r3, r2
 800839c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d90e      	bls.n	80083c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083b2:	4b19      	ldr	r3, [pc, #100]	; (8008418 <prvSwitchTimerLists+0xc0>)
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3304      	adds	r3, #4
 80083ba:	4619      	mov	r1, r3
 80083bc:	4610      	mov	r0, r2
 80083be:	f7fe f8aa 	bl	8006516 <vListInsert>
 80083c2:	e016      	b.n	80083f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083c4:	2300      	movs	r3, #0
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	2300      	movs	r3, #0
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	2100      	movs	r1, #0
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f7ff fd60 	bl	8007e94 <xTimerGenericCommand>
 80083d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	603b      	str	r3, [r7, #0]
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083f2:	4b09      	ldr	r3, [pc, #36]	; (8008418 <prvSwitchTimerLists+0xc0>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1b1      	bne.n	8008360 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <prvSwitchTimerLists+0xc0>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008402:	4b06      	ldr	r3, [pc, #24]	; (800841c <prvSwitchTimerLists+0xc4>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a04      	ldr	r2, [pc, #16]	; (8008418 <prvSwitchTimerLists+0xc0>)
 8008408:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800840a:	4a04      	ldr	r2, [pc, #16]	; (800841c <prvSwitchTimerLists+0xc4>)
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	6013      	str	r3, [r2, #0]
}
 8008410:	bf00      	nop
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	20001654 	.word	0x20001654
 800841c:	20001658 	.word	0x20001658

08008420 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008426:	f000 f965 	bl	80086f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800842a:	4b15      	ldr	r3, [pc, #84]	; (8008480 <prvCheckForValidListAndQueue+0x60>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d120      	bne.n	8008474 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008432:	4814      	ldr	r0, [pc, #80]	; (8008484 <prvCheckForValidListAndQueue+0x64>)
 8008434:	f7fe f81e 	bl	8006474 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008438:	4813      	ldr	r0, [pc, #76]	; (8008488 <prvCheckForValidListAndQueue+0x68>)
 800843a:	f7fe f81b 	bl	8006474 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800843e:	4b13      	ldr	r3, [pc, #76]	; (800848c <prvCheckForValidListAndQueue+0x6c>)
 8008440:	4a10      	ldr	r2, [pc, #64]	; (8008484 <prvCheckForValidListAndQueue+0x64>)
 8008442:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008444:	4b12      	ldr	r3, [pc, #72]	; (8008490 <prvCheckForValidListAndQueue+0x70>)
 8008446:	4a10      	ldr	r2, [pc, #64]	; (8008488 <prvCheckForValidListAndQueue+0x68>)
 8008448:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800844a:	2300      	movs	r3, #0
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	4b11      	ldr	r3, [pc, #68]	; (8008494 <prvCheckForValidListAndQueue+0x74>)
 8008450:	4a11      	ldr	r2, [pc, #68]	; (8008498 <prvCheckForValidListAndQueue+0x78>)
 8008452:	2110      	movs	r1, #16
 8008454:	200a      	movs	r0, #10
 8008456:	f7fe f929 	bl	80066ac <xQueueGenericCreateStatic>
 800845a:	4603      	mov	r3, r0
 800845c:	4a08      	ldr	r2, [pc, #32]	; (8008480 <prvCheckForValidListAndQueue+0x60>)
 800845e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008460:	4b07      	ldr	r3, [pc, #28]	; (8008480 <prvCheckForValidListAndQueue+0x60>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008468:	4b05      	ldr	r3, [pc, #20]	; (8008480 <prvCheckForValidListAndQueue+0x60>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	490b      	ldr	r1, [pc, #44]	; (800849c <prvCheckForValidListAndQueue+0x7c>)
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fd42 	bl	8006ef8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008474:	f000 f96e 	bl	8008754 <vPortExitCritical>
}
 8008478:	bf00      	nop
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	2000165c 	.word	0x2000165c
 8008484:	2000162c 	.word	0x2000162c
 8008488:	20001640 	.word	0x20001640
 800848c:	20001654 	.word	0x20001654
 8008490:	20001658 	.word	0x20001658
 8008494:	20001708 	.word	0x20001708
 8008498:	20001668 	.word	0x20001668
 800849c:	08008fb4 	.word	0x08008fb4

080084a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3b04      	subs	r3, #4
 80084b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3b04      	subs	r3, #4
 80084be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f023 0201 	bic.w	r2, r3, #1
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3b04      	subs	r3, #4
 80084ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084d0:	4a0c      	ldr	r2, [pc, #48]	; (8008504 <pxPortInitialiseStack+0x64>)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3b14      	subs	r3, #20
 80084da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3b04      	subs	r3, #4
 80084e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f06f 0202 	mvn.w	r2, #2
 80084ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3b20      	subs	r3, #32
 80084f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084f6:	68fb      	ldr	r3, [r7, #12]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	08008509 	.word	0x08008509

08008508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008512:	4b12      	ldr	r3, [pc, #72]	; (800855c <prvTaskExitError+0x54>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851a:	d00a      	beq.n	8008532 <prvTaskExitError+0x2a>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	60fb      	str	r3, [r7, #12]
}
 800852e:	bf00      	nop
 8008530:	e7fe      	b.n	8008530 <prvTaskExitError+0x28>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	60bb      	str	r3, [r7, #8]
}
 8008544:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008546:	bf00      	nop
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0fc      	beq.n	8008548 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	20000058 	.word	0x20000058

08008560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <pxCurrentTCBConst2>)
 8008562:	6819      	ldr	r1, [r3, #0]
 8008564:	6808      	ldr	r0, [r1, #0]
 8008566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856a:	f380 8809 	msr	PSP, r0
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8811 	msr	BASEPRI, r0
 800857a:	4770      	bx	lr
 800857c:	f3af 8000 	nop.w

08008580 <pxCurrentTCBConst2>:
 8008580:	2000112c 	.word	0x2000112c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop

08008588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008588:	4808      	ldr	r0, [pc, #32]	; (80085ac <prvPortStartFirstTask+0x24>)
 800858a:	6800      	ldr	r0, [r0, #0]
 800858c:	6800      	ldr	r0, [r0, #0]
 800858e:	f380 8808 	msr	MSP, r0
 8008592:	f04f 0000 	mov.w	r0, #0
 8008596:	f380 8814 	msr	CONTROL, r0
 800859a:	b662      	cpsie	i
 800859c:	b661      	cpsie	f
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	df00      	svc	0
 80085a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085aa:	bf00      	nop
 80085ac:	e000ed08 	.word	0xe000ed08

080085b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085b6:	4b46      	ldr	r3, [pc, #280]	; (80086d0 <xPortStartScheduler+0x120>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a46      	ldr	r2, [pc, #280]	; (80086d4 <xPortStartScheduler+0x124>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d10a      	bne.n	80085d6 <xPortStartScheduler+0x26>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	613b      	str	r3, [r7, #16]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085d6:	4b3e      	ldr	r3, [pc, #248]	; (80086d0 <xPortStartScheduler+0x120>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a3f      	ldr	r2, [pc, #252]	; (80086d8 <xPortStartScheduler+0x128>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d10a      	bne.n	80085f6 <xPortStartScheduler+0x46>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	60fb      	str	r3, [r7, #12]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085f6:	4b39      	ldr	r3, [pc, #228]	; (80086dc <xPortStartScheduler+0x12c>)
 80085f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	22ff      	movs	r2, #255	; 0xff
 8008606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008618:	b2da      	uxtb	r2, r3
 800861a:	4b31      	ldr	r3, [pc, #196]	; (80086e0 <xPortStartScheduler+0x130>)
 800861c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800861e:	4b31      	ldr	r3, [pc, #196]	; (80086e4 <xPortStartScheduler+0x134>)
 8008620:	2207      	movs	r2, #7
 8008622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008624:	e009      	b.n	800863a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008626:	4b2f      	ldr	r3, [pc, #188]	; (80086e4 <xPortStartScheduler+0x134>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3b01      	subs	r3, #1
 800862c:	4a2d      	ldr	r2, [pc, #180]	; (80086e4 <xPortStartScheduler+0x134>)
 800862e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	b2db      	uxtb	r3, r3
 8008638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008642:	2b80      	cmp	r3, #128	; 0x80
 8008644:	d0ef      	beq.n	8008626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008646:	4b27      	ldr	r3, [pc, #156]	; (80086e4 <xPortStartScheduler+0x134>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f1c3 0307 	rsb	r3, r3, #7
 800864e:	2b04      	cmp	r3, #4
 8008650:	d00a      	beq.n	8008668 <xPortStartScheduler+0xb8>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	60bb      	str	r3, [r7, #8]
}
 8008664:	bf00      	nop
 8008666:	e7fe      	b.n	8008666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008668:	4b1e      	ldr	r3, [pc, #120]	; (80086e4 <xPortStartScheduler+0x134>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <xPortStartScheduler+0x134>)
 8008670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008672:	4b1c      	ldr	r3, [pc, #112]	; (80086e4 <xPortStartScheduler+0x134>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800867a:	4a1a      	ldr	r2, [pc, #104]	; (80086e4 <xPortStartScheduler+0x134>)
 800867c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	b2da      	uxtb	r2, r3
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008686:	4b18      	ldr	r3, [pc, #96]	; (80086e8 <xPortStartScheduler+0x138>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a17      	ldr	r2, [pc, #92]	; (80086e8 <xPortStartScheduler+0x138>)
 800868c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008692:	4b15      	ldr	r3, [pc, #84]	; (80086e8 <xPortStartScheduler+0x138>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a14      	ldr	r2, [pc, #80]	; (80086e8 <xPortStartScheduler+0x138>)
 8008698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800869c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800869e:	f000 f8dd 	bl	800885c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086a2:	4b12      	ldr	r3, [pc, #72]	; (80086ec <xPortStartScheduler+0x13c>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086a8:	f000 f8fc 	bl	80088a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086ac:	4b10      	ldr	r3, [pc, #64]	; (80086f0 <xPortStartScheduler+0x140>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a0f      	ldr	r2, [pc, #60]	; (80086f0 <xPortStartScheduler+0x140>)
 80086b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086b8:	f7ff ff66 	bl	8008588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086bc:	f7ff f84c 	bl	8007758 <vTaskSwitchContext>
	prvTaskExitError();
 80086c0:	f7ff ff22 	bl	8008508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	e000ed00 	.word	0xe000ed00
 80086d4:	410fc271 	.word	0x410fc271
 80086d8:	410fc270 	.word	0x410fc270
 80086dc:	e000e400 	.word	0xe000e400
 80086e0:	20001758 	.word	0x20001758
 80086e4:	2000175c 	.word	0x2000175c
 80086e8:	e000ed20 	.word	0xe000ed20
 80086ec:	20000058 	.word	0x20000058
 80086f0:	e000ef34 	.word	0xe000ef34

080086f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	607b      	str	r3, [r7, #4]
}
 800870c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800870e:	4b0f      	ldr	r3, [pc, #60]	; (800874c <vPortEnterCritical+0x58>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	4a0d      	ldr	r2, [pc, #52]	; (800874c <vPortEnterCritical+0x58>)
 8008716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008718:	4b0c      	ldr	r3, [pc, #48]	; (800874c <vPortEnterCritical+0x58>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d10f      	bne.n	8008740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008720:	4b0b      	ldr	r3, [pc, #44]	; (8008750 <vPortEnterCritical+0x5c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <vPortEnterCritical+0x4c>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	603b      	str	r3, [r7, #0]
}
 800873c:	bf00      	nop
 800873e:	e7fe      	b.n	800873e <vPortEnterCritical+0x4a>
	}
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	20000058 	.word	0x20000058
 8008750:	e000ed04 	.word	0xe000ed04

08008754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800875a:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <vPortExitCritical+0x50>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <vPortExitCritical+0x24>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	607b      	str	r3, [r7, #4]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008778:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <vPortExitCritical+0x50>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3b01      	subs	r3, #1
 800877e:	4a09      	ldr	r2, [pc, #36]	; (80087a4 <vPortExitCritical+0x50>)
 8008780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008782:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <vPortExitCritical+0x50>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <vPortExitCritical+0x42>
 800878a:	2300      	movs	r3, #0
 800878c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	f383 8811 	msr	BASEPRI, r3
}
 8008794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008796:	bf00      	nop
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	20000058 	.word	0x20000058
	...

080087b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087b0:	f3ef 8009 	mrs	r0, PSP
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	4b15      	ldr	r3, [pc, #84]	; (8008810 <pxCurrentTCBConst>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	f01e 0f10 	tst.w	lr, #16
 80087c0:	bf08      	it	eq
 80087c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ca:	6010      	str	r0, [r2, #0]
 80087cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087d4:	f380 8811 	msr	BASEPRI, r0
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f7fe ffba 	bl	8007758 <vTaskSwitchContext>
 80087e4:	f04f 0000 	mov.w	r0, #0
 80087e8:	f380 8811 	msr	BASEPRI, r0
 80087ec:	bc09      	pop	{r0, r3}
 80087ee:	6819      	ldr	r1, [r3, #0]
 80087f0:	6808      	ldr	r0, [r1, #0]
 80087f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f6:	f01e 0f10 	tst.w	lr, #16
 80087fa:	bf08      	it	eq
 80087fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008800:	f380 8809 	msr	PSP, r0
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	f3af 8000 	nop.w

08008810 <pxCurrentTCBConst>:
 8008810:	2000112c 	.word	0x2000112c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop

08008818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	607b      	str	r3, [r7, #4]
}
 8008830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008832:	f7fe fed7 	bl	80075e4 <xTaskIncrementTick>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800883c:	4b06      	ldr	r3, [pc, #24]	; (8008858 <xPortSysTickHandler+0x40>)
 800883e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	2300      	movs	r3, #0
 8008846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	f383 8811 	msr	BASEPRI, r3
}
 800884e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008860:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <vPortSetupTimerInterrupt+0x34>)
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008866:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <vPortSetupTimerInterrupt+0x38>)
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800886c:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <vPortSetupTimerInterrupt+0x3c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <vPortSetupTimerInterrupt+0x40>)
 8008872:	fba2 2303 	umull	r2, r3, r2, r3
 8008876:	099b      	lsrs	r3, r3, #6
 8008878:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <vPortSetupTimerInterrupt+0x44>)
 800887a:	3b01      	subs	r3, #1
 800887c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800887e:	4b04      	ldr	r3, [pc, #16]	; (8008890 <vPortSetupTimerInterrupt+0x34>)
 8008880:	2207      	movs	r2, #7
 8008882:	601a      	str	r2, [r3, #0]
}
 8008884:	bf00      	nop
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	e000e010 	.word	0xe000e010
 8008894:	e000e018 	.word	0xe000e018
 8008898:	20000020 	.word	0x20000020
 800889c:	10624dd3 	.word	0x10624dd3
 80088a0:	e000e014 	.word	0xe000e014

080088a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088b4 <vPortEnableVFP+0x10>
 80088a8:	6801      	ldr	r1, [r0, #0]
 80088aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088ae:	6001      	str	r1, [r0, #0]
 80088b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088b2:	bf00      	nop
 80088b4:	e000ed88 	.word	0xe000ed88

080088b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088be:	f3ef 8305 	mrs	r3, IPSR
 80088c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b0f      	cmp	r3, #15
 80088c8:	d914      	bls.n	80088f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088ca:	4a17      	ldr	r2, [pc, #92]	; (8008928 <vPortValidateInterruptPriority+0x70>)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088d4:	4b15      	ldr	r3, [pc, #84]	; (800892c <vPortValidateInterruptPriority+0x74>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	7afa      	ldrb	r2, [r7, #11]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d20a      	bcs.n	80088f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	607b      	str	r3, [r7, #4]
}
 80088f0:	bf00      	nop
 80088f2:	e7fe      	b.n	80088f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088f4:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <vPortValidateInterruptPriority+0x78>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088fc:	4b0d      	ldr	r3, [pc, #52]	; (8008934 <vPortValidateInterruptPriority+0x7c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d90a      	bls.n	800891a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	603b      	str	r3, [r7, #0]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <vPortValidateInterruptPriority+0x60>
	}
 800891a:	bf00      	nop
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	e000e3f0 	.word	0xe000e3f0
 800892c:	20001758 	.word	0x20001758
 8008930:	e000ed0c 	.word	0xe000ed0c
 8008934:	2000175c 	.word	0x2000175c

08008938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	; 0x28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008940:	2300      	movs	r3, #0
 8008942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008944:	f7fe fd92 	bl	800746c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008948:	4b5b      	ldr	r3, [pc, #364]	; (8008ab8 <pvPortMalloc+0x180>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008950:	f000 f920 	bl	8008b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008954:	4b59      	ldr	r3, [pc, #356]	; (8008abc <pvPortMalloc+0x184>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4013      	ands	r3, r2
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 8093 	bne.w	8008a88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01d      	beq.n	80089a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008968:	2208      	movs	r2, #8
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4413      	add	r3, r2
 800896e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	2b00      	cmp	r3, #0
 8008978:	d014      	beq.n	80089a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f023 0307 	bic.w	r3, r3, #7
 8008980:	3308      	adds	r3, #8
 8008982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00a      	beq.n	80089a4 <pvPortMalloc+0x6c>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	617b      	str	r3, [r7, #20]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d06e      	beq.n	8008a88 <pvPortMalloc+0x150>
 80089aa:	4b45      	ldr	r3, [pc, #276]	; (8008ac0 <pvPortMalloc+0x188>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d869      	bhi.n	8008a88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089b4:	4b43      	ldr	r3, [pc, #268]	; (8008ac4 <pvPortMalloc+0x18c>)
 80089b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089b8:	4b42      	ldr	r3, [pc, #264]	; (8008ac4 <pvPortMalloc+0x18c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089be:	e004      	b.n	80089ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d903      	bls.n	80089dc <pvPortMalloc+0xa4>
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1f1      	bne.n	80089c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089dc:	4b36      	ldr	r3, [pc, #216]	; (8008ab8 <pvPortMalloc+0x180>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d050      	beq.n	8008a88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2208      	movs	r2, #8
 80089ec:	4413      	add	r3, r2
 80089ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	2308      	movs	r3, #8
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d91f      	bls.n	8008a48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <pvPortMalloc+0xf8>
	__asm volatile
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	613b      	str	r3, [r7, #16]
}
 8008a2c:	bf00      	nop
 8008a2e:	e7fe      	b.n	8008a2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	1ad2      	subs	r2, r2, r3
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a42:	69b8      	ldr	r0, [r7, #24]
 8008a44:	f000 f908 	bl	8008c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a48:	4b1d      	ldr	r3, [pc, #116]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	4a1b      	ldr	r2, [pc, #108]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a56:	4b1a      	ldr	r3, [pc, #104]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	4b1b      	ldr	r3, [pc, #108]	; (8008ac8 <pvPortMalloc+0x190>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d203      	bcs.n	8008a6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a62:	4b17      	ldr	r3, [pc, #92]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a18      	ldr	r2, [pc, #96]	; (8008ac8 <pvPortMalloc+0x190>)
 8008a68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	4b13      	ldr	r3, [pc, #76]	; (8008abc <pvPortMalloc+0x184>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <pvPortMalloc+0x194>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3301      	adds	r3, #1
 8008a84:	4a11      	ldr	r2, [pc, #68]	; (8008acc <pvPortMalloc+0x194>)
 8008a86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a88:	f7fe fcfe 	bl	8007488 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <pvPortMalloc+0x174>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	60fb      	str	r3, [r7, #12]
}
 8008aa8:	bf00      	nop
 8008aaa:	e7fe      	b.n	8008aaa <pvPortMalloc+0x172>
	return pvReturn;
 8008aac:	69fb      	ldr	r3, [r7, #28]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3728      	adds	r7, #40	; 0x28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20005368 	.word	0x20005368
 8008abc:	2000537c 	.word	0x2000537c
 8008ac0:	2000536c 	.word	0x2000536c
 8008ac4:	20005360 	.word	0x20005360
 8008ac8:	20005370 	.word	0x20005370
 8008acc:	20005374 	.word	0x20005374

08008ad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d04d      	beq.n	8008b7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ae2:	2308      	movs	r3, #8
 8008ae4:	425b      	negs	r3, r3
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	4413      	add	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	4b24      	ldr	r3, [pc, #144]	; (8008b88 <vPortFree+0xb8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4013      	ands	r3, r2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10a      	bne.n	8008b14 <vPortFree+0x44>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	60fb      	str	r3, [r7, #12]
}
 8008b10:	bf00      	nop
 8008b12:	e7fe      	b.n	8008b12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00a      	beq.n	8008b32 <vPortFree+0x62>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	60bb      	str	r3, [r7, #8]
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	4b14      	ldr	r3, [pc, #80]	; (8008b88 <vPortFree+0xb8>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01e      	beq.n	8008b7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d11a      	bne.n	8008b7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <vPortFree+0xb8>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	43db      	mvns	r3, r3
 8008b52:	401a      	ands	r2, r3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b58:	f7fe fc88 	bl	800746c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <vPortFree+0xbc>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4413      	add	r3, r2
 8008b66:	4a09      	ldr	r2, [pc, #36]	; (8008b8c <vPortFree+0xbc>)
 8008b68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b6a:	6938      	ldr	r0, [r7, #16]
 8008b6c:	f000 f874 	bl	8008c58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <vPortFree+0xc0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3301      	adds	r3, #1
 8008b76:	4a06      	ldr	r2, [pc, #24]	; (8008b90 <vPortFree+0xc0>)
 8008b78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b7a:	f7fe fc85 	bl	8007488 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b7e:	bf00      	nop
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	2000537c 	.word	0x2000537c
 8008b8c:	2000536c 	.word	0x2000536c
 8008b90:	20005378 	.word	0x20005378

08008b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ba0:	4b27      	ldr	r3, [pc, #156]	; (8008c40 <prvHeapInit+0xac>)
 8008ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00c      	beq.n	8008bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
 8008bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	4a1f      	ldr	r2, [pc, #124]	; (8008c40 <prvHeapInit+0xac>)
 8008bc4:	4413      	add	r3, r2
 8008bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	; (8008c44 <prvHeapInit+0xb0>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bd2:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <prvHeapInit+0xb0>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	4413      	add	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008be0:	2208      	movs	r2, #8
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	1a9b      	subs	r3, r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f023 0307 	bic.w	r3, r3, #7
 8008bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bfe:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <prvHeapInit+0xb4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <prvHeapInit+0xb4>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	4a0a      	ldr	r2, [pc, #40]	; (8008c4c <prvHeapInit+0xb8>)
 8008c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <prvHeapInit+0xbc>)
 8008c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <prvHeapInit+0xc0>)
 8008c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c32:	601a      	str	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20001760 	.word	0x20001760
 8008c44:	20005360 	.word	0x20005360
 8008c48:	20005368 	.word	0x20005368
 8008c4c:	20005370 	.word	0x20005370
 8008c50:	2000536c 	.word	0x2000536c
 8008c54:	2000537c 	.word	0x2000537c

08008c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c60:	4b28      	ldr	r3, [pc, #160]	; (8008d04 <prvInsertBlockIntoFreeList+0xac>)
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	e002      	b.n	8008c6c <prvInsertBlockIntoFreeList+0x14>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d8f7      	bhi.n	8008c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	4413      	add	r3, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d108      	bne.n	8008c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	441a      	add	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d118      	bne.n	8008ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b15      	ldr	r3, [pc, #84]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d00d      	beq.n	8008cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	441a      	add	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	e008      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	e003      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d002      	beq.n	8008cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	20005360 	.word	0x20005360
 8008d08:	20005368 	.word	0x20005368

08008d0c <memset>:
 8008d0c:	4402      	add	r2, r0
 8008d0e:	4603      	mov	r3, r0
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d100      	bne.n	8008d16 <memset+0xa>
 8008d14:	4770      	bx	lr
 8008d16:	f803 1b01 	strb.w	r1, [r3], #1
 8008d1a:	e7f9      	b.n	8008d10 <memset+0x4>

08008d1c <strchr>:
 8008d1c:	b2c9      	uxtb	r1, r1
 8008d1e:	4603      	mov	r3, r0
 8008d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d24:	b11a      	cbz	r2, 8008d2e <strchr+0x12>
 8008d26:	428a      	cmp	r2, r1
 8008d28:	d1f9      	bne.n	8008d1e <strchr+0x2>
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	4770      	bx	lr
 8008d2e:	2900      	cmp	r1, #0
 8008d30:	bf18      	it	ne
 8008d32:	2300      	movne	r3, #0
 8008d34:	e7f9      	b.n	8008d2a <strchr+0xe>

08008d36 <strncpy>:
 8008d36:	b510      	push	{r4, lr}
 8008d38:	3901      	subs	r1, #1
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	b132      	cbz	r2, 8008d4c <strncpy+0x16>
 8008d3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d42:	f803 4b01 	strb.w	r4, [r3], #1
 8008d46:	3a01      	subs	r2, #1
 8008d48:	2c00      	cmp	r4, #0
 8008d4a:	d1f7      	bne.n	8008d3c <strncpy+0x6>
 8008d4c:	441a      	add	r2, r3
 8008d4e:	2100      	movs	r1, #0
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d100      	bne.n	8008d56 <strncpy+0x20>
 8008d54:	bd10      	pop	{r4, pc}
 8008d56:	f803 1b01 	strb.w	r1, [r3], #1
 8008d5a:	e7f9      	b.n	8008d50 <strncpy+0x1a>

08008d5c <_reclaim_reent>:
 8008d5c:	4b29      	ldr	r3, [pc, #164]	; (8008e04 <_reclaim_reent+0xa8>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4283      	cmp	r3, r0
 8008d62:	b570      	push	{r4, r5, r6, lr}
 8008d64:	4604      	mov	r4, r0
 8008d66:	d04b      	beq.n	8008e00 <_reclaim_reent+0xa4>
 8008d68:	69c3      	ldr	r3, [r0, #28]
 8008d6a:	b143      	cbz	r3, 8008d7e <_reclaim_reent+0x22>
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d144      	bne.n	8008dfc <_reclaim_reent+0xa0>
 8008d72:	69e3      	ldr	r3, [r4, #28]
 8008d74:	6819      	ldr	r1, [r3, #0]
 8008d76:	b111      	cbz	r1, 8008d7e <_reclaim_reent+0x22>
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f000 f881 	bl	8008e80 <_free_r>
 8008d7e:	6961      	ldr	r1, [r4, #20]
 8008d80:	b111      	cbz	r1, 8008d88 <_reclaim_reent+0x2c>
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 f87c 	bl	8008e80 <_free_r>
 8008d88:	69e1      	ldr	r1, [r4, #28]
 8008d8a:	b111      	cbz	r1, 8008d92 <_reclaim_reent+0x36>
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 f877 	bl	8008e80 <_free_r>
 8008d92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008d94:	b111      	cbz	r1, 8008d9c <_reclaim_reent+0x40>
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 f872 	bl	8008e80 <_free_r>
 8008d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d9e:	b111      	cbz	r1, 8008da6 <_reclaim_reent+0x4a>
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 f86d 	bl	8008e80 <_free_r>
 8008da6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008da8:	b111      	cbz	r1, 8008db0 <_reclaim_reent+0x54>
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 f868 	bl	8008e80 <_free_r>
 8008db0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008db2:	b111      	cbz	r1, 8008dba <_reclaim_reent+0x5e>
 8008db4:	4620      	mov	r0, r4
 8008db6:	f000 f863 	bl	8008e80 <_free_r>
 8008dba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008dbc:	b111      	cbz	r1, 8008dc4 <_reclaim_reent+0x68>
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 f85e 	bl	8008e80 <_free_r>
 8008dc4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008dc6:	b111      	cbz	r1, 8008dce <_reclaim_reent+0x72>
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f000 f859 	bl	8008e80 <_free_r>
 8008dce:	6a23      	ldr	r3, [r4, #32]
 8008dd0:	b1b3      	cbz	r3, 8008e00 <_reclaim_reent+0xa4>
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dd8:	4718      	bx	r3
 8008dda:	5949      	ldr	r1, [r1, r5]
 8008ddc:	b941      	cbnz	r1, 8008df0 <_reclaim_reent+0x94>
 8008dde:	3504      	adds	r5, #4
 8008de0:	69e3      	ldr	r3, [r4, #28]
 8008de2:	2d80      	cmp	r5, #128	; 0x80
 8008de4:	68d9      	ldr	r1, [r3, #12]
 8008de6:	d1f8      	bne.n	8008dda <_reclaim_reent+0x7e>
 8008de8:	4620      	mov	r0, r4
 8008dea:	f000 f849 	bl	8008e80 <_free_r>
 8008dee:	e7c0      	b.n	8008d72 <_reclaim_reent+0x16>
 8008df0:	680e      	ldr	r6, [r1, #0]
 8008df2:	4620      	mov	r0, r4
 8008df4:	f000 f844 	bl	8008e80 <_free_r>
 8008df8:	4631      	mov	r1, r6
 8008dfa:	e7ef      	b.n	8008ddc <_reclaim_reent+0x80>
 8008dfc:	2500      	movs	r5, #0
 8008dfe:	e7ef      	b.n	8008de0 <_reclaim_reent+0x84>
 8008e00:	bd70      	pop	{r4, r5, r6, pc}
 8008e02:	bf00      	nop
 8008e04:	200000a8 	.word	0x200000a8

08008e08 <__libc_init_array>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	4d0d      	ldr	r5, [pc, #52]	; (8008e40 <__libc_init_array+0x38>)
 8008e0c:	4c0d      	ldr	r4, [pc, #52]	; (8008e44 <__libc_init_array+0x3c>)
 8008e0e:	1b64      	subs	r4, r4, r5
 8008e10:	10a4      	asrs	r4, r4, #2
 8008e12:	2600      	movs	r6, #0
 8008e14:	42a6      	cmp	r6, r4
 8008e16:	d109      	bne.n	8008e2c <__libc_init_array+0x24>
 8008e18:	4d0b      	ldr	r5, [pc, #44]	; (8008e48 <__libc_init_array+0x40>)
 8008e1a:	4c0c      	ldr	r4, [pc, #48]	; (8008e4c <__libc_init_array+0x44>)
 8008e1c:	f000 f888 	bl	8008f30 <_init>
 8008e20:	1b64      	subs	r4, r4, r5
 8008e22:	10a4      	asrs	r4, r4, #2
 8008e24:	2600      	movs	r6, #0
 8008e26:	42a6      	cmp	r6, r4
 8008e28:	d105      	bne.n	8008e36 <__libc_init_array+0x2e>
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e30:	4798      	blx	r3
 8008e32:	3601      	adds	r6, #1
 8008e34:	e7ee      	b.n	8008e14 <__libc_init_array+0xc>
 8008e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3a:	4798      	blx	r3
 8008e3c:	3601      	adds	r6, #1
 8008e3e:	e7f2      	b.n	8008e26 <__libc_init_array+0x1e>
 8008e40:	08008ff8 	.word	0x08008ff8
 8008e44:	08008ff8 	.word	0x08008ff8
 8008e48:	08008ff8 	.word	0x08008ff8
 8008e4c:	08008ffc 	.word	0x08008ffc

08008e50 <__retarget_lock_acquire_recursive>:
 8008e50:	4770      	bx	lr

08008e52 <__retarget_lock_release_recursive>:
 8008e52:	4770      	bx	lr

08008e54 <strcpy>:
 8008e54:	4603      	mov	r3, r0
 8008e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e5a:	f803 2b01 	strb.w	r2, [r3], #1
 8008e5e:	2a00      	cmp	r2, #0
 8008e60:	d1f9      	bne.n	8008e56 <strcpy+0x2>
 8008e62:	4770      	bx	lr

08008e64 <memcpy>:
 8008e64:	440a      	add	r2, r1
 8008e66:	4291      	cmp	r1, r2
 8008e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e6c:	d100      	bne.n	8008e70 <memcpy+0xc>
 8008e6e:	4770      	bx	lr
 8008e70:	b510      	push	{r4, lr}
 8008e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e7a:	4291      	cmp	r1, r2
 8008e7c:	d1f9      	bne.n	8008e72 <memcpy+0xe>
 8008e7e:	bd10      	pop	{r4, pc}

08008e80 <_free_r>:
 8008e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e82:	2900      	cmp	r1, #0
 8008e84:	d044      	beq.n	8008f10 <_free_r+0x90>
 8008e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e8a:	9001      	str	r0, [sp, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008e92:	bfb8      	it	lt
 8008e94:	18e4      	addlt	r4, r4, r3
 8008e96:	f000 f83f 	bl	8008f18 <__malloc_lock>
 8008e9a:	4a1e      	ldr	r2, [pc, #120]	; (8008f14 <_free_r+0x94>)
 8008e9c:	9801      	ldr	r0, [sp, #4]
 8008e9e:	6813      	ldr	r3, [r2, #0]
 8008ea0:	b933      	cbnz	r3, 8008eb0 <_free_r+0x30>
 8008ea2:	6063      	str	r3, [r4, #4]
 8008ea4:	6014      	str	r4, [r2, #0]
 8008ea6:	b003      	add	sp, #12
 8008ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008eac:	f000 b83a 	b.w	8008f24 <__malloc_unlock>
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	d908      	bls.n	8008ec6 <_free_r+0x46>
 8008eb4:	6825      	ldr	r5, [r4, #0]
 8008eb6:	1961      	adds	r1, r4, r5
 8008eb8:	428b      	cmp	r3, r1
 8008eba:	bf01      	itttt	eq
 8008ebc:	6819      	ldreq	r1, [r3, #0]
 8008ebe:	685b      	ldreq	r3, [r3, #4]
 8008ec0:	1949      	addeq	r1, r1, r5
 8008ec2:	6021      	streq	r1, [r4, #0]
 8008ec4:	e7ed      	b.n	8008ea2 <_free_r+0x22>
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	b10b      	cbz	r3, 8008ed0 <_free_r+0x50>
 8008ecc:	42a3      	cmp	r3, r4
 8008ece:	d9fa      	bls.n	8008ec6 <_free_r+0x46>
 8008ed0:	6811      	ldr	r1, [r2, #0]
 8008ed2:	1855      	adds	r5, r2, r1
 8008ed4:	42a5      	cmp	r5, r4
 8008ed6:	d10b      	bne.n	8008ef0 <_free_r+0x70>
 8008ed8:	6824      	ldr	r4, [r4, #0]
 8008eda:	4421      	add	r1, r4
 8008edc:	1854      	adds	r4, r2, r1
 8008ede:	42a3      	cmp	r3, r4
 8008ee0:	6011      	str	r1, [r2, #0]
 8008ee2:	d1e0      	bne.n	8008ea6 <_free_r+0x26>
 8008ee4:	681c      	ldr	r4, [r3, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	6053      	str	r3, [r2, #4]
 8008eea:	440c      	add	r4, r1
 8008eec:	6014      	str	r4, [r2, #0]
 8008eee:	e7da      	b.n	8008ea6 <_free_r+0x26>
 8008ef0:	d902      	bls.n	8008ef8 <_free_r+0x78>
 8008ef2:	230c      	movs	r3, #12
 8008ef4:	6003      	str	r3, [r0, #0]
 8008ef6:	e7d6      	b.n	8008ea6 <_free_r+0x26>
 8008ef8:	6825      	ldr	r5, [r4, #0]
 8008efa:	1961      	adds	r1, r4, r5
 8008efc:	428b      	cmp	r3, r1
 8008efe:	bf04      	itt	eq
 8008f00:	6819      	ldreq	r1, [r3, #0]
 8008f02:	685b      	ldreq	r3, [r3, #4]
 8008f04:	6063      	str	r3, [r4, #4]
 8008f06:	bf04      	itt	eq
 8008f08:	1949      	addeq	r1, r1, r5
 8008f0a:	6021      	streq	r1, [r4, #0]
 8008f0c:	6054      	str	r4, [r2, #4]
 8008f0e:	e7ca      	b.n	8008ea6 <_free_r+0x26>
 8008f10:	b003      	add	sp, #12
 8008f12:	bd30      	pop	{r4, r5, pc}
 8008f14:	200054bc 	.word	0x200054bc

08008f18 <__malloc_lock>:
 8008f18:	4801      	ldr	r0, [pc, #4]	; (8008f20 <__malloc_lock+0x8>)
 8008f1a:	f7ff bf99 	b.w	8008e50 <__retarget_lock_acquire_recursive>
 8008f1e:	bf00      	nop
 8008f20:	200054b8 	.word	0x200054b8

08008f24 <__malloc_unlock>:
 8008f24:	4801      	ldr	r0, [pc, #4]	; (8008f2c <__malloc_unlock+0x8>)
 8008f26:	f7ff bf94 	b.w	8008e52 <__retarget_lock_release_recursive>
 8008f2a:	bf00      	nop
 8008f2c:	200054b8 	.word	0x200054b8

08008f30 <_init>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	bf00      	nop
 8008f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f36:	bc08      	pop	{r3}
 8008f38:	469e      	mov	lr, r3
 8008f3a:	4770      	bx	lr

08008f3c <_fini>:
 8008f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3e:	bf00      	nop
 8008f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f42:	bc08      	pop	{r3}
 8008f44:	469e      	mov	lr, r3
 8008f46:	4770      	bx	lr
